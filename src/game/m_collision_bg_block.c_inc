int mCoBG_block_bgcheck_mode = mCoBG_BLOCK_BGCHECK_MODE_NORMAL;

extern void mCoBG_InitBlockBgCheckMode(void) {
    mCoBG_block_bgcheck_mode = mCoBG_BLOCK_BGCHECK_MODE_NORMAL;
}

extern int mCoBG_ChangeBlockBgCheckMode(int mode) {
    mCoBG_block_bgcheck_mode = mode & 1;
    return mCoBG_block_bgcheck_mode;
}

extern int mCoBG_GetBlockBgCheckMode(void) {
    return mCoBG_block_bgcheck_mode & 1;
}

extern xyz_t mCoBG_UniqueWallCheck(ACTOR* actorx, f32 range, f32 y_ofs) {
    int bx;
    int bz;
    xyz_t ret = { 0.0f, 0.0f, 0.0f };

    mCoBG_InitRevpos(&l_ActorInf.rev_pos);
    mCoBG_GetCurrentCenterPosition(&l_ActorInf.center_pos, actorx);
    mCoBG_GetOldCenterPosition(&l_ActorInf.old_center_pos, actorx);
    mCoBG_GetSpeedByWpos(l_ActorInf.speed_xz0, actorx);

    if (mFI_Wpos2BlockNum(&bx, &bz, l_ActorInf.old_center_pos)) {
        xyz_t block_base = { 0.0f, 0.0f, 0.0f };

        mCoBG_SetXyz_t(&l_ActorInf.rev_pos, 0.0f, 0.0f, 0.0f);
        mFI_BkNum2WposXZ(&block_base.x, &block_base.z, bx, bz);
        if (mCoBG_GetBlockBgCheckMode() == mCoBG_BLOCK_BGCHECK_MODE_INTRO_DEMO &&
            (mFI_BkNum2BlockKind(bx, bz) & mRF_BLOCKKIND_PLAYER) != 0
        ) {
            block_base.x += mFI_UT_WORLDSIZE_X_F;
            block_base.z += mFI_UT_WORLDSIZE_Z_F;
            return mCoBG_ScopeWallCheck(actorx, &block_base, mFI_BK_WORLDSIZE_X - 2 * mFI_UT_WORLDSIZE_X, mFI_BK_WORLDSIZE_Z - 2 * mFI_UT_WORLDSIZE_Z, range, y_ofs);
        } else {
            return mCoBG_ScopeWallCheck(actorx, &block_base, mFI_BK_WORLDSIZE_X, mFI_BK_WORLDSIZE_Z, range, y_ofs);
        }
    }

    return ret;
}

extern xyz_t mCoBG_ScopeWallCheck(ACTOR* actorx, const xyz_t* base_pos, f32 x, f32 z, f32 range, f32 y_ofs) {
    f32 start[2];
    f32 end[2];
    s16 rev_type;
    xyz_t rev = { 0.0f, 0.0f, 0.0f };

    mCoBG_InitRevpos(&l_ActorInf.rev_pos);
    mCoBG_GetCurrentCenterPosition(&l_ActorInf.center_pos, actorx);
    mCoBG_GetOldCenterPosition(&l_ActorInf.old_center_pos, actorx);
    mCoBG_GetSpeedByWpos(l_ActorInf.speed_xz0, actorx);

    if (l_ActorInf.speed_xz0[0] != 0.0f || l_ActorInf.speed_xz0[1] != 0.0f) {
        start[0] = (base_pos->x);
        start[1] = (base_pos->z);
        end[0] = start[0] + x;
        end[1] = start[1] + z;
        
        start[0] += range;
        start[1] += range;

        end[0] -= range;
        end[1] -= range;

        mCoBG_SetXyz_t(&l_ActorInf.rev_pos, 0.0f, 0.0f, 0.0f);

        if (l_ActorInf.center_pos.x < start[0]) {
            l_ActorInf.rev_pos.x = start[0] - l_ActorInf.center_pos.x;
        } else if (l_ActorInf.center_pos.x > end[0]) {
            l_ActorInf.rev_pos.x = end[0] - l_ActorInf.center_pos.x;
        }

        if (l_ActorInf.center_pos.z < start[1]) {
            l_ActorInf.rev_pos.z = start[1] - l_ActorInf.center_pos.z;
        } else if (l_ActorInf.center_pos.z > end[1]) {
            l_ActorInf.rev_pos.z = end[1] - l_ActorInf.center_pos.z;
        }

        mCoBG_GroundCheck(&l_ActorInf.rev_pos, &l_ActorInf, actorx, y_ofs, &actorx->bg_collision_check.result, NULL, FALSE);
        mCoBG_CarryOutReverse(actorx, l_ActorInf.rev_pos, mCoBG_REVERSE_TYPE_REVERSE);
        return l_ActorInf.rev_pos;
    }

    return rev;
}
