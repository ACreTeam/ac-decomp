extern u16 cal_win_tuki10_pal[];
extern u16 cal_win_tuki11_pal[];
extern u16 cal_win_tuki12_pal[];
extern u16 cal_win_tuki1_pal[];
extern u16 cal_win_tuki2_pal[];
extern u16 cal_win_tuki3_pal[];
extern u16 cal_win_tuki4_pal[];
extern u16 cal_win_tuki5_pal[];
extern u16 cal_win_tuki6_pal[];
extern u16 cal_win_tuki7_pal[];
extern u16 cal_win_tuki8_pal[];
extern u16 cal_win_tuki9_pal[];

static u16* back_pal_table[lbRTC_MONTHS_MAX] = {
   cal_win_tuki1_pal, cal_win_tuki2_pal, cal_win_tuki3_pal, cal_win_tuki4_pal, cal_win_tuki5_pal, cal_win_tuki6_pal, cal_win_tuki7_pal, cal_win_tuki8_pal,
   cal_win_tuki9_pal, cal_win_tuki10_pal, cal_win_tuki11_pal, cal_win_tuki12_pal,
};

extern u8 cal_win_tuki1_tex[];
extern u8 cal_win_tuki2_tex[];

static u8* back_tex_table[lbRTC_MONTHS_MAX] = {
   cal_win_tuki1_tex, cal_win_tuki2_tex, cal_win_tuki2_tex, cal_win_tuki2_tex, cal_win_tuki2_tex, cal_win_tuki2_tex, cal_win_tuki2_tex, cal_win_tuki2_tex,
   cal_win_tuki2_tex, cal_win_tuki2_tex, cal_win_tuki2_tex, cal_win_tuki2_tex,
};

extern u8 cal_win_april_tex_rgb_ia8[];
extern u8 cal_win_august_tex_rgb_ia8[];
extern u8 cal_win_december_tex_rgb_ia8[];
extern u8 cal_win_february_tex_rgb_ia8[];
extern u8 cal_win_january_tex_rgb_ia8[];
extern u8 cal_win_july_tex_rgb_ia8[];
extern u8 cal_win_june_tex_rgb_ia8[];
extern u8 cal_win_march_tex_rgb_ia8[];
extern u8 cal_win_may_tex_rgb_ia8[];
extern u8 cal_win_november_tex_rgb_ia8[];
extern u8 cal_win_october_tex_rgb_ia8[];
extern u8 cal_win_september_tex_rgb_ia8[];

static u8* month_tex_table[lbRTC_MONTHS_MAX] = {
   cal_win_january_tex_rgb_ia8, cal_win_february_tex_rgb_ia8, cal_win_march_tex_rgb_ia8, cal_win_april_tex_rgb_ia8, cal_win_may_tex_rgb_ia8, cal_win_june_tex_rgb_ia8, cal_win_july_tex_rgb_ia8, cal_win_august_tex_rgb_ia8,
   cal_win_september_tex_rgb_ia8, cal_win_october_tex_rgb_ia8, cal_win_november_tex_rgb_ia8, cal_win_december_tex_rgb_ia8,
};

extern u8 cal_win_event_tex[];

static u8* event_tex_table[] = {
    cal_win_event_tex, cal_win_event_tex
};

static u8 box_prim_table[5][3] = {
    {120, 120, 95}, {225, 195, 100}, {245, 205, 165}, {255, 245, 185}, {185, 215, 185},
};

static u8 box_env_table[5][3] = {
    {0x46, 0x46, 0x28}, {0x69, 0x3C, 0x32}, {0x69, 0x41, 0x41}, {0x7D, 0x55, 0x55}, {0x4B, 0x32, 0x3C},
};

static u8 number_prim_table[5][3] = {
    {0x82, 0x64, 0x3C}, {0x82, 0x64, 0x3C}, {0x7D, 0x5F, 0x55}, {0x82, 0x64, 0x3C}, {0x6E, 0x6E, 0x7D},
};

static u8 number2_prim_table[5][3] = {
    {0x82, 0x64, 0x3C}, {0x4B, 0x32, 0x32}, {0x55, 0x28, 0x28}, {0x4B, 0x32, 0x32}, {0x3C, 0x3C, 0x4B},
};

extern u8 cal_win_suuji10_tex_rgb_i4[];
extern u8 cal_win_suuji11_tex_rgb_i4[];
extern u8 cal_win_suuji12_tex_rgb_i4[];
extern u8 cal_win_suuji13_tex_rgb_i4[];
extern u8 cal_win_suuji14_tex_rgb_i4[];
extern u8 cal_win_suuji15_tex_rgb_i4[];
extern u8 cal_win_suuji16_tex_rgb_i4[];
extern u8 cal_win_suuji17_tex_rgb_i4[];
extern u8 cal_win_suuji18_tex_rgb_i4[];
extern u8 cal_win_suuji19_tex_rgb_i4[];
extern u8 cal_win_suuji1_tex_rgb_i4[];
extern u8 cal_win_suuji20_tex_rgb_i4[];
extern u8 cal_win_suuji21_tex_rgb_i4[];
extern u8 cal_win_suuji22_tex_rgb_i4[];
extern u8 cal_win_suuji23_tex_rgb_i4[];
extern u8 cal_win_suuji24_tex_rgb_i4[];
extern u8 cal_win_suuji25_tex_rgb_i4[];
extern u8 cal_win_suuji26_tex_rgb_i4[];
extern u8 cal_win_suuji27_tex_rgb_i4[];
extern u8 cal_win_suuji28_tex_rgb_i4[];
extern u8 cal_win_suuji29_tex_rgb_i4[];
extern u8 cal_win_suuji2_tex_rgb_i4[];
extern u8 cal_win_suuji30_tex_rgb_i4[];
extern u8 cal_win_suuji31_tex_rgb_i4[];
extern u8 cal_win_suuji3_tex_rgb_i4[];
extern u8 cal_win_suuji4_tex_rgb_i4[];
extern u8 cal_win_suuji5_tex_rgb_i4[];
extern u8 cal_win_suuji6_tex_rgb_i4[];
extern u8 cal_win_suuji7_tex_rgb_i4[];
extern u8 cal_win_suuji8_tex_rgb_i4[];
extern u8 cal_win_suuji9_tex_rgb_i4[];

static u8* suuji_tex_table[31] = {
   cal_win_suuji1_tex_rgb_i4, cal_win_suuji2_tex_rgb_i4, cal_win_suuji3_tex_rgb_i4, cal_win_suuji4_tex_rgb_i4, cal_win_suuji5_tex_rgb_i4, cal_win_suuji6_tex_rgb_i4, cal_win_suuji7_tex_rgb_i4, cal_win_suuji8_tex_rgb_i4,
   cal_win_suuji9_tex_rgb_i4, cal_win_suuji10_tex_rgb_i4, cal_win_suuji11_tex_rgb_i4, cal_win_suuji12_tex_rgb_i4, cal_win_suuji13_tex_rgb_i4, cal_win_suuji14_tex_rgb_i4, cal_win_suuji15_tex_rgb_i4, cal_win_suuji16_tex_rgb_i4,
   cal_win_suuji17_tex_rgb_i4, cal_win_suuji18_tex_rgb_i4, cal_win_suuji19_tex_rgb_i4, cal_win_suuji20_tex_rgb_i4, cal_win_suuji21_tex_rgb_i4, cal_win_suuji22_tex_rgb_i4, cal_win_suuji23_tex_rgb_i4, cal_win_suuji24_tex_rgb_i4,
   cal_win_suuji25_tex_rgb_i4, cal_win_suuji26_tex_rgb_i4, cal_win_suuji27_tex_rgb_i4, cal_win_suuji28_tex_rgb_i4, cal_win_suuji29_tex_rgb_i4, cal_win_suuji30_tex_rgb_i4, cal_win_suuji31_tex_rgb_i4,
};

extern u8 cal_hyouji_st1_tex_rgb_ia8[];
extern u8 cal_hyouji_st5_tex_rgb_ia8[];

static u8* cal_hyoji_txt_table[2] = {
   cal_hyouji_st1_tex_rgb_ia8, cal_hyouji_st5_tex_rgb_ia8,
};

extern Gfx cal_win_nen1_model[];
extern Gfx cal_win_nen2_model[];
extern Gfx cal_win_nen3_model[];
extern Gfx cal_win_nen4_model[];

static Gfx* cal_win_nen_table[4] = {
   cal_win_nen4_model, cal_win_nen3_model, cal_win_nen2_model, cal_win_nen1_model,
};

extern u8 cal_win_nen0_tex_rgb_i4[];
extern u8 cal_win_nen1_tex_rgb_i4[];
extern u8 cal_win_nen2_tex_rgb_i4[];
extern u8 cal_win_nen3_tex_rgb_i4[];
extern u8 cal_win_nen4_tex_rgb_i4[];
extern u8 cal_win_nen5_tex_rgb_i4[];
extern u8 cal_win_nen6_tex_rgb_i4[];
extern u8 cal_win_nen7_tex_rgb_i4[];
extern u8 cal_win_nen8_tex_rgb_i4[];
extern u8 cal_win_nen9_tex_rgb_i4[];

static u8* cal_win_nen_txt_table[10] = {
   cal_win_nen0_tex_rgb_i4, cal_win_nen1_tex_rgb_i4, cal_win_nen2_tex_rgb_i4, cal_win_nen3_tex_rgb_i4, cal_win_nen4_tex_rgb_i4, cal_win_nen5_tex_rgb_i4, cal_win_nen6_tex_rgb_i4, cal_win_nen7_tex_rgb_i4,
   cal_win_nen8_tex_rgb_i4, cal_win_nen9_tex_rgb_i4,
};

static u8 icon_mark_prim_table[][3] = {
    {0x5F, 0x3C, 0x3C}, {0x5F, 0x3C, 0x3C}, {0xB9, 0x32, 0x32},
};

extern Gfx needlework_before_model[];
extern Gfx cal_win_tuki_model[];
extern Gfx cal_win_shita_model[];
extern Gfx cal_win_futi_model[];
extern Gfx cal_win_nitiyouT_model[];
extern Gfx cal_win_doyouT_model[];
extern Gfx cal_win_hijituT_model[];
extern Gfx cal_win_eventT_model[];
extern Gfx cal_win_nen_before[];
extern Gfx cal_win_monthT_model[];
extern u8 cal_win_box_tex_rgb_ia8[];
extern Gfx cal_win_boxT_model[];
extern Gfx cal_win_suuji_model[];
extern Gfx cal_icon_mark_model[];
extern u8 cal_win_box2_tex_rgb_ia8[];
extern Gfx cal_icon_cursor_model[];
extern Gfx cal_icon_sakana_model[];
extern Gfx cal_icon_yajirushi_model[];
extern Gfx cal_icon_yajirushi_gfx[];
extern Gfx cal_icon_yajirushi_gfx2[];

static void mCD_set_base_dl(Submenu* submenu, GAME* game, f32 pos_x, f32 pos_y, int sel) {
    GRAPH* graph;
    mCD_Ovl_c* calendar;
    int idx;
    int month;
    int year_ofs;
    int t0;
    int flag;
    int k;
    int j;
    int i;
    int type;
    int day;
    int day_type;
    u8* prim_p;
    u8* env_p;
    int tex_idx;
    lbRTC_time_c* rtc_time;

    calendar = submenu->overlay->calendar_ovl;
    graph = game->graph;
    rtc_time = Common_GetPointer(time.rtc_time);
    idx = 37;
    if (calendar->move_proc_idx >= mCD_MVPL_DAY) {
        idx = calendar->_1057;
    }

    if (sel < 0 || sel >= 36) {
        return;
    }

    year_ofs = sel / lbRTC_MONTHS_MAX;
    month = sel % lbRTC_MONTHS_MAX;
    Matrix_scale(16.0f, 16.0f, 1.0f, 0);
    Matrix_translate(pos_x, pos_y, 140.0f, 1);

    OPEN_POLY_OPA_DISP(graph);

    gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    gSPDisplayList(POLY_OPA_DISP++, needlework_before_model);
    gDPLoadTLUT_Dolphin(POLY_OPA_DISP++, 15, 16, 1, back_pal_table[month]);
    gDPLoadTextureBlock_4b_Dolphin(POLY_OPA_DISP++, back_tex_table[month], G_IM_FMT_CI, 32, 32, 15, GX_REPEAT, GX_REPEAT, 0, 0);
    gSPDisplayList(POLY_OPA_DISP++, cal_win_tuki_model);
    gSPDisplayList(POLY_OPA_DISP++, cal_win_shita_model);
    gSPDisplayList(POLY_OPA_DISP++, cal_win_futi_model);
    gSPDisplayList(POLY_OPA_DISP++, cal_win_nitiyouT_model);
    gSPDisplayList(POLY_OPA_DISP++, cal_win_doyouT_model);
    gSPDisplayList(POLY_OPA_DISP++, cal_win_hijituT_model);

    if (calendar->move_proc_idx == mCD_MVPL_DAY && calendar->_1043 != 0) {
        flag = TRUE;
    } else {
        flag = FALSE;
    }
    
    if (!flag) {
        gDPLoadTextureBlock_8b_Dolphin(POLY_OPA_DISP++, event_tex_table[0], G_IM_FMT_IA, 32, 64, 0, GX_MIRROR, GX_MIRROR, 0, 0);
        gDPSetPrimColor(POLY_OPA_DISP++, 0, 255, 120, 120, 95, 255);
        gDPSetEnvColor(POLY_OPA_DISP++, 70, 70, 40, 255);
        gSPDisplayList(POLY_OPA_DISP++, cal_win_eventT_model);
    }

    gSPDisplayList(POLY_OPA_DISP++, cal_win_nen_before);

    t0 = (rtc_time->year + year_ofs);
    t0--;
    for (j = 0; j < 4; j++) {
        tex_idx = t0 % 10;

        gDPLoadTextureBlock_4b_Dolphin(POLY_OPA_DISP++, cal_win_nen_txt_table[tex_idx], G_IM_FMT_I, 16, 16, 15, GX_MIRROR, GX_MIRROR, 0, 0);
        gSPDisplayList(POLY_OPA_DISP++, cal_win_nen_table[j]);
        
        t0 /= 10;
    }

    gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    gDPLoadTextureBlock_8b_Dolphin(POLY_OPA_DISP++, month_tex_table[month], G_IM_FMT_IA, 32, 128, 0, GX_MIRROR, GX_MIRROR, 0, 0);
    gSPDisplayList(POLY_OPA_DISP++, cal_win_monthT_model);
    gDPLoadTextureBlock_8b_Dolphin(POLY_OPA_DISP++, cal_win_box_tex_rgb_ia8, G_IM_FMT_IA, 32, 32, 0, GX_MIRROR, GX_MIRROR, 0, 0);
    
    k = 0;
    for (i = 0; i < 37; k++) {
        for (j = 0; j < lbRTC_WEEK && i < 37; i++) {
            Matrix_push();
            Matrix_translate(j * 32, -k * 20, 0.0f, 1);
            
            gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);

            if (idx != i) {
                type = (calendar->month_entries[sel].day_data[i] >> 5) & 0b111;
                
                prim_p = box_prim_table[type];
                gDPSetPrimColor(POLY_OPA_DISP++, 0, 255, prim_p[0], prim_p[1], prim_p[2], 255);

                env_p = box_env_table[type];
                gDPSetEnvColor(POLY_OPA_DISP++, env_p[0], env_p[1], env_p[2], 255);
                gSPDisplayList(POLY_OPA_DISP++, cal_win_boxT_model);
            }

            Matrix_pull();
            j++;
        }
    }

    j = 0;
    for (k = 0; k < 37; j++) {
        for (i = 0; i < lbRTC_WEEK && k < 37; k++) {
            Matrix_push();
            Matrix_translate(i * 32, -j * 20, 0.0f, 1);
            
            gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);

            if (idx != k) {
                type = (calendar->month_entries[sel].day_data[k] >> 5) & 0b111;
                day = (calendar->month_entries[sel].day_data[k] & 0x1F);

                if (day > 0) {
                    prim_p = number_prim_table[type];
                    gDPSetPrimColor(POLY_OPA_DISP++, 0, 255, prim_p[0], prim_p[1], prim_p[2], 255);
                    gDPLoadTextureBlock_4b_Dolphin(POLY_OPA_DISP++, suuji_tex_table[day - 1], G_IM_FMT_I, 16, 16, 15, GX_MIRROR, GX_MIRROR, 0, 0);
                    gSPDisplayList(POLY_OPA_DISP++, cal_win_suuji_model);
                }

                if (calendar->month_entries[sel]._25[k] != 0) {
                    prim_p = icon_mark_prim_table[calendar->month_entries[sel]._25[k]];
                    gDPSetPrimColor(POLY_OPA_DISP++, 0, 255, prim_p[0], prim_p[1], prim_p[2], 255);
                    gSPDisplayList(POLY_OPA_DISP++, cal_icon_mark_model);
                }
            }

            Matrix_pull();
            i++;
        }
    }

    if (calendar->move_proc_idx >= mCD_MVPL_DAY) {
        day = calendar->month_entries[sel].day_data[idx] & 0x1F;
        day_type = calendar->day_type;
        Matrix_push();
        Matrix_translate((idx % lbRTC_WEEK) * 32, -(idx / lbRTC_WEEK) * 20, 0.0f, 1);

        gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
        gDPLoadTextureBlock_8b_Dolphin(POLY_OPA_DISP++, cal_win_box2_tex_rgb_ia8, G_IM_FMT_IA, 32, 32, 0, GX_MIRROR, GX_MIRROR, 0, 0);

        prim_p = box_prim_table[day_type];
        gDPSetPrimColor(POLY_OPA_DISP++, 0, 255, prim_p[0], prim_p[1], prim_p[2], 255);
        env_p = box_env_table[day_type];
        gDPSetEnvColor(POLY_OPA_DISP++, env_p[0], env_p[1], env_p[2], 255);
        gSPDisplayList(POLY_OPA_DISP++, cal_win_boxT_model);
        
        Matrix_translate(0.0f, 4.0f, 0.0f, 1);
        gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
        if (day > 0) {
            prim_p = number2_prim_table[day_type];
            gDPSetPrimColor(POLY_OPA_DISP++, 0, 255, prim_p[0], prim_p[1], prim_p[2], 255);
            gDPLoadTextureBlock_4b_Dolphin(POLY_OPA_DISP++, suuji_tex_table[day - 1], G_IM_FMT_I, 16, 16, 15, GX_MIRROR, GX_MIRROR, 0, 0);
            gSPDisplayList(POLY_OPA_DISP++, cal_win_suuji_model);
        }
        
        if (calendar->month_entries[sel]._25[idx] != 0) {
            prim_p = icon_mark_prim_table[calendar->month_entries[sel]._25[idx]];
            gDPSetPrimColor(POLY_OPA_DISP++, 0, 255, prim_p[0], prim_p[1], prim_p[2], 255);
            gSPDisplayList(POLY_OPA_DISP++, cal_icon_mark_model);
        }
        
        gSPDisplayList(POLY_OPA_DISP++, cal_icon_cursor_model);
        
        Matrix_pull();
        gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    }
    
    if (flag == TRUE) {
        
        gDPLoadTextureBlock_8b_Dolphin(POLY_OPA_DISP++, event_tex_table[0], G_IM_FMT_IA, 32, 64, 0, GX_MIRROR, GX_MIRROR, 0, 0);
        
        day_type = calendar->day_type;
        prim_p = box_prim_table[day_type];
        gDPSetPrimColor(POLY_OPA_DISP++, 0, 255, prim_p[0], prim_p[1], prim_p[2], 255);
        env_p = box_env_table[day_type];
        gDPSetEnvColor(POLY_OPA_DISP++, env_p[0], env_p[1], env_p[2], 255);

        gSPDisplayList(POLY_OPA_DISP++, cal_win_eventT_model);
        
        if (calendar->_103C[calendar->_1042] & 0x80) {
            Matrix_push();
            Matrix_translate(0.0f, 0.0f, 0.0f, 1);
            gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
            gSPDisplayList(POLY_OPA_DISP++, cal_icon_sakana_model);
            Matrix_pull();
            gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
        }
    }
    
    if (flag == TRUE && calendar->_1043 > 1) {
        Matrix_push();
        Matrix_translate(calendar->_1034, -1.5f, 0.0f, 1);
        gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
        gDPSetPrimColor(POLY_OPA_DISP++, 0, 255, 0, 0, 255, calendar->_1054);
        gSPDisplayList(POLY_OPA_DISP++, cal_icon_yajirushi_model);
        
        if (calendar->_1043 - 1 == calendar->_1042) {
            gSPDisplayList(POLY_OPA_DISP++, cal_icon_yajirushi_gfx2);
        } else {
            gSPDisplayList(POLY_OPA_DISP++, cal_icon_yajirushi_gfx);
        }
        
        Matrix_pull();
        gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    }

    CLOSE_POLY_OPA_DISP(graph);
}

extern Gfx cal_hyouji_3DT_model[];
extern Gfx cal_hyouji_shitaT_model[];
extern Gfx cal_hyouji_b2_model[];
extern Gfx cal_hyouji_amojiT_model[];
extern Gfx cal_hyoji_yaji1T_model[];
extern Gfx cal_hyoji_yajiA_gfx[];
extern Gfx cal_hyoji_yajiB_gfx[];
extern Gfx cal_hyouji_stT_model[];

static void mCD_set_hyoji_dl(Submenu* submenu, GAME* game, f32 pos_x, f32 pos_y) {
    GRAPH* graph = game->graph;
    mCD_Ovl_c* calendar = submenu->overlay->calendar_ovl;

    Matrix_scale(16.0f, 16.0f, 1.0f, 0);
    Matrix_translate(pos_x, pos_y, 140.0f, 1);

    OPEN_POLY_OPA_DISP(graph);

    gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    gSPDisplayList(POLY_OPA_DISP++, cal_hyouji_3DT_model);
    gSPDisplayList(POLY_OPA_DISP++, cal_hyouji_shitaT_model);
    gSPDisplayList(POLY_OPA_DISP++, cal_hyouji_b2_model);
    gSPDisplayList(POLY_OPA_DISP++, cal_hyouji_amojiT_model);
    
    if (calendar->move_proc_idx == mCD_MVPL_SELECT) {
        gSPDisplayList(POLY_OPA_DISP++, cal_hyoji_yaji1T_model);

        if (calendar->_1056 > calendar->_1059 - 11) {
            gSPDisplayList(POLY_OPA_DISP++, cal_hyoji_yajiA_gfx);
        }
        
        if (calendar->_1056 < calendar->_1059 + 11) {
            gSPDisplayList(POLY_OPA_DISP++, cal_hyoji_yajiB_gfx);
        }
    }

    gDPSetTextureAdjustMode(POLY_OPA_DISP++, G_TA_DOLPHIN);
    gDPLoadTextureBlock_8b_Dolphin(POLY_OPA_DISP++, cal_hyoji_txt_table[calendar->_105C != mCD_STICK_AREA_CENTER], G_IM_FMT_IA, 64, 64, 0, GX_MIRROR, GX_MIRROR, 0, 0);

    if (calendar->_105C == mCD_STICK_AREA_RIGHT) {
        Matrix_push();
        Matrix_RotateY(DEG2SHORT_ANGLE2(180.0f), 1);
        gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    }
    gSPDisplayList(POLY_OPA_DISP++, cal_hyouji_stT_model);
    gDPSetTextureAdjustMode(POLY_OPA_DISP++, G_TA_N64);
    if (calendar->_105C == mCD_STICK_AREA_RIGHT) {
        Matrix_pull();
        gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    }

    CLOSE_POLY_OPA_DISP(graph);
}

extern Gfx cal_hyouji2_shitaT_model[];
extern Gfx cal_hyouji2_bt_model[];
extern Gfx cal_hyouji2_b2_model[];
extern Gfx cal_hyouji2_amojiT_model[];
extern Gfx cal_hyouji2_bmojiT_model[];

static void mCD_set_hyoji2_dl(Submenu* submenu, GAME* game, f32 pos_x, f32 pos_y) {
    GRAPH* graph = game->graph;

    Matrix_scale(16.0f, 16.0f, 1.0f, 0);
    Matrix_translate(pos_x, pos_y, 140.0f, 1);

    OPEN_POLY_OPA_DISP(graph);

    gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    gSPDisplayList(POLY_OPA_DISP++, cal_hyouji2_shitaT_model);
    gSPDisplayList(POLY_OPA_DISP++, cal_hyouji2_bt_model);
    gSPDisplayList(POLY_OPA_DISP++, cal_hyouji2_b2_model);
    gSPDisplayList(POLY_OPA_DISP++, cal_hyouji2_bmojiT_model);
    gSPDisplayList(POLY_OPA_DISP++, cal_hyouji2_amojiT_model);

    CLOSE_POLY_OPA_DISP(graph);
}

static void mCD_disp_event_dl(Submenu* submenu, GAME* game) {
    GRAPH* graph = game->graph;
    mCD_Ovl_c* calendar = submenu->overlay->calendar_ovl;

    if (calendar->_1043) {
        int day_type;
        u8* prim_p;
        
        (*submenu->overlay->set_char_matrix_proc)(graph);
        day_type = calendar->day_type;
        prim_p = number2_prim_table[day_type];

        // clang-format off
        mFont_SetLineStrings(
            game,
            calendar->event_name_str, mCD_EVENT_NAME_STR_LEN,
            128.0f, 161.0f,
            prim_p[0], prim_p[1], prim_p[2], 255,
            FALSE, TRUE,
            0.875f, 0.875f,
            mFont_MODE_POLY
        );
        // clang-format on
    }
}
