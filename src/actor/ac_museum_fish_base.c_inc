f32 Rnd_EX_f(f32 v) {
    f32 rand1 = 2 * fqrand2();
    f32 rand2 = fqrand();
    if (rand2 > (rand1 * rand1)) {
        if (rand1 > 0) {
            rand1 = sqrtf(rand2);
        } else {
            rand1 = -sqrtf(rand2);
        }
    }
    rand1 = (1.0f + rand1) * 0.5f;
    return v * rand1;
}

f32 Rnd_EX_fx(f32 v1) {
    f32 rand1 = 2 * fqrand2();
    f32 rand2 = fqrand();
    if (rand2 > (rand1 * rand1)) {
        if (rand1 > 0) {
            rand1 = sqrtf(rand2);
        } else {
            rand1 = -sqrtf(rand2);
        }
    }
    rand1 = rand1 / 2;
    return v1 * rand1;
}

void mfish_base_FishMove(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    GAME_PLAY* play = (GAME_PLAY*)game;
    f32 t;
    xyz_t pos;
    if (actor->_59C == 0x18 && actor->_34 != mfish_peck_process) {
        actor->_5E8 *= actor->init_data._18;
    } else {
        add_calc0(&actor->_5E8, 1.0f - actor->init_data._18, 0.025f);
    }

    actor->_5D0 = actor->_5E8 * sin_s(actor->_60C.z);
    actor->_5D8 = actor->_5E8 * cos_s(actor->_60C.z);

    add_calc(&actor->_5D4, MAX(ABS(actor->_5E8 * sin_s(actor->_60C.x)), 0.1f), 0.1f, 0.1f, 0.005f);
    add_calc2(&actor->_5A0.y, actor->_5F4 + actor->init_data._0C, 0.1f, actor->_5D4);

    mfish_move_smooth(actor, game);
    mfish_get_flow_vec(&pos, actor, game);
    actor->_5A0.y += actor->_5D0 + actor->_5DC.x;
    actor->_5A0.z += actor->_5D0 + actor->_5DC.x;
    actor->_5A0.y = actor->_5A0.y + actor->_5DC.y;
    actor->_5A0.y = MAX(60, MIN(110, actor->_5A0.y));
}

int mfish_PosWallCheck(MUSEUM_FISH_PRIVATE_DATA* priv, xyz_t* pos) {
    u32 flag = 0;
    xyz_t p = suisou_pos[priv->_630];
    f32 a, b, c, d;

    if (priv->_630 < 4) {
        a = priv->init_data._28 + 45;
        b = priv->init_data._28 + 45;
        c = priv->init_data._28 + 45;
        d = priv->init_data._28 + 45;
    } else {
        a = priv->init_data._28 + 180;
        b = priv->init_data._28 + 180;
        c = priv->init_data._28 + 5;
        d = priv->init_data._28 + 45;
    }

    if (pos->x > p.x + a) {
        flag |= 4;
    } else if (pos->x < p.x - b) {
        flag |= 2;
    }

    if (pos->z > p.z + c) {
        flag |= 8;
    } else if (pos->z < p.z - d) {
        flag |= 0x10;
    }

    return flag;
}

BOOL mfish_WallCheck(MUSEUM_FISH_PRIVATE_DATA* prv) {
    xyz_t p, p1;

    p = prv->_5A0;

    p.x += sin_s(prv->_60C.x) * (GETREG(TAKREG, 70) + 30.0f);
    p.z += cos_s(prv->_60C.x) * (GETREG(TAKREG, 70) + 30.0f);

    p1 = p;

    return mfish_PosWallCheck(prv, &p1) ? TRUE : FALSE;
}

s16 mfish_get_hide_camera_angle(MUSEUM_FISH_PRIVATE_DATA* priv) {
    s16 v = priv->_60C.z;
    if (v > 0 || (priv->_630 == 2 && fqrand() < 0.8f)) {
        if (v > DEG2SHORT_ANGLE(90)) {
            v = DEG2SHORT_ANGLE(90) + DEG2SHORT_ANGLE(45 * fqrand());
        } else {
            v = DEG2SHORT_ANGLE(90) - DEG2SHORT_ANGLE(45 * fqrand());
        }
    } else {
        if (v > DEG2SHORT_ANGLE(-90)) {
            v = DEG2SHORT_ANGLE(-90) + DEG2SHORT_ANGLE(45 * fqrand());
        } else {
            v = DEG2SHORT_ANGLE(-90) - DEG2SHORT_ANGLE(45 * fqrand());
        }
    }
    return v;
}

void mfish_dummy_process_init(MUSEUM_FISH_PRIVATE_DATA* prv) {
    prv->_634 = mfish_get_hide_camera_angle(prv);
    if (prv->_630 == 2 && prv->_60C.z < 0 && prv->_634 > 0) {
        prv->_5F0 = MAX(prv->init_data._10, GETREG(TAKREG, 80) * 0.1f + 1.2f);
    }
    prv->_34 = mfish_dummy_process;
}

void mfish_dummy_process(MUSEUM_FISH_PRIVATE_DATA* actor) {
    // no clue what's going on here
    add_calc_short_angle2(&actor->_612.z, actor->_634, CALC_EASE2(0.0f), DEG2SHORT_ANGLE(3.75f), 0x2d);
    actor->_622 = add_calc_short_angle2(&actor->_60C.z, actor->_612.z, CALC_EASE2(0.5f), DEG2SHORT_ANGLE(5.0f), 0x2d);
    add_calc_short_angle2(&actor->_61C, actor->_622, CALC_EASE2(0.5f), DEG2SHORT_ANGLE(5.0f), 0x2d);

    if (actor->_630 == 2) {
        if (actor->_612.z < 0) {
            actor->_626--;
        } else {
            add_calc2(&actor->_5E8, actor->_5F0, 0.1f, 0.05f);
            add_calc0(&actor->_5F0, 0.05f, 0.1f);
        }
    }
}

void mfish_normal_process_init(MUSEUM_FISH_PRIVATE_DATA* fishActor) {
    f32 ra;
    f32 t;
    f32 temp;

    ra = fqrand() * fishActor->init_data._14 + fishActor->init_data._10;
    t = (ra) / MAX(fishActor->init_data._14 + fishActor->init_data._10, 1);

    if (ra > fishActor->_5E8) {
        fishActor->_5F0 = ra;
    }

    fishActor->_5F4 = Rnd_EX_fx(10.0f) * t;

    fishActor->_612.x =
        atans_table(fishActor->_5E8, fishActor->_5F4 + fishActor->init_data._0C - fishActor->_5A0.y) >> 4;
    fishActor->_5D4 = 0;

    if (fqrand() > fishActor->init_data._1C) {
        int diff;

        fishActor->_612.z += (s16)Rnd_EX_fx(fishActor->init_data._30 * 2.0f);
        diff = fishActor->_612.z - fishActor->_60C.z;
        if (ABS((s16)diff) < DEG2SHORT_ANGLE(20)) {
            if ((s16)diff > 0) {
                fishActor->_612.z += DEG2SHORT_ANGLE(20);
            } else {
                fishActor->_612.z += DEG2SHORT_ANGLE(-20);
            }
        }

        fishActor->_632 = DEG2SHORT_ANGLE(t * 15 + 20);
    } else {
        if ((s16)(fishActor->_612.z - fishActor->_60C.z) > 0) {
            fishActor->_612.z += DEG2SHORT_ANGLE(15);
        } else {
            fishActor->_612.z += DEG2SHORT_ANGLE(-15);
        }

        fishActor->_632 = DEG2SHORT_ANGLE((GETREG(TAKREG, 42) + 40.0f) * t + 30);
    }
    if ((s16)(fishActor->_612.z - fishActor->_60C.z) > 0) {
        fishActor->_636 = DEG2SHORT_ANGLE(0);
    } else {
        fishActor->_636 = DEG2SHORT_ANGLE(-180);
    }

    fishActor->_62E &= ~0xC0;
    fishActor->_34 = mfish_normal_process;
}

void mfish_normal_process(MUSEUM_FISH_PRIVATE_DATA* actor) {
    if (actor->_632 > DEG2SHORT_ANGLE(20)) {
        add_calc(&actor->_5E8, actor->_5F0, CALC_EASE(0.2f),
                 (((actor->_632 - DEG2SHORT_ANGLE(20)) / DEG2SHORT_ANGLE(2)) * 0.04f + 0.1f) * 0.5f, 0.05f);
    } else if (actor->_626 > actor->_628 - 10) {
        add_calc(&actor->_5E8, actor->_5F0, CALC_EASE(0.5f), 0.75f, 0.05f);
    }
    add_calc_short_angle2(&actor->_632, 0, CALC_EASE2(0.5f), DEG2SHORT_ANGLE(1.25f), DEG2SHORT_ANGLE(0.25f));
    actor->_636 += DEG2SHORT_ANGLE(10.0f);
    actor->_622 = add_calc_short_angle2(&actor->_60C.z, actor->_612.z + (s16)(actor->_632 * sin_s(actor->_636)),
                                        CALC_EASE2(0.5f), DEG2SHORT_ANGLE(6.25f), 45);
    add_calc_short_angle2(&actor->_61C, actor->_622, CALC_EASE2(0.5f), DEG2SHORT_ANGLE(3.75f), 45);

    if (actor->_5E8 < 0.01f || actor->_630 == 2 && actor->_5E8 < 0.05f) {
        mfish_dummy_process_init(actor);
    } else if (actor->_5E8 > 1.0f && actor->_62E & 0x1e) {
        if ((s16)(actor->_60C.z - actor->_62C) > 0) {
            actor->_612.z = actor->_62C + DEG2SHORT_ANGLE(112.5f);
        } else {
            actor->_612.z = actor->_62C - DEG2SHORT_ANGLE(112.5f);
        }
        actor->_632 = 0;
    }
}

void mfish_turn_process_init() {
    return;
}

void mfish_turn_process() {
    return;
}

void mfish_peck_process_init() {
    return;
}

void mfish_peck_process() {
    return;
}

void mfish_ground_peck_process_init() {
    return;
}

void mfish_ground_peck_process() {
    return;
}

void mfish_base_ct(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    GAME_PLAY* game = (GAME_PLAY*)gamex;
    return;
}

void mfish_base_mv(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    GAME_PLAY* game = (GAME_PLAY*)gamex;
    return;
}

void mfish_onefish_ct(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    GAME_PLAY* game = (GAME_PLAY*)gamex;
    YET_SKELETON* huh = &actor->_38;
    // looks like it loads from 0x38, which i labeled as the skeleton,
    // but then it adds like 0x514 to it, so this must be huge

    // cKF_SkeletonInfo_R_ct(&huh->_00, huh->_00); //TODO
    return;
}

void mfish_onefish_mv(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    GAME_PLAY* game = (GAME_PLAY*)gamex;
    cKF_SkeletonInfo_R_play(&actor->_38._00);
    return;
}

int mfish_before_disp(GAME* game, cKF_SkeletonInfo_R_c* keyframe, int joint_num, Gfx** joint_m, u8* joint_f, void* arg,
                      s_xyz* joint1, xyz_t* trans) {

    MUSEUM_FISH_PRIVATE_DATA* actor = (MUSEUM_FISH_PRIVATE_DATA*)arg;
    if (joint_num == 2) {
        int v, t;

        if (actor->_630 != 4) {
            v = 2;
        } else if (actor->init_data._20 > 0.7f) {
            v = 1;
        } else if (actor->init_data._20 > 0.5f) {
            v = 2;
        } else {
            v = 3;
        }

        t = joint1->y - (actor->_61C * v);
        joint1->y = MY_CLAMP(t, DEG2SHORT_ANGLE(-60), DEG2SHORT_ANGLE(60));
        t = joint1->x - (actor->_61C >> 1);
        joint1->x = MY_CLAMP(t, DEG2SHORT_ANGLE(-25), DEG2SHORT_ANGLE(25));
    }
    return 1;
}

void mfish_onefish_dw(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {

    YET_SKELETON* skele;
    Mtx* mtx;
    GAME_PLAY* play;
    GRAPH* graph;

    play = (GAME_PLAY*)gamex;
    skele = &actor->_38;

    if (play->game.frame_counter % 2 != 0) {
        mtx = &skele->_70;
    } else {
        mtx = &skele->_2b0;
    }

    graph = play->game.graph;

    Matrix_translate(actor->_5A0.x, actor->_5A0.y + actor->_5AC.y, actor->_5A0.z, 0);
    Matrix_RotateY(actor->_60C.z, 1);

    Matrix_translate(0.0f, 0.25f * actor->init_data._04, 0.5f * actor->init_data._24, 1);
    Matrix_RotateX(actor->_60C.x, 1);
    Matrix_RotateZ(MY_CLAMP(-(actor->_61C >> 1), DEG2SHORT_ANGLE(-20), DEG2SHORT_ANGLE(20)), 1);
    Matrix_translate(0.0f, 0.25f * -actor->init_data._04, 0.5f * -actor->init_data._24, 1);
    Matrix_scale(actor->init_data._00, actor->init_data._00, actor->init_data._00, 1);

    OPEN_DISP(graph);
    gSPMatrix(NEXT_POLY_OPA_DISP, _Matrix_to_Mtx_new(play->game.graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    CLOSE_DISP(graph);

    cKF_Si3_draw_R_SV(&play->game, &skele->_00, mtx, &mfish_before_disp, 0, actor);
}

void mfish_ani_base_ct(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    GAME_PLAY* game = (GAME_PLAY*)gamex;
    return;
}

void mfish_ani_base_mv(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    GAME_PLAY* game = (GAME_PLAY*)gamex;
    return;
}

void mfish_ani_base_dw(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    GAME_PLAY* game = (GAME_PLAY*)gamex;
    return;
}

void Museum_Fish_BigFishObjCheck() {
    return;
}

void Museum_Fish_ObjBGCheck() {
    return;
}

void Museum_Fish_DonkoBGCheck() {
    return;
}

void Museum_Fish_objchk_pos_set() {
    return;
}

void Museum_Fish_BGCheck() {
    return;
}

void Museum_Fish_Kusa_Check() {
    static int kusa_group_tbl[14] = { 0, 2, 1, 3, 3, 4, 4, 4, 4, 4, 0, 2, 1, 3 };
}

void Museum_Fish_Object_Check() {
    return;
}

void mfish_body_wind_anime_play() {
    return;
}

void mfish_get_player_angle() {
    return;
}

void mfish_peck_check() {
    return;
}

void mfish_peck_wall_check() {
    return;
}

void mfish_ground_peck_before_check() {
    return;
}

void mfish_get_player_area() {
    return;
}

void mfish_get_flow_vec(xyz_t* pos, MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    return;
}

void mfish_get_escape_angle() {
    return;
}

void mfish_move_smooth() {
    return;
}

void mfish_hamon_make() {
    return;
}
