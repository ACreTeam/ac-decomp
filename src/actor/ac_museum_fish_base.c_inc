#include "ac_museum_fish_priv.h"

f32 Rnd_EX_f(f32 v) {
    f32 rand1 = RANDOM2_F(2);
    f32 rand2 = RANDOM_F(1);
    if (rand2 > (rand1 * rand1)) {
        if (rand1 > 0) {
            rand1 = sqrtf(rand2);
        } else {
            rand1 = -sqrtf(rand2);
        }
    }
    rand1 = (1.0f + rand1) * 0.5f;
    return v * rand1;
}

f32 Rnd_EX_fx(f32 v) {
    f32 rand1 = RANDOM2_F(2);
    f32 rand2 = RANDOM_F(1);
    if (rand2 > (rand1 * rand1)) {
        if (rand1 > 0) {
            rand1 = sqrtf(rand2);
        } else {
            rand1 = -sqrtf(rand2);
        }
    }
    rand1 = rand1 / 2;
    return v * rand1;
}

void mfish_base_FishMove(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    f32 t;
    xyz_t pos;
    if (actor->fish_idx == aGYO_TYPE_PIRANHA && actor->currentProcess != mfish_peck_process) {
        actor->_5E8 *= actor->init_data._18;
    } else {
        add_calc0(&actor->_5E8, 1.0f - actor->init_data._18, 0.025f);
    }

    actor->_5D0.x = actor->_5E8 * sin_s(actor->_60C.y);
    actor->_5D0.z = actor->_5E8 * cos_s(actor->_60C.y);

    add_calc(&actor->_5D0.y, MAX(ABS(actor->_5E8 * sin_s(actor->_60C.x)), 0.1f), 0.1f, 0.1f, 0.005f);
    add_calc2(&actor->position.y, actor->_5F4 + actor->init_data._0C, 0.1f, actor->_5D0.y);

    mfish_move_smooth(actor, game);
    mfish_get_flow_vec(&pos, actor, game);
    actor->position.x += actor->_5D0.x + actor->_5DC.x;
    actor->position.z += actor->_5D0.z + actor->_5DC.z;
    actor->position.y = actor->position.y + actor->_5DC.y;
    actor->position.y = MAX(60, MIN(110, actor->position.y));
}

int mfish_PosWallCheck(MUSEUM_FISH_PRIVATE_DATA* priv, xyz_t* pos) {
    u32 flag = 0;
    xyz_t p = suisou_pos[priv->tank];
    f32 a, b, c, d;

    if (priv->tank < 4) {
        a = priv->init_data._28 + 45;
        b = priv->init_data._28 + 45;
        c = priv->init_data._28 + 45;
        d = priv->init_data._28 + 45;
    } else {
        a = priv->init_data._28 + 180;
        b = priv->init_data._28 + 180;
        c = priv->init_data._28 + 5;
        d = priv->init_data._28 + 45;
    }

    if (pos->x > p.x + a) {
        flag |= 4;
    } else if (pos->x < p.x - b) {
        flag |= 2;
    }

    if (pos->z > p.z + c) {
        flag |= 8;
    } else if (pos->z < p.z - d) {
        flag |= 0x10;
    }

    return flag;
}

BOOL mfish_WallCheck(MUSEUM_FISH_PRIVATE_DATA* prv) {
    xyz_t p, p1;

    p = prv->position;

    p.x += sin_s(prv->_60C.y) * (GETREG(TAKREG, 70) + 30.0f);
    p.z += cos_s(prv->_60C.y) * (GETREG(TAKREG, 70) + 30.0f);

    p1 = p;

    return mfish_PosWallCheck(prv, &p1) ? TRUE : FALSE;
}

s16 mfish_get_hide_camera_angle(MUSEUM_FISH_PRIVATE_DATA* priv) {
    s16 v = priv->_60C.y;
    if (v > 0 || (priv->tank == 2 && RANDOM_F(1) < 0.8f)) {
        if (v > DEG2SHORT_ANGLE(90)) {
            v = DEG2SHORT_ANGLE(90) + DEG2SHORT_ANGLE(RANDOM_F(45));
        } else {
            v = DEG2SHORT_ANGLE(90) - DEG2SHORT_ANGLE(RANDOM_F(45));
        }
    } else {
        if (v > DEG2SHORT_ANGLE(-90)) {
            v = DEG2SHORT_ANGLE(-90) + DEG2SHORT_ANGLE(RANDOM_F(45));
        } else {
            v = DEG2SHORT_ANGLE(-90) - DEG2SHORT_ANGLE(RANDOM_F(45));
        }
    }
    return v;
}

void mfish_dummy_process_init(MUSEUM_FISH_PRIVATE_DATA* prv) {
    prv->hide_camera_angle = mfish_get_hide_camera_angle(prv);
    if (prv->tank == 2 && prv->_60C.y < 0 && prv->hide_camera_angle > 0) {
        prv->_5F0 = MAX(prv->init_data._10, GETREG(TAKREG, 80) * 0.1f + 1.2f);
    }
    prv->currentProcess = mfish_dummy_process;
}

void mfish_dummy_process(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    add_calc_short_angle2(&actor->_612.y, actor->hide_camera_angle, CALC_EASE2(0.2f), DEG2SHORT_ANGLE(3.75f),
                          DEG2SHORT_ANGLE(0.25f));
    actor->_622 = add_calc_short_angle2(&actor->_60C.y, actor->_612.y, CALC_EASE2(0.5f), DEG2SHORT_ANGLE(5.0f),
                                        DEG2SHORT_ANGLE(0.25f));
    add_calc_short_angle2(&actor->_618.z, actor->_622, CALC_EASE2(0.5f), DEG2SHORT_ANGLE(5.0f), DEG2SHORT_ANGLE(0.25f));

    if (actor->tank == mfish_TANK_2) {
        if (actor->_612.y < 0) {
            actor->activityFrameCount--;
        } else {
            add_calc2(&actor->_5E8, actor->_5F0, 0.1f, 0.05f);
            add_calc0(&actor->_5F0, 0.05f, 0.1f);
        }
    }
}

void mfish_normal_process_init(MUSEUM_FISH_PRIVATE_DATA* fishActor) {
    f32 ra;
    f32 t;
    f32 temp;

    ra = RANDOM_F(fishActor->init_data._14) + fishActor->init_data._10;
    t = (ra) / MAX(fishActor->init_data._14 + fishActor->init_data._10, 1);

    if (ra > fishActor->_5E8) {
        fishActor->_5F0 = ra;
    }

    fishActor->_5F4 = Rnd_EX_fx(10.0f) * t;

    fishActor->_612.x =
        atans_table(fishActor->_5E8, fishActor->_5F4 + fishActor->init_data._0C - fishActor->position.y) >> 4;
    fishActor->_5D0.y = 0;

    if (RANDOM_F(1) > fishActor->init_data._1C) {
        int diff;

        fishActor->_612.y += (s16)Rnd_EX_fx(fishActor->init_data._30 * 2.0f);
        diff = fishActor->_612.y - fishActor->_60C.y;
        if (ABS((s16)diff) < DEG2SHORT_ANGLE(20)) {
            if ((s16)diff > 0) {
                fishActor->_612.y += DEG2SHORT_ANGLE(20);
            } else {
                fishActor->_612.y += DEG2SHORT_ANGLE(-20);
            }
        }

        fishActor->_632 = DEG2SHORT_ANGLE(t * 30.f + 20.0f);
    } else {
        if ((s16)(fishActor->_612.y - fishActor->_60C.y) > 0) {
            fishActor->_612.y += DEG2SHORT_ANGLE(15);
        } else {
            fishActor->_612.y += DEG2SHORT_ANGLE(-15);
        }

        fishActor->_632 = DEG2SHORT_ANGLE((GETREG(TAKREG, 42) + 40.0f) * t + 30.0f);
    }
    if ((s16)(fishActor->_60C.y - fishActor->_612.y) > 0) {
        fishActor->_636 = DEG2SHORT_ANGLE(0);
    } else {
        fishActor->_636 = DEG2SHORT_ANGLE(-180);
    }

    fishActor->_62E_flags &= ~0xC0;
    fishActor->currentProcess = mfish_normal_process;
}

void mfish_normal_process(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    if (actor->_632 > DEG2SHORT_ANGLE(20)) {
        add_calc(&actor->_5E8, actor->_5F0, CALC_EASE(0.2f),
                 (((actor->_632 - DEG2SHORT_ANGLE(20)) / DEG2SHORT_ANGLE(2)) * 0.04f + 0.1f) * 0.5f, 0.05f);
    } else if (actor->activityFrameCount > actor->savedActivityFrameCount - 10) {
        add_calc(&actor->_5E8, actor->_5F0, CALC_EASE(0.5f), 0.75f, 0.05f);
    }
    add_calc_short_angle2(&actor->_632, 0, CALC_EASE2(0.5f), DEG2SHORT_ANGLE(1.25f), DEG2SHORT_ANGLE(0.25f));
    actor->_636 += DEG2SHORT_ANGLE(10.0f);
    actor->_622 = add_calc_short_angle2(&actor->_60C.y, actor->_612.y + (s16)(actor->_632 * sin_s(actor->_636)),
                                        CALC_EASE2(0.5f), DEG2SHORT_ANGLE(6.25f), 45);
    add_calc_short_angle2(&actor->_618.z, actor->_622, CALC_EASE2(0.5f), DEG2SHORT_ANGLE(3.75f), 45);

    if (actor->_5E8 < 0.01f || actor->tank == mfish_TANK_2 && actor->_5E8 < 0.05f) {
        mfish_dummy_process_init(actor);
    } else if (actor->_5E8 > 1.0f && actor->_62E_flags & 0x1e) {
        if ((s16)(actor->_60C.y - actor->_62C) > 0) {
            actor->_612.y = actor->_62C + DEG2SHORT_ANGLE(112.5f);
        } else {
            actor->_612.y = actor->_62C - DEG2SHORT_ANGLE(112.5f);
        }
        actor->_632 = 0;
    }
}

void mfish_turn_process_init(MUSEUM_FISH_PRIVATE_DATA* actor) {
    s16 v = DEG2SHORT_ANGLE(RANDOM_F(75.0f)) + DEG2SHORT_ANGLE(45);
    actor->_618.y =
        DEG2SHORT_ANGLE(((actor->_5E8 + 0.5f) / (actor->init_data._10 + actor->init_data._14 + 0.5f)) * 7.5f + 7.5f);

    if (actor->_62E_flags & 0xC0) {
        if (actor->_62E_flags & 0x40) {
            v = ABS(v);
        } else {
            v = -ABS(v);
        }
    } else if (actor->_62E_flags & 0x1e) {
        if ((s16)(actor->_60C.y - actor->_62C) < 0) {
            v = -v;
        } else {
            v = v;
        }
    } else if (actor->_62E_flags & 0x20) {
        if ((s16)(actor->escape_angle - actor->_60C.y) < 0) {
            v = -v;
        } else {
            v = v;
        }
    }

    if (v > 0) {
        actor->_62E_flags |= 0x40;
    } else {
        actor->_62E_flags |= 0x80;
    }

    actor->_612.y += v;

    if (actor->tank == mfish_TANK_2) {
        s16 tmp = actor->_612.y + DEG2SHORT_ANGLE(90);
        if (tmp > DEG2SHORT_ANGLE(135)) {
            actor->_612.y = DEG2SHORT_ANGLE(-45);
        } else if (tmp > DEG2SHORT_ANGLE(-135)) {
            actor->_612.y = DEG2SHORT_ANGLE(-135);
        }
    }

    actor->_5F0 = actor->init_data._10 + actor->init_data._14 * 0.7f;

    if (RANDOM_F(1.0f) < 0.2f) {
        actor->_63E = RANDOM_F(3.0f) + 1.0f;
    } else {
        actor->_63E = 0;
    }
    actor->currentProcess = mfish_turn_process;
}

void mfish_turn_process(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    if (ABS(actor->_622) > DEG2SHORT_ANGLE(20)) {
        add_calc(&actor->_5E8, actor->_5F0, CALC_EASE(0.1f), (GETREG(TAKREG, 0x4e) * 0.01f + 0.5f) * 0.5f, 0.05f);
    }
    add_calc2(&actor->_5F0, MAX(actor->init_data._10, 0.0f), 0.5f, 0.2f);
    add_calc_short_angle2(&actor->_632, 0, CALC_EASE2(0.5f), DEG2SHORT_ANGLE(2.5f), DEG2SHORT_ANGLE(0.25f));
    actor->_622 = add_calc_short_angle2(&actor->_60C.y, actor->_612.y + (s16)(actor->_632 * sin_s(actor->_636)),
                                        CALC_EASE(0.2f), actor->_618.y >> 1, DEG2SHORT_ANGLE(0.25f));
    add_calc_short_angle2(&actor->_618.z, actor->_622, CALC_EASE2(0.4f), DEG2SHORT_ANGLE(3.75f),
                          DEG2SHORT_ANGLE(0.25f));

    if (ABS((s16)(actor->_60C.y - actor->_612.y)) < DEG2SHORT_ANGLE(2) && actor->_5E8 < 0.1f) {
        if (actor->_63E > 0) {
            if (mfish_WallCheck(actor)) {
                mfish_turn_process_init(actor);
            } else {
                mfish_normal_process_init(actor);
            }
            actor->_63E--;
        } else {
            mfish_dummy_process_init(actor);
        }
    }
}

void mfish_peck_process_init(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    f32 fVar8;
    f32 fVar9;
    int t;
    s16 atanx;
    s16 atany;
    f32 dist;

    actor->_5D0.y = 0.0f;
    mfish_get_player_angle(actor, game, &atanx, &atany, &dist);
    fVar9 = (actor->init_data)._14 + (actor->init_data)._10;

    if (dist < 20.0f) {
        fVar9 *= 0.75f;
        actor->_5F0 = MAX(fVar9, 0.5f);
    }

    if (fVar9 > actor->_5E8) {
        actor->_5F0 = fVar9;
    }

    fVar8 = (fVar9 / 8.0f);

    if (ABS((s16)(atanx - actor->_60C.y)) < actor->init_data._30) {
        actor->_612.y = atanx;
    } else if ((s16)(atanx - actor->_60C.y) > 0) {
        actor->_612.y = actor->_60C.y + actor->init_data._30;
    } else {
        actor->_612.y = actor->_60C.y - actor->init_data._30;
    }

    if (atany < 0) {
        actor->_5F4 = actor->_5F4 + RANDOM_F(2.5f);
        actor->_5F4 = MAX(MIN(10, actor->_5F4), -10);

    } else {
        actor->_5F4 = actor->_5F4 - RANDOM_F(2.5f);
        actor->_5F4 = MAX(MIN(10, actor->_5F4), -10);
    }

    actor->_632 = DEG2SHORT_ANGLE((fVar8 * 30.0f) + 20.0f);

    if (qrand() & 0x8000) {
        actor->_636 = DEG2SHORT_ANGLE(90);
    } else {
        actor->_636 = DEG2SHORT_ANGLE(-90);
    }

    actor->_62E_flags &= ~0xC0;
    actor->currentProcess = mfish_peck_process;
}

void mfish_peck_process(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    s16 atanx;
    s16 atany;
    f32 dist;

    mfish_get_player_angle(actor, gamex, &atanx, &atany, &dist);

    if (actor->_632 > DEG2SHORT_ANGLE(15)) {
        add_calc(&actor->_5E8, actor->_5F0, CALC_EASE(0.25f),
                 (((actor->_632 - DEG2SHORT_ANGLE(20)) / DEG2SHORT_ANGLE(2)) * 0.04f + 0.1f) * 0.5f, 0.05f);
    } else if (actor->activityFrameCount > actor->savedActivityFrameCount - 16) {
        add_calc(&actor->_5E8, actor->_5F0, CALC_EASE(0.1f), 0.5f, 0.05f);
    } else if (dist > 20) {
        add_calc2(&actor->_5E8, MAX(actor->_5E8, 0.4f), 0.25f, 0.05f);
    }

    add_calc_short_angle2(&actor->_632, 0, CALC_EASE2(0.25f), DEG2SHORT_ANGLE(0.75f), DEG2SHORT_ANGLE(0.25f));
    actor->_636 += DEG2SHORT_ANGLE(10);
    actor->_622 = add_calc_short_angle2(&actor->_60C.y, actor->_612.y + (s16)(sin_s(actor->_636) * actor->_632),
                                        CALC_EASE2(0.5f), DEG2SHORT_ANGLE(6.25f), DEG2SHORT_ANGLE(0.25f));
    add_calc_short_angle2(&actor->_618.z, actor->_622, CALC_EASE2(0.5f), DEG2SHORT_ANGLE(3.75f),
                          DEG2SHORT_ANGLE(0.25f));

    if (mfish_peck_wall_check(actor, gamex)) {
        if (RANDOM_F(1.0f) < 0.9f) {
            actor->_5E8 = -0.3f - RANDOM_F(0.3f);
            actor->activityFrameCount = 10;
        } else {
            actor->_5E8 = -0.5f;
            actor->activityFrameCount =
                actor->init_data.activeFramesMin + (s16)RANDOM_F(actor->init_data.activeFramesRange);
            actor->activityFrameCount >>= 3;
        }
        actor->savedActivityFrameCount = actor->activityFrameCount;
        actor->_5F0 = 0.0f;
    }
}

void mfish_ground_peck_process_init(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    xyz_t p = suisou_pos[actor->tank];
    xyz_t_sub(&p, &actor->position, &p);

    actor->_5F4 = ((actor->init_data._08 * 0.3f + 65.0f) - MAX(ABS(p.x), ABS(p.z)) * 0.15f) - actor->init_data._0C;
    actor->_612.x = DEG2SHORT_ANGLE(60);
    actor->activityFrameCount = (int)(Rnd_EX_f(30.0f) + 15.0f) << 1;

    if (actor->currentProcess != mfish_ground_peck_process) {
        actor->_63E = RANDOM_F(2.0f) + 3.0f;
    } else {
        actor->_63E--;
    }

    actor->_5F0 = 0.5f;
    actor->currentProcess = mfish_ground_peck_process;
}

void mfish_ground_peck_process(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    xyz_t p = suisou_pos[actor->tank];
    xyz_t_sub(&p, &actor->position, &p);
    actor->_5F4 = ((actor->init_data._08 * 0.3f + 65.0f) - (MAX(ABS(p.x), ABS(p.z)) * 0.15f)) - actor->init_data._0C;
    xyz_t_mult_v(&actor->_5DC, 0.1f);

    if (actor->position.y > actor->_5F4 + actor->init_data._0C + 4.0f) {
        if (actor->_612.x < DEG2SHORT_ANGLE(40)) {
            actor->_612.x = DEG2SHORT_ANGLE(40);
        }
        actor->activityFrameCount++;
        add_calc2(&actor->_5F0, 0.5f, 0.6f, 0.5f);
    } else if ((s16)(actor->_612.x - actor->_60C.x) > 0) {
        add_calc2(&actor->_5F0, 0.2f, 0.5f, 0.4f);
    } else {
        if (actor->_5E8 > 0) {
            actor->_5E8 = -0.2f;
        } else {
            add_calc0(&actor->_5F0, 0.2f, 0.1f);
        }
    }

    if (actor->_612.x < DEG2SHORT_ANGLE(15)) {
        actor->_612.x = DEG2SHORT_ANGLE(15);
    }

    add_calc(&actor->_5E8, actor->_5F0 * cos_s(actor->_60C.x), CALC_EASE(0.5f), 0.25f, 0.05f);

    mfish_dummy_process(actor, gamex);
}

void mfish_base_ct(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    GAME_PLAY* play = (GAME_PLAY*)gamex;
    f32 f = RANDOM_F(2.0f);
    f32 s;
    s16 q = qrand();
    actor->_5E8 = f;
    actor->_5D0.x = cos_s(q) * f;
    actor->_5D0.z = sin_s(q) * f;
    actor->_60C.y = q;
    actor->_612.y = actor->_60C.y;
    if (actor->fish_idx == aGYO_TYPE_CATFISH || actor->fish_idx == aGYO_TYPE_GIANT_CATFISH) {
        actor->_5F4 = 0.0f;
    } else if (actor->fish_idx == aGYO_TYPE_FRESHWATER_GOBY) {
        actor->_5F4 = RANDOM_F(5.0f);
    } else {
        actor->_5F4 = RANDOM2_F(10.0f);
    }
    actor->_5D0.y = 0.0;
    actor->_5AC = ZeroVec;
    actor->_638 = qrand();
    actor->_622 = actor->_60C.y;
}

void mfish_base_mv(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    GAME_PLAY* game = (GAME_PLAY*)gamex;

    if (actor->_5F8 > actor->init_data._08 * 20.0f) {
        actor->_5F8 = 0.0f;
        actor->activityFrameCount = 0;
    }

    if (actor->activityFrameCount-- <= 0) {
        actor->activityFrameCount =
            actor->init_data.activeFramesMin + (s16)RANDOM_F(actor->init_data.activeFramesRange);
        actor->savedActivityFrameCount = actor->activityFrameCount;
        if (mfish_peck_check(actor, gamex)) {
            actor->activityFrameCount >>= 2;
            actor->savedActivityFrameCount = actor->activityFrameCount;
            mfish_peck_process_init(actor, gamex);
        } else if (mfish_WallCheck(actor)) {
            mfish_turn_process_init(actor);
        } else if (mfish_ground_peck_before_check(actor, gamex)) {
            mfish_ground_peck_process_init(actor, gamex);
        } else {
            mfish_normal_process_init(actor);
        }
    } else if (actor->currentProcess == mfish_normal_process) {
        if ((actor->_62E_flags & 0x1E && ABS((s16)(actor->_62C - actor->_60C.y)) < DEG2SHORT_ANGLE(30)) ||
            (actor->_62E_flags & 0x20 &&
             ABS((s16)(actor->escape_angle + DEG2SHORT_ANGLE(180) - actor->_60C.y)) < DEG2SHORT_ANGLE(30))) {
            actor->activityFrameCount =
                actor->init_data.activeFramesMin + (s16)RANDOM_F(actor->init_data.activeFramesRange);
            actor->savedActivityFrameCount = actor->activityFrameCount;
            mfish_turn_process_init(actor);
        }
    }

    if (actor->_624 == 10) {
        actor->_5AC.y = 0;
        actor->position.y = actor->init_data._0C;
    } else if (actor->tank == mfish_TANK_2) {
        actor->_5AC.y = sin_s(actor->_638) * 0.2f;
    } else {
        actor->_5AC.y = 0;
    }

    actor->_638 += DEG2SHORT_ANGLE(10);
    actor->currentProcess(actor, gamex);

    if (ABS(actor->_618.z) > ABS(actor->_622)) {
        add_calc2(&actor->_5E8, MIN(GETREG(TAKREG, 19) * 0.1f + 0.2f, actor->_5E8), 0.2f, 0.5f);
    }

    add_calc_short_angle2(&actor->_60C.x, actor->_612.x, CALC_EASE(0.1f), DEG2SHORT_ANGLE(5), DEG2SHORT_ANGLE(0.5f));
    add_calc_short_angle2(&actor->_612.x, 0, CALC_EASE(0.1f), DEG2SHORT_ANGLE(2.5f), DEG2SHORT_ANGLE(0.5f));
    mfish_base_FishMove(actor, gamex);
}

void mfish_onefish_ct(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    GAME_PLAY* game = (GAME_PLAY*)gamex;
    mfish_keyframe_c* s = &actor->kf;
    cKF_SkeletonInfo_R_ct(&s->keyframe, s->_54C, s->_550[0], s->work, s->morph);
    cKF_SkeletonInfo_R_init_standard_repeat_speedsetandmorph(&s->keyframe, s->_550[0], NULL, 1.0f, 0.0f);
    actor->activityFrameCount = actor->init_data.activeFramesMin + (s16)RANDOM_F(actor->init_data.activeFramesRange);
    actor->savedActivityFrameCount = actor->activityFrameCount;
    actor->_60C.x = DEG2SHORT_ANGLE(0);
    actor->_60C.y = DEG2SHORT_ANGLE(-90);
    actor->_60C.z = DEG2SHORT_ANGLE(0);
    actor->_5DC = ZeroVec;
    return;
}

void mfish_onefish_mv(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    cKF_SkeletonInfo_R_play(&actor->kf.keyframe);
}

int mfish_before_disp(GAME* game, cKF_SkeletonInfo_R_c* keyframe, int joint_idx, Gfx** joint_shape, u8* joint_flags,
                      void* arg, s_xyz* joint_rot, xyz_t* joint_pos) {
    MUSEUM_FISH_PRIVATE_DATA* actor = (MUSEUM_FISH_PRIVATE_DATA*)arg;
    if (joint_idx == 2) {
        int v, t;

        if (actor->tank != mfish_TANK_4) {
            v = 2;
        } else if (actor->init_data._20 > 0.7f) {
            v = 1;
        } else if (actor->init_data._20 > 0.5f) {
            v = 2;
        } else {
            v = 3;
        }

        t = joint_rot->y - (actor->_618.z * v);
        joint_rot->y = MY_CLAMP(t, DEG2SHORT_ANGLE(-60), DEG2SHORT_ANGLE(60));
        t = joint_rot->x - (actor->_618.z >> 1);
        joint_rot->x = MY_CLAMP(t, DEG2SHORT_ANGLE(-25), DEG2SHORT_ANGLE(25));
    }
    return TRUE;
}

void mfish_onefish_dw(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    mfish_keyframe_c* skele;
    Mtx* mtx;
    GRAPH* graph;
    GAME_PLAY* play;

    play = (GAME_PLAY*)gamex;
    skele = &actor->kf;

    if (play->game.frame_counter % 2 != 0) {
        mtx = skele->mtx[0];
    } else {
        mtx = skele->mtx[1];
    }

    graph = play->game.graph;

    Matrix_translate(actor->position.x, actor->position.y + actor->_5AC.y, actor->position.z, 0);
    Matrix_RotateY(actor->_60C.y, 1);

    Matrix_translate(0.0f, 0.25f * actor->init_data.ofs_y, 1.5f * actor->init_data.ofs_z, 1);
    Matrix_RotateX(actor->_60C.x, 1);
    Matrix_RotateZ(MY_CLAMP(-(actor->_618.z >> 1), DEG2SHORT_ANGLE(-20), DEG2SHORT_ANGLE(20)), 1);
    Matrix_translate(0.0f, 0.25f * -actor->init_data.ofs_y, 0.5f * -actor->init_data.ofs_z, 1);
    Matrix_scale(actor->init_data.renderScale, actor->init_data.renderScale, actor->init_data.renderScale, 1);

    OPEN_DISP(graph);
    gSPMatrix(NEXT_POLY_OPA_DISP, _Matrix_to_Mtx_new(play->game.graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    CLOSE_DISP(graph);

    cKF_Si3_draw_R_SV(&play->game, &skele->keyframe, mtx, &mfish_before_disp, 0, actor);
}

void mfish_ani_base_ct(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    mfish_onefish_ct(actor, gamex);
    mfish_base_ct(actor, gamex);
    actor->currentProcess = mfish_normal_process;
    actor->_624 = 0;
}

void mfish_ani_base_mv(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    GAME_PLAY* play = (GAME_PLAY*)gamex;
    mfish_onefish_mv(actor, gamex);
    mfish_base_mv(actor, gamex);
    Museum_Fish_BGCheck(actor, gamex);

    if (actor->tank == mfish_TANK_2) {
        actor->kf.keyframe.frame_control.speed =
            (actor->_5E8 * 3.0f) / (actor->init_data._10 + actor->init_data._14) + 1.0f;
    } else if (actor->fish_idx == aGYO_TYPE_BITTERLING || actor->fish_idx == aGYO_TYPE_BROOK_TROUT ||
               actor->fish_idx == aGYO_TYPE_CRUCIAN_CARP) {
        if (actor->_5F0 - 0.1f > actor->_5E8 && actor->currentProcess == mfish_normal_process &&
            actor->activityFrameCount > actor->savedActivityFrameCount - 10) {
            actor->kf.keyframe.frame_control.speed =
                ((actor->_5F0 - actor->_5E8) * 3.0f) / (actor->init_data._10 + actor->init_data._14) + 1.5f;
        } else {
            add_calc2(&actor->kf.keyframe.frame_control.speed, 2.0f * actor->_5E8 + 0.5f, 0.2f, 0.1f);
        }
    } else {
        if (actor->activityFrameCount > actor->savedActivityFrameCount - 10 && actor->_5F0 > 0) {
            actor->kf.keyframe.frame_control.speed =
                (actor->_5E8 * 4.0f) / (actor->init_data._10 + actor->init_data._14) + 1.25f;
        } else {
            add_calc2(&actor->kf.keyframe.frame_control.speed, 2.0f * actor->_5E8 + 0.5f, 0.2f, 0.1f);
        }
    }

    mfish_body_wind_anime_play(actor, gamex);
}

void mfish_ani_base_dw(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    mfish_onefish_dw(actor, gamex);
}
#include "../src/actor/ac_museum_fish_afish.c_inc"
#include "../src/actor/ac_museum_fish_aroana.c_inc"
#include "../src/actor/ac_museum_fish_koi.c_inc"
#include "../src/actor/ac_museum_fish_kaseki.c_inc"
#include "../src/actor/ac_museum_fish_bass.c_inc"
#include "../src/actor/ac_museum_fish_seafish.c_inc"
#include "../src/actor/ac_museum_fish_tai.c_inc"
#include "../src/actor/ac_museum_fish_small_fish.c_inc"
#include "../src/actor/ac_museum_fish_gupi.c_inc"
#include "../src/actor/ac_museum_fish_medaka.c_inc"
#include "../src/actor/ac_museum_fish_kingyo.c_inc"
#include "../src/actor/ac_museum_fish_dojou.c_inc"
#include "../src/actor/ac_museum_fish_donko.c_inc"
#include "../src/actor/ac_museum_fish_big_fish.c_inc"
#include "../src/actor/ac_museum_fish_ito.c_inc"
#include "../src/actor/ac_museum_fish_unagi.c_inc"
#include "../src/actor/ac_museum_fish_namazu.c_inc"
#include "../src/actor/ac_museum_fish_zarigani.c_inc"
#include "../src/actor/ac_museum_fish_kurage.c_inc"
#include "../src/actor/ac_museum_fish_hasu.c_inc"

void Museum_Fish_BigFishObjCheck(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    int i;
    MUSEUM_FISH_PRIVATE_DATA* fish[2];
    f32 max[2] = { 430.0f, 530.0f };
    fish[0] = &MF_Control_Actor->prvFish[aGYO_TYPE_ARAPAIMA];
    fish[1] = &MF_Control_Actor->prvFish[aGYO_TYPE_GIANT_SNAKEHEAD];

    for (i = 0; i < 2; i++) {
        f32 v;
        xyz_t ip = fish[i]->objchk_pos;
        xyz_t op;
        f32 f27 = actor->init_data._08 * (sin_s(actor->_60C.y) * 0.3f + 0.7f) + fish[i]->init_data._08;
        f32 f26 = 10.f + (actor->init_data._08 * (0.7f + 0.3f * cos_s(actor->_60C.y)));
        f32 f25 = actor->init_data.ofs_y + fish[i]->init_data.ofs_y;
        xyz_t_sub(&actor->objchk_pos, &ip, &op);
        if (ABS(op.z) < f26 && ABS(op.y) < f25 && ABS(op.x) < f27) {
            f27 -= ABS(op.x);
            f26 -= ABS(op.z);
            f25 -= ABS(op.y);
            if (f25 < MIN(f27, f26)) {
                if (op.y < 0) {
                    actor->position.y -= MIN(f25, 0.25f);
                    fish[i]->position.y += MIN(f25, 0.05f);
                } else {
                    actor->position.y += MIN(f25, 0.25f);
                    fish[i]->position.y -= MIN(f25, 0.05f);
                }
            } else if (f26 < f27) {
                v = ABS(cos_s(actor->_60C.y) * actor->_5E8);
                if (op.z < 0) {
                    actor->position.z -= MIN(f26, MAX(0.5f, v));
                    if (fish[i]->objchk_pos.z < max[i] + 10.0f) {
                        fish[i]->position.z += MIN(f26, 0.05f);
                    }
                } else {
                    actor->position.z += MIN(f26, MAX(0.5f, v));
                    if (fish[i]->objchk_pos.z > max[i] - 10.0f) {
                        fish[i]->position.z -= MIN(f26, 0.05f);
                    }
                }
            } else {
                v = ABS(sin_s(actor->_60C.y) * actor->_5E8);
                if (op.x < 0) {
                    actor->position.x -= MIN(f27, MAX(0.5f, v));
                    fish[i]->position.x += MIN(f27, 0.05f);
                } else {
                    actor->position.x += MIN(f27, MAX(0.5f, v));
                    fish[i]->position.x -= MIN(f27, 0.05f);
                }
            }
        }
    }
}

void Museum_Fish_ObjBGCheck(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex, f32 f1, f32 f2) {
    xyz_t p = suisou_pos[actor->tank];
    f32 a, b, c, d, e;

    switch (actor->tank) {
        case mfish_TANK_0:
            e = 85.0f;
            a = -20.0f + p.x;
            b = 1000.0f + p.x;
            c = -25.0f + p.z;
            d = -1000.0f + p.z;
            break;
        case mfish_TANK_1:
            a = -5.0f + p.x;
            c = -10.0f + p.z;
            b = 1000.0f + p.x;
            d = -1000.0f + p.z;
            // needs cast, temp doesn't work
            e = 75.0f - cos_s((int)DEG2SHORT_ANGLE(180.0f * (actor->objchk_pos.x - a) / 70.0f)) * 5.0f;
            break;
        case mfish_TANK_2:
            e = 80.0f;
            a = -1000.0f + p.x;
            b = -5.0f + p.x;
            c = -20.0f + p.z;
            d = -1000.0f + p.z;
            break;
        case mfish_TANK_3:
            e = 75.0f;
            a = -20.0f + p.x;
            b = 1000.0f + p.x;
            c = -5.0f + p.z;
            d = -1000.0f + p.z;
            break;
        case mfish_TANK_4:
        default:
            return;
    }

    e -= actor->position.y;
    if (e > 0.0f) {
        f32 v1, v2;
        b -= (actor->position.x + (actor->init_data._28 * f1));
        a -= (actor->position.x - (actor->init_data._28 * f1));
        c -= (actor->position.z + (actor->init_data._28 * f2));
        d -= (actor->position.z - (actor->init_data._28 * f2));
        if (b > 0.0f && c > 0.0f && a < 0.0f && d < 0.0f) {
            if (b > -a) {
                if ((actor->_62E_flags & 2) == 0) {
                    actor->_62E_flags |= 4;
                }
                v1 = a;
            } else {
                if ((actor->_62E_flags & 4) == 0) {
                    actor->_62E_flags |= 2;
                }
                v1 = b;
            }

            if (c > -d) {
                if ((actor->_62E_flags & 8) == 0) {
                    actor->_62E_flags |= 0x10;
                }
                v2 = d;
            } else {
                if ((actor->_62E_flags & 0x10) == 0) {
                    actor->_62E_flags |= 8;
                }
                v2 = c;
            }

            if (e < MIN(ABS(v2), ABS(v1)) && actor->_624 != 10) {
                actor->position.y += e;
                if (actor->_624 == 3) {
                    actor->_612.x = DEG2SHORT_ANGLE(45);
                } else if (actor->fish_idx == aGYO_TYPE_LOACH) {
                    if (actor->_612.x > DEG2SHORT_ANGLE(30)) {
                        actor->_612.x -= DEG2SHORT_ANGLE(2);
                    } else if (actor->_612.x < DEG2SHORT_ANGLE(-30)) {
                        actor->_612.x += DEG2SHORT_ANGLE(2);
                    }
                }
            } else {
                if (ABS(v2) < ABS(v1)) {
                    actor->position.z += v2;
                } else {
                    actor->position.x += v1;
                }
            }
        }
    }
}

void Museum_Fish_DonkoBGCheck(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    f32 a, b, d, c;
    f32 f27;
    f32 f24;
    f32 f25;
    f32 f26;
    xyz_t p = suisou_pos[actor->tank];
    f32 v = (sin_s(actor->_60C.y) * 0.7f) * (ABS(cos_s(actor->_618.z)) * 0.5f + 0.5f) + 0.3f;
    f32 v2 = (cos_s(actor->_60C.y) * 0.7f) * (ABS(cos_s(actor->_618.z)) * 0.5f + 0.5f) + 0.3f;
    actor->_62E_flags &= ~0x1e;
    actor->_62C = 0;
    Museum_Fish_objchk_pos_set(actor, gamex);

    a = (+00.0f + p.x);
    b = (+45.0f + p.x);
    d = (-17.5f + p.z);
    c = (-45.0f + p.z);

    f27 = 76.0f - 6.0f * cos_s(DEG2SHORT_ANGLE2(180.0f * (actor->objchk_pos.x - p.x) / 55.0f));
    f26 = 76.0f - 6.0f * cos_s(DEG2SHORT_ANGLE2((actor->objchk_pos.x + sin_s(actor->_60C.y) - p.x) * 180.0f / 55.0f));

    a -= (actor->position.x + actor->init_data._28 * v);
    b -= (actor->position.x - actor->init_data._28 * v);
    c -= (actor->position.z + actor->init_data._28 * v2);
    d -= (actor->position.z - actor->init_data._28 * v2);

    actor->_5FC = -a;
    actor->_600 = b;
    actor->_604 = -c;
    actor->_608 = d;

    f27 -= actor->position.y;
    f26 -= actor->position.y;
    if (a > 0.0f) {
        actor->_5FC = 0.0f;
        actor->position.x += a;
        actor->_62E_flags |= 2;
    } else if (b < 0.0f) {
        actor->_600 = 0.0f;
        actor->position.x += b;
        actor->_62E_flags |= 4;
    }

    if (c > 0.0f) {
        actor->_604 = 0.0f;
        actor->position.z += c;
        actor->_62E_flags |= 0x8;
    } else if (d < 0.0f) {
        actor->_608 = 0.0f;
        actor->position.z += d;
        actor->_62E_flags |= 0x10;
    }

    if (actor->_62E_flags & 2) {
        actor->_62C = DEG2SHORT_ANGLE(-90);
    } else if (actor->_62E_flags & 4) {
        actor->_62C = DEG2SHORT_ANGLE(90);
    }

    if (actor->_62E_flags & 8) {
        if (actor->_62E_flags & 6) {
            actor->_62C = DEG2SHORT_ANGLE(180) - (actor->_62C >> 1);
        } else {
            actor->_62C = DEG2SHORT_ANGLE(-180);
        }
    } else if (actor->_62E_flags & 0x10) {
        if (actor->_62E_flags & 6) {
            actor->_62C = (actor->_62C >> 1);
        } else {
            actor->_62C = 0;
        }
    }

    f25 = MIN(MIN(actor->_608, actor->_604), MIN(actor->_600, actor->_5FC));
    if (f25 < 5.0f) {
        f27 -= 0.5f * (5.0f - f25);
    }

    f25 = MIN(MIN(actor->_608 - cos_s(actor->_60C.y), actor->_604 + cos_s(actor->_60C.y)),
              MIN(actor->_600 - sin_s(actor->_60C.y), actor->_5FC + sin_s(actor->_60C.y)));
    if (f25 < 5.0f) {
        f26 -= 0.5f * (5.0f - f25);
    }
    f26 -= f27;
    actor->_612.x = atans_table(1.0f, -f26);
    if (f27 > 0.0f) {
        actor->position.y += f27;
        actor->_5D0.y *= 0.95f;
    }
}

void Museum_Fish_objchk_pos_set(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    actor->objchk_pos = actor->position;
    actor->objchk_pos.x += (actor->init_data.ofs_z * sin_s(actor->_60C.y));
    actor->objchk_pos.z += (actor->init_data.ofs_z * cos_s(actor->_60C.y));
}

static void Museum_Fish_old_chk_pos_set(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    // UNUSED/STRIPPED
}

void Museum_Fish_BGCheck(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    xyz_t p = suisou_pos[actor->tank];
    f32 f29, f30, f28, f27, f31, f26, f25;
    s32 r31 = 0;

    if ((actor->_624 == 0 || actor->_624 == 0xb || actor->_624 == 0x1 || actor->_624 == 0x2) &&
        actor->init_data._28 < 0) {
        f26 = GETREG(TAKREG, 0x52) * 0.01f + 0.3f +
              (0.7f - GETREG(TAKREG, 0x52) * 0.01f) * ABS(sin_s(actor->_60C.y)) *
                  (ABS(cos_s(actor->_618.z)) * 0.5f + 0.5f);
        f25 = GETREG(TAKREG, 0x52) * 0.01f + 0.3f +
              (0.7f - GETREG(TAKREG, 0x52) * 0.01f) * ABS(cos_s(actor->_60C.y)) *
                  (ABS(cos_s(actor->_618.z)) * 0.5f + 0.5f);
    } else if (actor->_624 == 10 || actor->_624 == 7 || actor->_624 == 9) {
        f26 = GETREG(TAKREG, 0x52) * 0.01f + 0.6f +
              (0.4f - GETREG(TAKREG, 0x52) * 0.01f) * ABS(sin_s(actor->_60C.y)) *
                  (ABS(cos_s(actor->_618.z)) * 0.4f + 0.6f);
        f25 = GETREG(TAKREG, 0x52) * 0.01f + 0.6f +
              (0.4f - GETREG(TAKREG, 0x52) * 0.01f) * ABS(cos_s(actor->_60C.y)) *
                  (ABS(cos_s(actor->_618.z)) * 0.4f + 0.6f);
    } else {
        f26 = 1.0f;
        f25 = 1.0f;
    }

    if (actor->tank < mfish_TANK_4) {
        f30 = 54.0f + actor->init_data._28 * f26;
        f29 = 54.0f + actor->init_data._28 * f26;
        f28 = 54.0f + actor->init_data._28 * f25;
        f27 = 54.0f + actor->init_data._28 * f25;
    } else {
        f30 = actor->init_data._28 * f26 + 189.0f;
        f29 = actor->init_data._28 * f26 + 189.0f;
        f28 = actor->init_data._28 * f25 + 14.0f;
        f27 = actor->init_data._28 * f25 + 25.0f;
        f31 = actor->objchk_pos.x - p.x;
        f27 += cos_s(f31 * 32768.0f / 180.0f) * 9.0f;
        f27 += 21.0f;
        r31 = DEG2SHORT_ANGLE(sin_s(f31 * 32768.0f / 180.0f) * -10.0f);
    }

    actor->_62E_flags &= ~0x1e;
    actor->_62C = 0;
    Museum_Fish_objchk_pos_set(actor, game);

    if (actor->objchk_pos.x > (p.x + f30)) {
        actor->position.x += (p.x + f30) - actor->objchk_pos.x;
        actor->_62E_flags |= 0x4;
    } else if (actor->objchk_pos.x < p.x - f29) {
        actor->position.x += (p.x - f29) - actor->objchk_pos.x;
        actor->_62E_flags |= 0x2;
    }

    if (actor->objchk_pos.z > (p.z + f28)) {
        actor->position.z += (p.z + f28) - actor->objchk_pos.z;
        actor->_62E_flags |= 0x10;
    } else if (actor->objchk_pos.z < (p.z - f27)) {
        actor->position.z += (p.z - f27) - actor->objchk_pos.z;
        actor->_62E_flags |= 0x8;
    }

    Museum_Fish_objchk_pos_set(actor, game);
    actor->_5FC = actor->objchk_pos.x - (p.x - f29);
    actor->_600 = (p.x + f30) - actor->objchk_pos.x;
    actor->_604 = actor->objchk_pos.z - (p.z - f27);
    actor->_608 = (p.z + f28) - actor->objchk_pos.z;

    if (actor->tank < mfish_TANK_4 && actor->fish_idx != aGYO_TYPE_EEL) {
        Museum_Fish_ObjBGCheck(actor, game, f26, f25);
    }

    if (actor->_62E_flags & 2) {
        actor->_62C = DEG2SHORT_ANGLE(-90);
    } else if (actor->_62E_flags & 4) {
        actor->_62C = DEG2SHORT_ANGLE(90);
    }

    if (actor->_62E_flags & 8) {
        if (actor->_62E_flags & 6) {
            actor->_62C = (DEG2SHORT_ANGLE(180) - (actor->_62C >> 1) + ((s16)r31 >> 1));
        } else {
            actor->_62C = r31 + DEG2SHORT_ANGLE(180);
        }
    } else if (actor->_62E_flags & 0x10) {
        if (actor->_62E_flags & 6) {
            actor->_62C >>= 1;
        } else {
            actor->_62C = DEG2SHORT_ANGLE(0);
        }
    }
}

void Museum_Fish_Kusa_Check(MUSEUM_FISH_ACTOR* actor, GAME* game) {
    static int kusa_group_tbl[14] = {
        mfish_TANK_0,
        mfish_TANK_2,
        mfish_TANK_1,
        mfish_TANK_3,
        mfish_TANK_3,
        mfish_TANK_4,
        mfish_TANK_4,
        mfish_TANK_4,
        mfish_TANK_4,
        mfish_TANK_4,
        mfish_TANK_0,
        mfish_TANK_2,
        mfish_TANK_1,
        mfish_TANK_3,
};
    MUSEUM_FISH_KUSA_DATA* k;
    MUSEUM_FISH_PRIVATE_DATA* f = actor->prvFish;
    int i;
    int j;
    f32 sq;
    f32 f30 = 0.0f;
    f32 f29 = 0.0f;
    f32 f28 = 0.0f;

    for (i = 0; i < aGYO_TYPE_NUM; i++, f++) {
        f->_62E_flags &= ~0x100;

        // this if statement salso works as a continue statement
        if (f->fish_idx != aGYO_TYPE_EEL && f->fish_idx != aGYO_TYPE_COELACANTH &&
            f->fish_idx != aGYO_TYPE_FROG) {

            for (j = 0; j < 14; j++) {
                f32 f1 = (j < 5) ? 90.0f : (j < 10) ? 115.0f : 80.0f;

                if (kusa_group_tbl[j] == f->tank && f->objchk_pos.y < f1) {
                    f32 z;
                    f32 x;
                    f32 d;
                    f32 dSQ;
                    f32 dx;
                    f32 dy;

                    if (kusa_group_tbl[j] == mfish_TANK_4) {
                        if (f->fish_idx == aGYO_TYPE_COELACANTH) {
                            d = 5.0f + f->init_data._08;
                        } else {
                            d = 10.0f + f->init_data._08;
                        }
                        dSQ = d * d;
                    } else {
                        d = 5.0f + f->init_data._08;
                        dSQ = d * d;
                    }

                    x = f->objchk_pos.x - (kusa_pos[j].x + actor->prvKusa[j]._540.x);
                    z = f->objchk_pos.z - (kusa_pos[j].z + actor->prvKusa[j]._540.z);

                    sq = SQ(x) + SQ(z);
                    if (sq < dSQ) {
                        f32 t;
                        s16 v = atans_table(z, x);

                        d -= sqrtf(sq);
                        d *= 0.1f;
                        f30 += sin_s(v) * d;
                        if (kusa_group_tbl[j] == mfish_TANK_4) {
                            f29 += MAX(cos_s(v), 0.2f) * d;
                        } else {
                            f29 += cos_s(v) * d;
                        }

                        f28 += 1;

                        actor->prvKusa[j]._540.x -= (f->init_data._20 * 1.5f) * d * sin_s(v);

                        if (kusa_group_tbl[j] == mfish_TANK_4) {
                            actor->prvKusa[j]._540.z -= (f->init_data._20 * 1.5f) * d * MAX(cos_s(v), 0.1f);
                        } else {
                            actor->prvKusa[j]._540.z -= (f->init_data._20 * 1.5f) * d * cos_s(v);
                        }
                        t = SQ(actor->prvKusa[j]._540.x) + SQ(actor->prvKusa[j]._540.z);
                        t = sqrtf(t);
                        if (t > 4.0f) {
                            xyz_t_mult_v(&actor->prvKusa[j]._540, 4.0f / t);
                        }
                        actor->prvKusa[j]._538.y = DEG2SHORT_ANGLE(3.5f);
                    }
                }
            }
            if (f28 > 0.0f) {
                f->_62E_flags |= 0x100;
                f->position.x += (f30 / f28);
                f->position.z += (f29 / f28);
            }
            f28 = 0.0f;
            f29 = 0.0f;
            f30 = 0.0f;
        }
    }
}

void Museum_Fish_Object_Check(MUSEUM_FISH_ACTOR* actor, GAME* game) {
    int i;
    MUSEUM_FISH_PRIVATE_DATA* fj;
    MUSEUM_FISH_PRIVATE_DATA* f;
    int j;
    f32 f31;
    f32 f30;
    f32 f29;
    xyz_t test;
    f32 f28 = 0.0f;
    f32 f27 = 0.0f;
    f32 f26 = 0.0f;
    f32 f25 = 0.0f;
    f32 f24 = 0.0f;
    f32 f23 = FLT_MAX;
    f32 f22;
    f32 sq_xz;
    f32 sq_xzy;

    fj = f = actor->prvFish;

    for (i = 0; i < aGYO_TYPE_NUM; i++, f++) {
        f->_62E_flags &= ~0x20;
    }

    f = actor->prvFish;
    for (i = 0; i < aGYO_TYPE_NUM; i++, f++) {
        if (
            // clang-format off
            i != aGYO_TYPE_FROG &&
            i != aGYO_TYPE_CRAWFISH &&
            i != aGYO_TYPE_EEL &&
            i != aGYO_TYPE_ARAPAIMA &&
            i != aGYO_TYPE_GIANT_SNAKEHEAD &&
            f->_62E_flags & 1
            // clang-format on
        ) {
            for (j = 0; j < aGYO_TYPE_NUM; j++, fj++) {
                if (
                    // clang-format off
                    f->tank == fj->tank &&
                    i != j &&
                    j != aGYO_TYPE_FROG &&
                    j != aGYO_TYPE_EEL &&
                    j != aGYO_TYPE_ARAPAIMA &&
                    j != aGYO_TYPE_GIANT_SNAKEHEAD &&
                    (fj->_62E_flags & 1) != 0
                    // clang-format on
                ) {

                    test.x = f->objchk_pos.x - fj->objchk_pos.x;
                    test.y = f->objchk_pos.y - fj->objchk_pos.y;
                    test.z = f->objchk_pos.z - fj->objchk_pos.z;
                    sq_xz = SQ(test.x) + SQ(test.z);
                    sq_xzy = sq_xz + SQ(test.y);
                    if (sqrtf(sq_xzy) < f23) {
                        f23 = sqrtf(sq_xzy);
                        f->_598 = fj;
                    }

                    if (ABS(test.y) < (f->init_data.ofs_y + fj->init_data.ofs_y)) {
                        f32 additive = f->init_data._08 + fj->init_data._08;

                        if (sq_xz < SQ(additive)) {
                            f22 = additive - sqrtf(SQ(test.x) + SQ(test.z));

                            //! BUG: multiplying by zero?
                            if (test.y > atans_table(sqrtf(SQ(test.x) + SQ(test.z)), test.y) * 0.0f) {
                                test.y = -test.y + (f->init_data.ofs_y + fj->init_data.ofs_y);
                            } else {
                                test.y = -test.y - (f->init_data.ofs_y + fj->init_data.ofs_y);
                            }

                            test.y *= 0.2f + (GETREG(TAKREG, 0x11)) * 0.0001f;
                            f22 *= 0.2f + (GETREG(TAKREG, 0x12)) * 0.0001f;
                            f->escape_angle = atans_table(test.z, test.x);
                            f->_62E_flags |= 0x20;
                            fj->escape_angle = f->escape_angle + DEG2SHORT_ANGLE(180);
                            f->_62E_flags |= 0x20;
                            f->_594 = fj;
                            if ((fj->_62E_flags & 0x1e) == 0 || ABS((s16)(fj->_62C - f->escape_angle)) >= DEG2SHORT_ANGLE(90)) {
                                f32 v = (fj->init_data._20 / (f->init_data._20 + fj->init_data._20));
                                v *= (1.0f - f->init_data._20);
                                f22 *= v;
                                test.y *= v;
                            } else {
                                f32 v = (2.0f * fj->init_data._20 / (f->init_data._20 + 2.0f * fj->init_data._20));
                                v *= (1.0f - f->init_data._20);
                                f22 *= v;
                                test.y *= v;
                            }

                            if (f22 < ABS(test.y) || f->_624 == 0xa || f->fish_idx == aGYO_TYPE_COELACANTH) {
                                f28 += sin_s(f->escape_angle) * f22;
                                f27 += cos_s(f->escape_angle) * f22;
                                f25 += 1.0f;
                            } else {
                                f26 += test.y;
                                f24 += 1;
                            }

                            if (fj->init_data._20 > f->init_data._20 && f->_5F8 <= f->init_data._08 * 10.0f) {
                                f->_5F8 += f22;
                            }
                        }
                    }
                }
            }

            if (f25 > 0.0f) {
                f->position.x += f28 / f25;
                f->position.z += f27 / f25;
            }

            if (f24 > 0) {
                f->position.y += MAX(MIN(f26 / f24, 0.5f), -0.5f);

                if (f->_624 == 0 || f->_624 == 0xb) {
                    f->_5F4 += f26 / f24;
                }
            }

            if (f24 > 0 && f25 > 0) {
                xyz_t r;
                xyz_t_sub(&f->_594->position, &f->position, &r);
                f->escape_angle = atans_table(r.z, r.x);
            }

            f25 = 0.0f;
            f24 = 0.0f;
            f27 = 0.0f;
            f28 = 0.0f;
            f26 = 0.0f;
            f23 = FLT_MAX;
            fj = actor->prvFish;
        }
        if (f->tank == 3 && f->_624 != 7) {
            Museum_Fish_BigFishObjCheck(f, game);
        }
    }
}

void mfish_body_wind_anime_play(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    int a;
    // needs int temp to generate extsh
    a = DEG2SHORT_ANGLE(GETREG(TAKREG, 0x32) * 0.1f + 1.5f + RANDOM_F(1.0f));
    actor->_63A += a;
    a = DEG2SHORT_ANGLE(GETREG(TAKREG, 0x31) * 0.1f + 0.5f + RANDOM_F(0.5f));
    actor->_63C += a;
}

void mfish_get_player_angle(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game, s16* atanx, s16* atany, f32* distance) {
    xyz_t p = GET_PLAYER_ACTOR_GAME_ACTOR(game)->world.position;
    xyz_t p1;
    f32 v;

    p.y += 40.0f;
    xyz_t_sub(&p, &actor->position, &p1);
    v = SQ(p1.x) + SQ(p1.z);
    v = sqrtf(v);
    if (atanx) {
        *atanx = atans_table(p1.z, p1.x);
    }
    if (atany) {
        *atany = atans_table(v, -p1.y);
    }
    if (distance) {
        *distance = v;
    }
}

BOOL mfish_peck_check(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    Private_c* commonData_prv = Now_Private;

    if (MF_Control_Actor->player_area == actor->tank) {
        if (actor->fish_idx == aGYO_TYPE_PIRANHA) {
            return TRUE;
        } else if (mPr_GetPossessionItemIdx(commonData_prv, ITM_FOOD_CANDY) != -1) {
            if (actor->fish_idx == aGYO_TYPE_CARP || actor->fish_idx == aGYO_TYPE_KOI) {
                return TRUE;
            }
        } else if (mPr_GetPossessionItemIdxItem1Category(commonData_prv, ITEM1_CAT_FRUIT) != -1) {
            if (actor->fish_idx == aGYO_TYPE_GOLDFISH || actor->fish_idx == aGYO_TYPE_POPEYED_GOLDFISH) {
                return TRUE;
            }
        }
    }

    return FALSE;
}

BOOL mfish_peck_wall_check(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    s16 temp = (actor->_60C.y - actor->_62C);
    if (actor->_62E_flags & 0x1E && ABS(temp) < DEG2SHORT_ANGLE(45)) {
        xyz_t target = GET_PLAYER_ACTOR_GAME_ACTOR(gamex)->world.position;
        return search_position_distance(&actor->position, &target) < 60.0f;
    }
    return FALSE;
}

BOOL mfish_ground_peck_before_check(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    xyz_t p, p2;
    f32 v;

    p2 = p = suisou_pos[actor->tank];

    xyz_t_sub(&p2, &actor->position, &p2);

    v = MAX(ABS(p2.x), ABS(p2.z));

    if (actor->currentProcess == mfish_ground_peck_process) {
        return actor->_63E > 0;
    } else if ((actor->tank == mfish_TANK_2) && (actor->position.x < p.x + 20.0f) && (actor->position.z > p.z - 10.0f) &&
               (actor->position.y < (actor->init_data._08 * 0.5f + 75.0f) - (v * 0.15f)) && (RANDOM_F(1.0f) > 0.2f)) {
        return TRUE;
    }

    return FALSE;
}

void mfish_get_player_area(MUSEUM_FISH_ACTOR* actor, GAME* gamex) {
    ACTOR* playerx = GET_PLAYER_ACTOR_GAME_ACTOR(gamex);
    xyz_t p = playerx->world.position;

    if (actor->player_area_update_timer-- < 0) {
        actor->player_area_update_timer = 0x1e;
    } else {
        return;
    }

    if (p.z < 80.0f) {
        actor->player_area = mfish_TANK_4;
        return;
    }

    if (p.z > 120.0f && p.z < 320.0f) {
        if (p.x < 320.0f) {
            actor->player_area = mfish_TANK_0;
        } else {
            actor->player_area = mfish_TANK_1;
        }
        return;
    }

    if (p.z > 360.0f && p.z < 560.0f) {
        if (p.x < 320.0f && p.x > 120.0f) {
            actor->player_area = mfish_TANK_2;
        } else {
            actor->player_area = mfish_TANK_3;
        }
        return;
    }

    actor->player_area = -1;
}

void mfish_get_flow_vec(xyz_t* pos, MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    f32 v;
    xyz_t p2;
    xyz_t p = suisou_pos[actor->tank];
    xyz_t t;
    xyz_t p3;

    f32 xy;
    f32 s;
    s16 s2;

    f32 d;
    f32 dSQ;

    if (actor->tank == mfish_TANK_0) {
        v = 0.05f;
    } else if (actor->tank == mfish_TANK_1) {
        v = 0.06f;
    } else if (actor->tank == mfish_TANK_2) {
        v = 0.2f;
    } else if (actor->tank == mfish_TANK_3) {
        v = 0.05f;
    } else if (actor->tank == mfish_TANK_4) {
        v = 0.08f;
    }
    xyz_t_sub(&actor->position, &p, &t);
    xy = SQ(t.x) + SQ(t.z);
    s = (sin_s(DEG2SHORT_ANGLE2(360.0f * sqrtf(xy) / 720.0f)) * 0.1f + 0.2f);
    p2.x = s * cos_s(DEG2SHORT_ANGLE2(360.0f * t.x / 60.0f));
    p2.z = s * cos_s(DEG2SHORT_ANGLE2(360.0f * t.z / 60.0f));
    p2.y = (s * 0.5f) * cos_s(DEG2SHORT_ANGLE2(180.0f * t.y / 70.0f));

    s2 = atans_table(t.z, t.x);
    s2 += MF_Control_Actor->_14daa[actor->tank];

    if (actor->tank == mfish_TANK_2) {
        p2.x += (GETREG(TAKREG, 0xc) * 0.01f + 2.0f) * cos_s(s2);
        p2.z += (GETREG(TAKREG, 0xc) * 0.01f + 2.0f) * sin_s(s2);
    } else {
        p2.x += (GETREG(TAKREG, 0xc) * 0.01f + 1.5f) * cos_s(s2);
        p2.z += (GETREG(TAKREG, 0xc) * 0.01f + 1.5f) * sin_s(s2);
    }

    p2.x *= ABS(cos_s(actor->_60C.y) * cos_s(actor->_60C.x));
    p2.z *= ABS(sin_s(actor->_60C.y) * cos_s(actor->_60C.x));

    if (actor->_624 != 3) {
        p2.x *= cos_s(actor->_618.z);
        p2.z *= cos_s(actor->_618.z);
    }

    if (actor->tank == mfish_TANK_4) {
        p2.z += (GETREG(TAKREG, 0xb) * 0.01f + 0.5f) * cos_s(actor->_60C.y + DEG2SHORT_ANGLE(90));
    } else if (actor->tank == mfish_TANK_2) {
        p2.x -= ABS(cos_s(actor->_60C.y)) * 0.02f;
        if (ABS((s16)(actor->_60C.y - DEG2SHORT_ANGLE(270))) < DEG2SHORT_ANGLE(100)) {
            p2.x = MIN(-1.0f + GETREG(TAKREG, 0x48) * 0.001f, p2.x);
        }
    }

    if (actor->_598 != NULL) {
        if (actor->tank == mfish_TANK_4) {
            s = actor->_598->init_data._08 * 10.0f + actor->init_data._08 * 2.0f;
        } else {
            s = actor->_598->init_data._08 * 5.0f + actor->init_data._08 * 2.0f;
        }
        xyz_t_sub(&actor->position, &actor->_598->position, &p3);
        dSQ = SQ(p3.x) + SQ(p3.y) + SQ(p3.z);
        d = sqrtf(dSQ);

        if (d < s) {
            f32 x = (1.0f / SQ(s)) * (d - s) * (d - s);
            x *= actor->_598->init_data._20;
            p2.x += (x * p3.x) / d;
            p2.y += (x * p3.y) / d;
            p2.z += (x * p3.z) / d;
        }
    }

    if (actor->tank == mfish_TANK_2 && p2.x < 0.0f) {
        p2.x *= 1.1f;
    }

    xyz_t_mult_v(&p2, v);
    add_calc2(&actor->_5DC.x, p2.x, 0.5f, 0.1f);
    add_calc2(&actor->_5DC.y, p2.y, 0.5f, 0.1f);
    add_calc2(&actor->_5DC.z, p2.z, 0.5f, 0.1f);
    *pos = actor->_5DC;
}

s16 mfish_get_escape_angle(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    s16 v1 = atans_table(actor->_594->position.z - actor->position.z, actor->_594->position.x - actor->position.x);
    s16 v = actor->_60C.y - v1;
    if (ABS(v) < DEG2SHORT_ANGLE(90)) {
        if (actor->_624 == 1 || actor->_624 == 2) {
            if (ABS((s16)(actor->_594->_60C.y - actor->_60C.y)) > DEG2SHORT_ANGLE(90)) {
                add_calc2(&actor->_5F0, actor->init_data._14 + actor->init_data._10, 0.1f, 0.3f);
            } else {
                add_calc2(&actor->_5F0, actor->init_data._10, 0.05f, 0.3f);
            }
        } else if (actor->_624 == 6) {
            if (actor->_5E8 > 0.0f) {
                add_calc2(&actor->_5E8, actor->init_data._14 + actor->init_data._10, 0.25f, 0.1f);
            } else {
                actor->_5E8 *= 0.95f;
            }
        }

        if (v > 0) {
            v1 += DEG2SHORT_ANGLE(90);
        } else {
            v1 -= DEG2SHORT_ANGLE(90);
        }

        return v1;
    } else {
        return actor->escape_angle;
    }
}

void mfish_move_smooth(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    s16 vv;
    s16 v = 0;
    s16* o;
    if (actor->_608 < 20.0f || actor->_600 < 20.0f || actor->_604 < 20.0f || actor->_5FC < 20.0f) {
        if (actor->_600 < 20.0f) {
            v = DEG2SHORT_ANGLE(90);
        } else if (actor->_5FC < 20.0f) {
            v = DEG2SHORT_ANGLE(-90);
        }

        if (actor->_608 < 20.0f) {
            if (v == 0) {
                v = 0;
            } else {
                v >>= 1;
            }
        } else if (actor->_604 < 20.0f) {
            if (v == 0) {
                v = DEG2SHORT_ANGLE(-180);
            } else {
                v = DEG2SHORT_ANGLE(180) - (v >> 1);
            }
        }

        if ((actor->_5E8 > 0.0f || actor->_608 < 5.0f || actor->_604 < 5.0f || actor->_600 < 5.0f ||
             actor->_5FC < 5.0f) &&
            (actor->currentProcess != mfish_peck_process && actor->currentProcess != mfish_koi_peck_process)) {
            vv = actor->_60C.y - (s16)v;
            if (ABS(vv) < DEG2SHORT_ANGLE(45)) {
                add_calc0(&actor->_5E8, 0.1f * cos_s(vv << 1), 0.02f);
            }

            if ((actor->tank == mfish_TANK_0 || actor->_624 == 10 || actor->_624 == 11 ||
                 actor->fish_idx == aGYO_TYPE_AROWANA) &&
                ABS(vv) < DEG2SHORT_ANGLE(90) && ABS(actor->_622) < DEG2SHORT_ANGLE(10)) {
                if (actor->currentProcess == mfish_afish_dummy_process) {
                    o = &actor->hide_camera_angle;
                } else {
                    o = &actor->_612.y;
                }

                if (vv > 0) {
                    add_calc_short_angle2(
                        o, (s16)v + DEG2SHORT_ANGLE(90), CALC_EASE(GETREG(TAKREG, 0x2d) * 0.01f + 0.25f),
                        DEG2SHORT_ANGLE(actor->_5E8 * ((GETREG(TAKREG, 0x2e) + 12.0f) * cos_s(vv)) + 1.5f) >> 1,
                        DEG2SHORT_ANGLE(0.5f));
                } else {
                    add_calc_short_angle2(
                        o, (s16)v - DEG2SHORT_ANGLE(90), CALC_EASE(GETREG(TAKREG, 0x2d) * 0.01f + 0.25f),
                        DEG2SHORT_ANGLE(actor->_5E8 * ((GETREG(TAKREG, 0x2e) + 5.0f) * cos_s(vv)) + 1.5f) >> 1,
                        DEG2SHORT_ANGLE(0.5f));
                }
            }
        }
    }
}

void mfish_hamon_make(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    GAME_PLAY* play = (GAME_PLAY*)game;
    if ((play->game_frame & 7) == 0 &&
        ((actor->_62E_flags & 0x1e) == 0 || ABS((s16)(actor->_62C - actor->_60C.y)) < DEG2SHORT_ANGLE(80))) {
        xyz_t p = actor->position;
        p.y = 115.0f;
        Common_Get(clip.effect_clip)
            ->effect_make_proc(eEC_EFFECT_TURI_HAMON, p, 2, DEG2SHORT_ANGLE(180) + actor->_60C.y, game, RSV_NO, 7, 0);
    }
}
