
void mfish_kaseki_ct(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    mfish_onefish_ct(actor, gamex);
    actor->_5E8 = RANDOM_F(actor->init_data._14) + actor->init_data._10;
    actor->_5F0 = actor->_5E8;
    if (RANDOM_F(1.0f) > 0.5f) {
        actor->_60C.y = DEG2SHORT_ANGLE(90);
    } else {
        actor->_60C.y = DEG2SHORT_ANGLE(-90);
    }
    actor->_612.y = actor->_60C.y;
    actor->_5D0.y = 0.0f;
    actor->_5AC = ZeroVec;
    actor->_638 = qrand();
    actor->_622 = 0;
    actor->_634 = 0;
    actor->_626 = actor->init_data._2C + (s16)RANDOM_F(actor->init_data._2E);
    actor->_624 = 1;
    actor->_594 = NULL;
    actor->_598 = NULL;
    mfish_kaseki_normal_init(actor, gamex);
    Museum_Fish_BGCheck(actor, gamex);
}

void mfish_kaseki_normal_init() {
    // NOT BAD
    return;
}

void mfish_kaseki_normal(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    s16 s = ABS(actor->_622) * (actor->init_data._30 * (GETREG(TAKREG, 0x1d) * 0.001f + 0.5f) / 32749.0f);
    s = MIN(actor->_634, MAX(s, DEG2SHORT_ANGLE2(5)));
    add_calc_short_angle2(&actor->_632, 0, CALC_EASE(0.5), DEG2SHORT_ANGLE(5), DEG2SHORT_ANGLE(0.5f));
    actor->_636 += 455;
    actor->_622 = add_calc_short_angle2(&actor->_60C.y, actor->_612.y + (s16)(actor->_632 * sin_s(actor->_636)),
                                        CALC_EASE2(GETREG(TAKREG, 0x1e) * 0.01f + 0.15f), (s16)(s >> 1) >> 1,
                                        DEG2SHORT_ANGLE(0.25f));
    add_calc_short_angle2(&actor->_618.z, actor->_622, CALC_EASE2(GETREG(TAKREG, 0x1f) * 0.01f + 0.1f),
                          (s16)(DEG2SHORT_ANGLE(GETREG(TAKREG, 0x20) * 0.1f + 4.0f) >> 1) >> 1, DEG2SHORT_ANGLE(0.25f));
    if (actor->_5FC < 10.0f - actor->init_data._28 * 0.5f) {
        if (actor->_612.y < 0) {
            s16 v;
            if (actor->_604 > actor->_608) {
                v = actor->_60C.y - DEG2SHORT_ANGLE(90);
            } else {
                v = actor->_60C.y + DEG2SHORT_ANGLE(90);
            }
            actor->_612.y = v;
        } else {
            add_calc_short_angle2(&actor->_612.y, DEG2SHORT_ANGLE(90), CALC_EASE(GETREG(TAKREG, 0x21) * 0.01f + 0.25f),
                                  DEG2SHORT_ANGLE(GETREG(TAKREG, 0x22) + 25.0f) >> 1, DEG2SHORT_ANGLE(0.5f));
        }
    } else if (actor->_600 < 10.0 - actor->init_data._28 * 0.5) {
        if (actor->_612.y > 0) {
            s16 v;
            if (actor->_604 > actor->_608) {
                v = actor->_60C.y + DEG2SHORT_ANGLE(90);
            } else {
                v = actor->_60C.y - DEG2SHORT_ANGLE(90);
            }
            actor->_612.y = v;
        } else {
            add_calc_short_angle2(&actor->_612.y, DEG2SHORT_ANGLE(-90), CALC_EASE(GETREG(TAKREG, 0x21) * 0.01f + 0.25f),
                                  DEG2SHORT_ANGLE(GETREG(TAKREG, 0x22) + 25.0f) >> 1, DEG2SHORT_ANGLE(0.5f));
        }
    } else if (actor->_62E & 0x1e) {
        mfish_kaseki_move_wall_smooth(actor, gamex);
    } else if (actor->_626 < 0) {
        f32 r = RANDOM_F(1.0f);
        actor->_612.y = actor->_60C.y;
        if ((actor->_608 - actor->_604) * cos_s(actor->_60C.y) < 0) {
            actor->_612.y += (s16)(r * actor->init_data._30);
        } else {
            actor->_612.y -= (s16)(r * actor->init_data._30);
        }
        actor->_626 = actor->init_data._2C + (s16)(RANDOM_F(actor->init_data._2E));
        actor->_5F0 = actor->init_data._10 + RANDOM_F(actor->init_data._14);
    }
}

void mfish_kaseki_move_wall_smooth(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    int n = (s16)actor->_62C;
    s16 s;
    s16 a, b;
    s16 diff;
    if (MIN(actor->_5FC, actor->_600) < 40.0f && ABS(actor->_618.z) > DEG2SHORT_ANGLE(5)) {
        return;
    }

    diff = actor->_60C.y - (s16)n;
    if (diff > 0) {
        s = ((s16)n + DEG2SHORT_ANGLE(90.0f));
    } else {
        s = ((s16)n - DEG2SHORT_ANGLE(90.0f));
    }

    a = (actor->_612.y - actor->_60C.y);
    b = s - actor->_60C.y;
    if (a * b > DEG2SHORT_ANGLE(-5)) {
        add_calc_short_angle2(&actor->_612.y, s, CALC_EASE(0.25f), DEG2SHORT_ANGLE(2.5f), DEG2SHORT_ANGLE(0));
    }
}

void mfish_kaseki_mv(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    GAME_PLAY* play = (GAME_PLAY*)game;
    f32 v;
    actor->_34(actor, game);
    add_calc2(&actor->_5A0.y, actor->init_data._0C, 0.5f, 0.1f);
    if (ABS(actor->_622) > DEG2SHORT_ANGLE(10)) {
        add_calc_short_angle2(&actor->_634, DEG2SHORT_ANGLE(20), CALC_EASE(0.25f), DEG2SHORT_ANGLE(0.25f),
                              DEG2SHORT_ANGLE(0));
    } else {
        add_calc_short_angle2(&actor->_634, DEG2SHORT_ANGLE(1), CALC_EASE(0.25f), DEG2SHORT_ANGLE(1.25f),
                              DEG2SHORT_ANGLE(0));
    }

    if (MIN(actor->_5FC, actor->_600) < 20.0f) {
        if (ABS(actor->_618.z) > ABS(actor->_622) &&
            ABS(actor->_618.z) < DEG2SHORT_ANGLE2(GETREG(TAKREG, 0x36) + 20.0f)) {
            add_calc2(&actor->_5E8, GETREG(TAKREG, 0x30) * 0.01f + 0.8f, GETREG(TAKREG, 0x31) * 0.01f + 0.25f,
                      GETREG(TAKREG, 0x32) * 0.01f + 0.1f);
        } else {
            add_calc2(&actor->_5E8, GETREG(TAKREG, 0x33) * 0.01f + 0.35f, GETREG(TAKREG, 0x34) * 0.01f + 0.05f,
                      GETREG(TAKREG, 0x35) * 0.01f + 0.05f);
        }
    } else {
        if (actor->_5E8 > actor->_5F0) {
            add_calc2(&actor->_5E8, actor->_5F0, 0.1f, 0.01f);
        } else {
            add_calc2(&actor->_5E8, actor->_5F0, 0.3f, 0.02f);
        }
    }
    v = actor->_5E8 * (1.0f - ((sin_s(actor->_63A) * 0.2f + 0.2f) * MAX(cos_s(actor->_618.z), 0.5f)));
    actor->_5D0.x = v * sin_s(actor->_60C.y);
    actor->_5D0.z = v * cos_s(actor->_60C.y);
    actor->_5A0.x += actor->_5D0.x;
    actor->_5A0.z += actor->_5D0.z;
    mfish_onefish_mv(actor, game);
    actor->_38._00.frame_control.speed = actor->_5E8 * 0.75f + 0.25f;
    mfish_body_wind_anime_play(actor, game);
    Museum_Fish_BGCheck(actor, game);
    if (actor->_5A0.y < 55.0f - actor->init_data._04) {
        actor->_5A0.y = 55.0f - actor->init_data._04;
    }
    actor->_626--;
}

BOOL mfish_kaseki_before_disp(GAME* game, cKF_SkeletonInfo_R_c* keyframe, int joint_num, Gfx** joint_m, u8* joint_f,
                              void* arg, s_xyz* joint1, xyz_t* trans) {
    MUSEUM_FISH_PRIVATE_DATA* actor = (MUSEUM_FISH_PRIVATE_DATA*)arg;
    int i;
    if (joint_num == 1) {
        i = joint1->x + (int)(actor->_618.z * (GETREG(TAKREG, 0x47) * 0.01f + 0.5f));
        joint1->x = MIN(MAX(i, DEG2SHORT_ANGLE(-10)), DEG2SHORT_ANGLE(10));
        Matrix_scale(1.0f, (GETREG(TAKREG, 0x36) * 0.001f + 0.02f) * sin_s(actor->_63A + actor->_63C) + 1.0f,
                     (GETREG(TAKREG, 0x36) * 0.001f + 0.02f) * sin_s(actor->_63A) + 1.0f, 1);
    } else if (joint_num == 2) {
        i = joint1->y - (int)(actor->_618.z * (GETREG(TAKREG, 0x46) * 0.01f + 1.25f));
        joint1->y = MIN(MAX(i, DEG2SHORT_ANGLE(-50)), DEG2SHORT_ANGLE(50));
        i = joint1->x - (int)(actor->_618.z * (GETREG(TAKREG, 0x48) * 0.01f + 0.25f));
        joint1->x = MIN(MAX(i, DEG2SHORT_ANGLE(-10)), DEG2SHORT_ANGLE(10));
        Matrix_scale(1.0f, (GETREG(TAKREG, 0x37) * 0.001f + 0.045f) * sin_s(actor->_63A + DEG2SHORT_ANGLE(270)) + 1.0f,
                     (GETREG(TAKREG, 0x37) * 0.001f + 0.045f) * sin_s(actor->_63A + DEG2SHORT_ANGLE(90)) + 1.0f, 1);
    } else if (joint_num == 3) {
        i = joint1->y - (int)(actor->_618.z * (GETREG(TAKREG, 0x47) * 0.01f + 1.25f));
        joint1->y = MIN(MAX(i, DEG2SHORT_ANGLE(-50)), DEG2SHORT_ANGLE(50));
        i = joint1->x + DEG2SHORT_ANGLE2(GETREG(TAKREG, 0x2d) * sin_s(actor->_63A));
        joint1->x = MIN(MAX(i, DEG2SHORT_ANGLE(-40)), DEG2SHORT_ANGLE(40));
    }
    return TRUE;
}

void mfish_kaseki_dw(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    YET_SKELETON* skele = &actor->_38;
    Mtx* mtxp;
    if (gamex->frame_counter & 1) {
        mtxp = &skele->_70;
    } else {
        mtxp = &skele->_2b0;
    }
    OPEN_DISP(gamex->graph);
    Matrix_translate(actor->_5A0.x, actor->_5A0.y, actor->_5A0.z, 0);
    Matrix_rotateXYZ(actor->_60C.x, actor->_60C.y, actor->_60C.z, 1);
    Matrix_translate(0.0f, 0.0f, actor->init_data._24, 1);
    Matrix_scale(actor->init_data._00, actor->init_data._00, actor->init_data._00, 1);
    gSPMatrix(NEXT_POLY_OPA_DISP, _Matrix_to_Mtx_new(gamex->graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    cKF_Si3_draw_R_SV(gamex, &skele->_00, mtxp, mfish_aroana_before_disp, NULL, actor);
    CLOSE_DISP(gamex->graph);
}
