#include "ac_museum_fish_priv.h"

void mfish_seafish_ct(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    s16 s = qrand();
    mfish_onefish_ct(actor, game);
    actor->_5E8 = actor->init_data._10 + RANDOM_F(actor->init_data._14);
    actor->_5F0 = actor->_5E8;
    actor->_60C.y = s;
    actor->_612.y = actor->_60C.y;
    actor->_5F4 = 0.0f;
    actor->_5D0.y = 0.0f;
    actor->_5AC = ZeroVec;
    actor->_638 = qrand();
    actor->_622 = 0;
    actor->activityFrameCount = actor->init_data.activeFramesMin + (s16)RANDOM_F(actor->init_data.activeFramesRange);
    actor->savedActivityFrameCount = actor->activityFrameCount;
    actor->_624 = 2;
    actor->_594 = NULL;
    actor->_598 = NULL;
    actor->_5EC = 0.08f;
    actor->_5AC.x = 15.0f;
    actor->_5AC.z = 15.0f;
    mfish_seafish_normal_init(actor, game);
}

void mfish_seafish_normal_init(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    actor->activityFrameCount = actor->init_data.activeFramesMin + (s16)RANDOM_F(actor->init_data.activeFramesRange);
    actor->savedActivityFrameCount = actor->activityFrameCount;
    actor->_5F0 = actor->init_data._10 + RANDOM_F(actor->init_data._14);
    actor->_5EC = Rnd_EX_f(0.15f) + 0.15f;
    actor->currentProcess = mfish_seafish_normal;
}

void mfish_seafish_normal(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    f32 a = MAX(actor->_5E8 / (actor->init_data._14 + actor->init_data._10), 0.4f) * 5461.0f;
    s16 s = (s16)MY_MAX((s16)(int)a, DEG2SHORT_ANGLE(20));
    f32 o_5a0_z;
    f32 o_5a0_y;
    f32 sum_i_8;
    f32 abs_diff_sum;
    f32 t;
    f32 r;

    actor->_622 = add_calc_short_angle2(&actor->_60C.y, actor->_612.y, CALC_EASE2(0.5f), (s16)(s >> 1) >> 1,
                                        (s16)DEG2SHORT_ANGLE(0.25f));
    add_calc_short_angle2(&actor->_618.z, actor->_622, CALC_EASE2(0.3f), DEG2SHORT_ANGLE(2.5f), DEG2SHORT_ANGLE(0.25f));
    if (actor->_598 != NULL) {
        o_5a0_z = actor->_598->position.z;
        o_5a0_y = actor->_598->position.y;
        sum_i_8 = (actor->_598->init_data._08 + actor->init_data._08);
        abs_diff_sum = MAX(sum_i_8 - ABS(actor->_598->position.z - actor->position.z), 0.f);

        abs_diff_sum /= sum_i_8;

        if (actor->_598->fish_idx != aGYO_TYPE_JELLYFISH) {
            f32 this_5a0_y = actor->position.y;
            if (o_5a0_y < actor->position.y) {
                t = o_5a0_y + (actor->_598->init_data.ofs_y + actor->init_data.ofs_y);
                if (this_5a0_y < t) {
                    add_calc2(&actor->position.y, t + 2.0f, 0.2f, abs_diff_sum * 0.1f);
                }
            } else {
                t = o_5a0_y - (actor->_598->init_data.ofs_y + actor->init_data.ofs_y);
                if (this_5a0_y > t) {
                    add_calc2(&actor->position.y, t - 2.0f, 0.2f, abs_diff_sum * 0.1f);
                }
            }
        }

        if (actor->_598->position.z < actor->position.z) {
            o_5a0_z += sum_i_8;
            add_calc2(&actor->position.z, o_5a0_z, 0.1f, abs_diff_sum * 0.1f);
        } else {
            o_5a0_z -= sum_i_8;
            add_calc2(&actor->position.z, o_5a0_z, 0.1f, abs_diff_sum * 0.1f);
        }
    }

    if (actor->_5FC < actor->_5AC.x - 0.5f * actor->init_data._28) {
        if (actor->_612.y < 0) {
            s16 ss;
            if (actor->_604 > actor->_608) {
                ss = actor->_60C.y - DEG2SHORT_ANGLE(90);
            } else {
                ss = actor->_60C.y + DEG2SHORT_ANGLE(90);
            }
            actor->_612.y = ss;
            actor->_5AC.z = RANDOM_F(60.0f) + 15.0f;
        } else {
            add_calc_short_angle2(&actor->_612.y, DEG2SHORT_ANGLE(90), CALC_EASE(0.5f), DEG2SHORT_ANGLE(7.5f),
                                  DEG2SHORT_ANGLE(0.5f));
        }
    } else if (actor->_600 < actor->_5AC.z - 0.5f * actor->init_data._28) {
        if (actor->_612.y > 0) {
            s16 ss;
            if (actor->_604 > actor->_608) {
                ss = (s16)actor->_60C.y + DEG2SHORT_ANGLE(90);
            } else {
                ss = (s16)actor->_60C.y - DEG2SHORT_ANGLE(90);
            }
            actor->_612.y = ss;
            actor->_5AC.x = RANDOM_F(60.0f) + 15.0f;
        } else {
            add_calc_short_angle2(&actor->_612.y, DEG2SHORT_ANGLE(-90), CALC_EASE(0.5f), DEG2SHORT_ANGLE(7.5f),
                                  DEG2SHORT_ANGLE(0.5f));
        }
    } else if (actor->_62E_flags & 0x100) {
        actor->position.z += 0.05f;
        if (ABS((s16)(actor->_612.y - DEG2SHORT_ANGLE(180))) < DEG2SHORT_ANGLE(110)) {
            if (actor->_612.y > 0) {
                actor->_612.y -= DEG2SHORT_ANGLE(1.5f);
            } else {
                actor->_612.y += DEG2SHORT_ANGLE(1.5f);
            }
        }
    } else if (actor->_62E_flags & 0x1e) {
        mfish_seafish_turn_init(actor, gamex);
    } else if (actor->_62E_flags & 0x20 && actor->_5F8 > actor->init_data._08 * 0.5f) {
        if (actor->init_data._20 > actor->_594->init_data._20) {
            s16 escAngle = mfish_get_escape_angle(actor, gamex);
            add_calc_short_angle2(&actor->_612.y, escAngle, CALC_EASE(0.25f), DEG2SHORT_ANGLE(2.5f),
                                  DEG2SHORT_ANGLE(0));
        }
    } else if (actor->activityFrameCount < 0) {
        r = RANDOM_F(1.0f);
        actor->_612.y = actor->_60C.y;
        if ((actor->_608 - actor->_604) * cos_s(actor->_60C.y) < 0.0f) {
            actor->_612.y += (s16)(r * actor->init_data._30);
        } else {
            actor->_612.y -= (s16)(r * actor->init_data._30);
        }
        actor->activityFrameCount =
            actor->init_data.activeFramesMin + (s16)RANDOM_F(actor->init_data.activeFramesRange);
        actor->savedActivityFrameCount = actor->activityFrameCount;
        actor->_5F0 = actor->init_data._10 + Rnd_EX_f(actor->init_data._14);
    }
}

void mfish_seafish_turn_init(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    s16 s = (s16)actor->_62C;

    if (ABS(actor->_622) > DEG2SHORT_ANGLE(45)) {
        return;
    }
    if (ABS(actor->_612.y - actor->_62C) > DEG2SHORT_ANGLE(90)) {
        return;
    }

    if ((s16)(actor->_60C.y - s) > 0) {
        if (actor->_62E_flags & 6) {
            s = s + DEG2SHORT_ANGLE(170);
        } else {
            s = s + DEG2SHORT_ANGLE(95);
        }
    } else {
        if (actor->_62E_flags & 6) {
            s = s - DEG2SHORT_ANGLE(170);
        } else {
            s = s - DEG2SHORT_ANGLE(95);
        }
    }

    if (ABS((s16)(s - actor->_612.y)) > DEG2SHORT_ANGLE(45)) {
        actor->currentProcess = mfish_seafish_turn;
    }
    actor->_612.y = s;
}

void mfish_seafish_turn(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    actor->_622 = add_calc_short_angle2(&actor->_60C.y, actor->_612.y, CALC_EASE2(GETREG(TAKREG, 0x17) * 0.01f + 0.25f),
                                        DEG2SHORT_ANGLE(3.75f), DEG2SHORT_ANGLE(0.125f));
    add_calc_short_angle2(&actor->_618.z, actor->_622, CALC_EASE2(0.2f), DEG2SHORT_ANGLE(1.25f),
                          DEG2SHORT_ANGLE(0.25f));
    if (ABS(actor->_622) < DEG2SHORT_ANGLE(3)) {
        mfish_seafish_normal_init(actor, game);
    }
}

void mfish_seafish_mv(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    xyz_t p;
    actor->currentProcess(actor, gamex);
    actor->_618.x += DEG2SHORT_ANGLE(actor->_5E8 * RANDOM_F(3.0f));
    actor->_5F4 = sin_s(actor->_618.x) * 5.0f;
    if (actor->_62E_flags & 0x20) {
        add_calc2(&actor->position.y, actor->_5F4 + actor->init_data._0C, 0.02f, 0.05f);
    } else {
        add_calc2(&actor->position.y, actor->_5F4 + actor->init_data._0C, 0.1f, 0.1f);
    }
    add_calc0(&actor->_5F8, 0.25f, 0.05f);
    actor->_5F8 = MIN(1.0f, actor->_5F8);
    if (ABS(actor->_618.z) > DEG2SHORT_ANGLE(15) && ABS(actor->_622) - ABS(actor->_618.z) < 0) {
        add_calc2(&actor->_5E8, MAX(actor->_5F0, 0.8f), 0.5f, 0.25f);
    } else if (actor->activityFrameCount < actor->savedActivityFrameCount - 80) {
        add_calc2(&actor->_5E8, actor->_5EC, 1.0f - actor->init_data._18, 0.0025f);
    } else if (actor->_5E8 > actor->_5F0) {
        add_calc2(&actor->_5E8, actor->_5F0, 0.1f, 0.01f);
    } else {
        add_calc2(&actor->_5E8, actor->_5F0, 0.2f, 0.02f);
    }
    actor->kf.keyframe.frame_control.speed =
        (GETREG(TAKREG, 0x14) * 0.01f + 0.5f) * 0.5f + (GETREG(TAKREG, 0x15) * 0.01f + 1.2f) * actor->_5E8;
    actor->_5D0.x = actor->_5E8 * sin_s(actor->_60C.y);
    actor->_5D0.z = actor->_5E8 * cos_s(actor->_60C.y);
    mfish_get_flow_vec(&p, actor, gamex);
    actor->position.x += actor->_5D0.x + p.x;
    actor->position.z += actor->_5D0.z + p.z;
    mfish_onefish_mv(actor, gamex);
    mfish_body_wind_anime_play(actor, gamex);
    Museum_Fish_BGCheck(actor, gamex);
    if (actor->position.y < GETREG(TAKREG, 0x47) + 55.0f - actor->init_data.ofs_y) {
        actor->position.y = GETREG(TAKREG, 0x47) + 55.0f - actor->init_data.ofs_y;
    }
    actor->activityFrameCount--;
}

BOOL mfish_seafish_before_disp(GAME* game, cKF_SkeletonInfo_R_c* keyframe, int joint_idx, Gfx** joint_shape,
                               u8* joint_flags, void* arg, s_xyz* joint_rot, xyz_t* joint_pos) {
    MUSEUM_FISH_PRIVATE_DATA* actor = (MUSEUM_FISH_PRIVATE_DATA*)arg;
    if (joint_idx == 1) {
        int s = joint_rot->x + (int)(actor->_618.z * (GETREG(TAKREG, 0x37) * 0.01f + 0.5f));
        joint_rot->x = MIN(MAX(s, DEG2SHORT_ANGLE(-15)), DEG2SHORT_ANGLE(15));
        Matrix_scale(1.0f, (GETREG(TAKREG, 0x36) * 0.001f + 0.035f) * sin_s(actor->_63A + actor->_63C) + 1.0f,
                     (GETREG(TAKREG, 0x36) * 0.001f + 0.035f) * sin_s(actor->_63A) + 1.0f, MTX_MULT);
    } else if (joint_idx == 2) {
        int v = joint_rot->y - (actor->_618.z << 1);
        joint_rot->y = MIN(MAX(v, DEG2SHORT_ANGLE(-80)), DEG2SHORT_ANGLE(80));
        Matrix_scale(1.0f, sin_s(actor->_63A + DEG2SHORT_ANGLE(270)) * 0.07f + 1.0f,
                     sin_s(actor->_63A + DEG2SHORT_ANGLE(90)) * 0.07f + 1.0f, MTX_MULT);
    }
    return TRUE;
}

void mfish_seafish_dw(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    mfish_keyframe_c* skele = &actor->kf;
    Mtx* mtxp;
    if (gamex->frame_counter & 1) {
        mtxp = skele->mtx[0];
    } else {
        mtxp = skele->mtx[1];
    }
    OPEN_DISP(gamex->graph);
    Matrix_translate(actor->position.x, actor->position.y, actor->position.z, MTX_LOAD);
    Matrix_rotateXYZ(actor->_60C.x, actor->_60C.y, actor->_60C.z, MTX_MULT);
    Matrix_translate(0.0f, 0.0f, actor->init_data.ofs_z, MTX_MULT);
    Matrix_scale(actor->init_data.renderScale, actor->init_data.renderScale, actor->init_data.renderScale, MTX_MULT);
    gSPMatrix(NEXT_POLY_OPA_DISP, _Matrix_to_Mtx_new(gamex->graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    cKF_Si3_draw_R_SV(gamex, &skele->keyframe, mtxp, mfish_seafish_before_disp, NULL, actor);
    CLOSE_DISP(gamex->graph);
}
