#include "ac_museum_fish_priv.h"

void mfish_namazu_ct(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    mfish_onefish_ct(actor, gamex);
    actor->_5E8 = 0.0f;
    actor->_5D0 = ZeroVec;
    actor->_60C.y = qrand();
    actor->_612.y = actor->_60C.y;
    actor->_5F4 = 0.0f;
    actor->_5AC = ZeroVec;
    if (actor->fish_idx == aGYO_TYPE_CATFISH) {
        actor->_5AC.y = 1500.f;
    } else {
        actor->_5AC.y = 1700.f;
    }
    actor->_638 = qrand();
    actor->_622 = actor->_60C.y;
    actor->position.z += 40.0f;
    actor->_624 = 10;
    actor->_640 = 0;
    actor->_642 = 0;
    actor->_644 = 0;
    mfish_namazu_normal_process_init(actor);
}

void mfish_namazu_body_wind_anime_play(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    actor->_63A += (s16)DEG2SHORT_ANGLE2(2.0f + RANDOM_F(1.0f));
    actor->_63C += (s16)DEG2SHORT_ANGLE2(1.0f + RANDOM_F(0.5f));
}

void mfish_namazu_normal_process_init(MUSEUM_FISH_PRIVATE_DATA* actor) {
    f32 s;
    f32 p;
    f32 f;

    p = RANDOM_F(actor->init_data._14) + actor->init_data._10;
    s = MAX(actor->init_data._14 + actor->init_data._10, 1.0f);
    f = p / s;
    if (p > actor->_5E8) {
        actor->_5F0 = p;
    }
    actor->_5F4 = 0.0f;
    actor->_5D0.y = 0.0f;
    if (RANDOM_F(1.0f) > actor->init_data._1C) {
        actor->_612.y += (s16)Rnd_EX_fx(actor->init_data._30 * 2.0f);
        if (ABS((s16)(actor->_612.y - actor->_60C.y)) < DEG2SHORT_ANGLE(20)) {
            if ((s16)(actor->_612.y - actor->_60C.y) > 0) {
                actor->_612.y += DEG2SHORT_ANGLE(20);
            } else {
                actor->_612.y -= DEG2SHORT_ANGLE(20);
            }
        }
        actor->_632 = DEG2SHORT_ANGLE(30.0f + f * 40.0f);
    } else {
        if ((s16)(actor->_612.y - actor->_60C.y) > 0) {
            actor->_612.y += DEG2SHORT_ANGLE(15);
        } else {
            actor->_612.y -= DEG2SHORT_ANGLE(15);
        }
        actor->_632 = DEG2SHORT_ANGLE(40.0f + f * 50.0f);
    }

    if ((s16)(actor->_60C.y - actor->_612.y) > 0) {
        actor->_636 = DEG2SHORT_ANGLE(0);
    } else {
        actor->_636 = DEG2SHORT_ANGLE(-180);
    }

    actor->_62E_flags &= ~0xC0;
    actor->currentProcess = mfish_namazu_normal_process;
}

void mfish_namazu_normal_process(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    if (actor->_632 > DEG2SHORT_ANGLE(20)) {
        add_calc2(&actor->_5E8, actor->_5F0, CALC_EASE(0.075f),
                  (0.4f + ((DEG2SHORT_ANGLE(-20) + actor->_632) / DEG2SHORT_ANGLE(2)) * 0.02f) * 0.5f);
    }
    add_calc_short_angle2(&actor->_632, DEG2SHORT_ANGLE(0), CALC_EASE2(0.1f), DEG2SHORT_ANGLE(0.25f),
                          DEG2SHORT_ANGLE(0.125f));
    actor->_636 += DEG2SHORT_ANGLE(1.25f);
    actor->_622 = add_calc_short_angle2(&actor->_60C.y, actor->_612.y + (s16)(actor->_632 * sin_s(actor->_636)),
                                        CALC_EASE2(0.1f), DEG2SHORT_ANGLE(1.25f), DEG2SHORT_ANGLE(0.065f));
    add_calc_short_angle2(&actor->_618.z, actor->_622, CALC_EASE2(0.105f), DEG2SHORT_ANGLE(0.8125f),
                          DEG2SHORT_ANGLE(0.0625f));

    if (actor->_5E8 < 0.01f) {
        mfish_namazu_dummy_process_init(actor);
    } else if (actor->_5E8 > 1.0f && actor->_62E_flags & 0x1e) {
        if ((s16)(actor->_60C.y - actor->_62C) > 0) {
            actor->_612.y = actor->_62C + DEG2SHORT_ANGLE(112.5f);
        } else {
            actor->_612.y = actor->_62C - DEG2SHORT_ANGLE(112.5f);
        }
        actor->_632 = 0;
    }
}

void mfish_namazu_dummy_process_init(MUSEUM_FISH_PRIVATE_DATA* actor) {
    actor->hide_camera_angle = mfish_get_hide_camera_angle(actor);
    add_calc_short_angle2(&actor->hide_camera_angle, actor->_612.y, CALC_EASE(0.5f), DEG2SHORT_ANGLE(10), DEG2SHORT_ANGLE(0.5f));
    actor->currentProcess = mfish_namazu_dummy_process;
}

void mfish_namazu_dummy_process(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    if (actor->_5E8 < 0.5f) {
        add_calc_short_angle2(&actor->_612.y, actor->hide_camera_angle, CALC_EASE2(0.1f), DEG2SHORT_ANGLE(1.25f),
                              DEG2SHORT_ANGLE(0.125f));
    }
    actor->_622 = add_calc_short_angle2(&actor->_60C.y, actor->_612.y, CALC_EASE2(0.05f), DEG2SHORT_ANGLE(0.8125f),
                                        DEG2SHORT_ANGLE(0.065f));
    add_calc_short_angle2(&actor->_618.z, actor->_622, CALC_EASE2(0.055f), DEG2SHORT_ANGLE(0.5f),
                          DEG2SHORT_ANGLE(0.0625f));
}

void mfish_namazu_turn_process_init(MUSEUM_FISH_PRIVATE_DATA* actor) {
    s16 angle = DEG2SHORT_ANGLE(RANDOM_F(60.0f)) + DEG2SHORT_ANGLE(30);
    actor->_618.y = DEG2SHORT_ANGLE(0.5f + SHORT2DEG_ANGLE2(angle) / 90.f);

    if (actor->_62E_flags & 0x1e) {
        if ((s16)(actor->_60C.y - actor->_62C) < 0) {
            angle = -angle;
        }
    } else if (actor->_62E_flags & 0xc0) {
        if (actor->_62E_flags & 0x40) {
            angle = ABS(angle);
        } else {
            angle = -ABS(angle);
        }
    } else if (actor->_62E_flags & 0x20) {
        if ((s16)(actor->escape_angle - actor->_60C.y) < 0) {
            angle = -angle;
        }
    }

    if (angle > 0) {
        actor->_62E_flags |= 0x40;
    } else {
        actor->_62E_flags |= 0x80;
    }

    actor->_612.y += angle;
    actor->_5F0 = 0.06f;
    actor->currentProcess = mfish_namazu_turn_process;
}

void mfish_namazu_turn_process(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    add_calc2(&actor->_5E8, actor->_5F0, CALC_EASE(0.05f), 0.0625f);
    add_calc2(&actor->_5F0, 0.05f, CALC_EASE(0.1f), 0.0025f);
    add_calc_short_angle2(&actor->_632, 0, CALC_EASE2(0.29f), DEG2SHORT_ANGLE(1.25f), DEG2SHORT_ANGLE(0.125f));
    actor->_622 = add_calc_short_angle2(&actor->_60C.y, actor->_612.y, CALC_EASE(0.035f), (s16)(actor->_618.y >> 1),
                                        DEG2SHORT_ANGLE(0.05f));
    add_calc_short_angle2(&actor->_618.z, actor->_622, CALC_EASE(0.025f), DEG2SHORT_ANGLE(0.75f),
                          DEG2SHORT_ANGLE(0.25f));
    if (actor->_60C.y == actor->_612.y) {
        mfish_namazu_dummy_process_init(actor);
    }
}

void mfish_namazu_ground_sweep_process_init(MUSEUM_FISH_PRIVATE_DATA* actor) {
    f32 s;
    f32 p;
    f32 f;

    p = RANDOM_F(actor->init_data._14) + actor->init_data._10;
    s = MAX(actor->init_data._14 + actor->init_data._10, 1.0f);
    f = p / s;
    if (p > actor->_5E8) {
        actor->_5F0 = p;
    }
    actor->_5F4 = 0.0f;
    actor->_5D0.y = 0.0f;
    if ((s16)(actor->_612.y - actor->_60C.y) > 0) {
        actor->_612.y += DEG2SHORT_ANGLE(15);
    } else {
        actor->_612.y -= DEG2SHORT_ANGLE(15);
    }
    actor->_632 = DEG2SHORT_ANGLE(30.f + f * 60.f);
    if ((s16)(actor->_60C.y - actor->_612.y) > 0) {
        actor->_636 = DEG2SHORT_ANGLE(0);
    } else {
        actor->_636 = DEG2SHORT_ANGLE(-180);
    }
    actor->_62E_flags &= ~0xc0;
    actor->currentProcess = mfish_namazu_ground_sweep_process;
}

void mfish_namazu_ground_sweep_process(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* game) {
    if (actor->_632 > DEG2SHORT_ANGLE(20)) {
        add_calc2(&actor->_5E8, actor->_5F0, CALC_EASE(0.075f),
                  (0.4f + 0.02f * ((actor->_632 - DEG2SHORT_ANGLE(20)) / DEG2SHORT_ANGLE(2))) * 0.5f);
    }
    add_calc_short_angle2(&actor->_632, 0, CALC_EASE2(0.1f), DEG2SHORT_ANGLE(0.0625f), DEG2SHORT_ANGLE(0.025f));
    actor->_636 += DEG2SHORT_ANGLE(3);
    actor->_622 = add_calc_short_angle2(&actor->_60C.y, actor->_612.y + (s16)(actor->_632 * sin_s(actor->_636)),
                                        CALC_EASE2(0.25f), DEG2SHORT_ANGLE(2.5f), DEG2SHORT_ANGLE(0.125f));

    add_calc_short_angle2(&actor->_618.z, actor->_622, CALC_EASE2(0.25f), DEG2SHORT_ANGLE(1.875f),
                          DEG2SHORT_ANGLE(0.125f));

    if (actor->_5E8 < 0.01f) {
        mfish_namazu_dummy_process_init(actor);
    } else if (actor->_5E8 > 1.0f && actor->_62E_flags & 0x1e) {
        if ((s16)(actor->_612.y - actor->_62C) > 0) {
            actor->_612.y = actor->_62C + DEG2SHORT_ANGLE(112.5f);
        } else {
            actor->_612.y = actor->_62C - DEG2SHORT_ANGLE(112.5f);
        }
    }
}

void mfish_namazu_base_FishMove(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    add_calc2(&actor->_5E8, 0.05f, 1.0f - actor->init_data._18, 0.025f);
    actor->_5D0.x = actor->_5E8 * sin_s(actor->_60C.y);
    actor->_5D0.z = actor->_5E8 * cos_s(actor->_60C.y);
    add_calc(&actor->_5D0.y, MAX(ABS(sin_s(actor->_60C.x) * actor->_5E8), 0.1f), 0.1f, 0.1f, 0.005f);
    add_calc2(&actor->position.y, actor->_5F4 + actor->init_data._0C, 0.1f, actor->_5D0.y);
    mfish_move_smooth(actor, gamex);
    actor->position.x += actor->_5D0.x;
    actor->position.z += actor->_5D0.z;
    actor->position.y = MAX(60.f, MIN(110.f, actor->position.y));
}

void mfish_namazu_mv(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    xyz_t p = suisou_pos[actor->tank];
    f32 v;
    int s;
    mfish_onefish_mv(actor, gamex);
    if (actor->_5F8 > actor->init_data._08 * 10.0f) {
        actor->_5F8 = 0.0f;
        actor->activityFrameCount = 0;
    }
    if (actor->activityFrameCount-- <= 0) {
        actor->activityFrameCount =
            actor->init_data.activeFramesMin + (s16)RANDOM_F(actor->init_data.activeFramesRange);
        actor->savedActivityFrameCount = actor->activityFrameCount;
        if (actor->_644 <= 0 && RANDOM_F(1.0f) < 0.2f) {
            actor->_644 = (s16)RANDOM_F(300.f) + 300;
            mfish_namazu_ground_sweep_process_init(actor);
        } else if (mfish_WallCheck(actor)) {
            mfish_namazu_turn_process_init(actor);
        } else {
            mfish_namazu_normal_process_init(actor);
        }
    } else if (actor->currentProcess == mfish_namazu_normal_process) {
        if ((actor->_62E_flags & 0x1e && ABS((s16)(actor->_62C - actor->_60C.y)) < DEG2SHORT_ANGLE(45)) ||
            (actor->_62E_flags & 0x20 &&
             ABS((s16)(actor->escape_angle + DEG2SHORT_ANGLE(180) - actor->_60C.y)) < DEG2SHORT_ANGLE(30))) {
            actor->activityFrameCount =
                actor->init_data.activeFramesMin + (s16)RANDOM_F(actor->init_data.activeFramesRange);
            actor->savedActivityFrameCount = actor->activityFrameCount;
            mfish_namazu_turn_process_init(actor);
        }
    }

    actor->_638 += DEG2SHORT_ANGLE(10);
    actor->currentProcess(actor, gamex);
    if (ABS(actor->_618.z) > DEG2SHORT_ANGLE(20) && ABS(actor->_622 - actor->_618.z) < DEG2SHORT_ANGLE(30)) {
        add_calc2(&actor->_5E8, 0.2f + 0.01f * GETREG(TAKREG, 0x2d), 0.25f + 0.01f * GETREG(TAKREG, 0x2e),
                  0.05f + 0.01f * GETREG(TAKREG, 0x2f));
    }

    s = GETREG(TAKREG, 0x4c);
    if (s == 1) {
        actor->_644 = (s16)RANDOM_F(300.f) + 300;
    } else if (s == -1) {
        actor->_644 = 0;
    }

    if (actor->_644 > 0) {
        actor->_644--;
        actor->_642 = DEG2SHORT_ANGLE(GETREG(TAKREG, 0x4d) + 35.0f);
    } else {
        actor->_642 = 0;
    }
    add_calc_short_angle2(&actor->_640, actor->_642, CALC_EASE(0.2f), DEG2SHORT_ANGLE(0.25f), DEG2SHORT_ANGLE(0.05f));
    actor->kf.keyframe.frame_control.speed = (actor->_5E8 * 0.75f) / (actor->init_data._10 + actor->init_data._14) + 0.125f;
    mfish_namazu_base_FishMove(actor, gamex);
    Museum_Fish_BGCheck(actor, gamex);
    xyz_t_sub(&p, &actor->position, &p);
    v = 60.f + MAX(ABS(p.x), ABS(p.z)) * -0.15f;
    actor->position.y = v + actor->init_data.ofs_y;
    mfish_namazu_body_wind_anime_play(actor, gamex);
}

BOOL mfish_namazu_before_disp(GAME* game, cKF_SkeletonInfo_R_c* keyframe, int joint_idx, Gfx** joint_shape,
                              u8* joint_flags, void* arg, s_xyz* joint_rot, xyz_t* joint_pos) {
    MUSEUM_FISH_PRIVATE_DATA* actor = (MUSEUM_FISH_PRIVATE_DATA*)arg;
    int s;
    if (joint_idx == 0) {
        joint_pos->y = -(actor->_5AC.y * MIN(sin_s(actor->_640), 0.5f));
    } else if (joint_idx == 1) {
        s = joint_rot->z + actor->_640;
        joint_rot->z = MY_CLAMP(s, DEG2SHORT_ANGLE(-30), DEG2SHORT_ANGLE(30));
        s = joint_rot->x + (actor->_618.z >> 2);
        joint_rot->x = MY_CLAMP(s, DEG2SHORT_ANGLE(-20), DEG2SHORT_ANGLE(20));
        Matrix_scale(1.0f, 1.0f + 0.01f * sin_s(actor->_63A + actor->_63C), 1.0f + 0.01f * sin_s(actor->_63A), MTX_MULT);
    } else if (joint_idx == 2) {
        s = joint_rot->y - (actor->_618.z << 1);
        joint_rot->y = MY_CLAMP(s, DEG2SHORT_ANGLE(-60), DEG2SHORT_ANGLE(60));
        s = joint_rot->x - (actor->_618.z >> 2);
        joint_rot->x = MY_CLAMP(s, DEG2SHORT_ANGLE(-20), DEG2SHORT_ANGLE(20));
        s = joint_rot->z - (s16)(actor->_640 * (0.6f + GETREG(TAKREG, 0x4E) * 0.01f));
        joint_rot->z = MY_CLAMP(s, DEG2SHORT_ANGLE(-30), DEG2SHORT_ANGLE(30));
        Matrix_scale(1.0f, 1.0f + 0.005f * sin_s(actor->_63A + DEG2SHORT_ANGLE(270)),
                     1.0f + 0.005f * sin_s(actor->_63A + DEG2SHORT_ANGLE(90)), MTX_MULT);
    }
    return TRUE;
}

void mfish_namazu_dw(MUSEUM_FISH_PRIVATE_DATA* actor, GAME* gamex) {
    mfish_keyframe_c* skele = &actor->kf;
    Mtx* mtxp;
    if (gamex->frame_counter & 1) {
        mtxp = skele->mtx[0];
    } else {
        mtxp = skele->mtx[1];
    }
    OPEN_DISP(gamex->graph);
    Matrix_translate(actor->position.x, actor->position.y, actor->position.z, MTX_LOAD);
    Matrix_rotateXYZ(actor->_60C.x, actor->_60C.y, actor->_60C.z, MTX_MULT);
    Matrix_translate(0.0f, 0.0f, actor->init_data.ofs_z, MTX_MULT);
    Matrix_scale(actor->init_data.renderScale, actor->init_data.renderScale, actor->init_data.renderScale, MTX_MULT);
    gSPMatrix(NEXT_POLY_OPA_DISP, _Matrix_to_Mtx_new(gamex->graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    cKF_Si3_draw_R_SV(gamex, &skele->keyframe, mtxp, mfish_namazu_before_disp, NULL, actor);
    CLOSE_DISP(gamex->graph);
}
