#include "ac_museum_insect_priv.h"

void minsect_semi_ct(MUSEUM_INSECT_PRIVATE_DATA* actor, GAME* game) {
    const static xyz_t init_pos[4] = {
        { 97.f, 85.f, -18.5f }, { 396.f, 85.5f, -20.f }, { 471.5f, 65.5f, 4.5f }, { 248.f, 88.f, -21.f }
    };
    int s;
    actor->_58 = 1.0f;
    actor->_70 = 0;
    actor->_76 = 0;
    actor->_74 = 0;
    actor->_78 = 0;
    s = (actor->_00 - 4);
    actor->_1C = init_pos[s];
    actor->_68 = ZeroSVec;
    actor->_68.x = DEG2SHORT_ANGLE(-70);
    actor->_68.y = DEG2SHORT_ANGLE(-180);

    actor->_44 = actor->_34 = ZeroVec;
}

void mi_semi_hane_anime(MUSEUM_INSECT_PRIVATE_DATA* actor) {
    static float scaleX_table[7] = { 1.15f, 1.f, 1.15f, 1.f, 1.15f, 1.f, 1.15f };
    if (actor->_70 < 7) {
        if (chase_f(&actor->_58, (GETREG(NMREG, 1) * 0.01f + 1.0f) * scaleX_table[actor->_70], 0.23f) == TRUE) {
            actor->_70--;
            if (actor->_70 < 0) {
                actor->_70 = 0;
            }
        }
    } else {
        actor->_70--;
    }
}

void mi_semi_check_player(MUSEUM_INSECT_PRIVATE_DATA* actor, GAME* game) {
    PLAYER_ACTOR* player = get_player_actor_withoutCheck((GAME_PLAY*)game);
    f32 dist = search_position_distance(&actor->_1C, &player->actor_class.world.position);
    if (dist < 120.f) {
        if (player->actor_class.speed > 1.4f) {
            actor->_76 += (s16)((dist / 120.f) * 8.0f);
        } else if (player->actor_class.speed > 5.0f) {
            actor->_76 += (s16)((dist / 120.f) * 20.0f);
        }
    }
}

void minsect_semi_mv(MUSEUM_INSECT_PRIVATE_DATA* actor, GAME* game) {
    int id = actor->_00 - 4;
    get_now_mind_flag(actor, game);
    if (actor->_8E) {
        mi_semi_hane_anime(actor);
        add_calc_short_angle2(&actor->_72, actor->_74, CALC_EASE2(0.4f), DEG2SHORT_ANGLE(0.75f),
                              DEG2SHORT_ANGLE(0.25f));
        mi_semi_check_player(actor, game);
        actor->_76--;
        if (actor->_76 < 0) {
            actor->_76 = 0;
        }
        if (actor->_76 > 900) {
            actor->_76 = 900;
        }
        if (actor->_76 > 500) {
            actor->_74 = 0;
        } else {
            if (actor->_78 != 0) {
                actor->_74 = DEG2SHORT_ANGLE(-10);
            }
            actor->_6E--;
            if (actor->_6E < 0) {
                if (actor->_78 != 0) {
                    actor->_78 = 0;
                    actor->_74 = 0;
                    actor->_6E = (s16)RANDOM_F(360.f) + 360;
                } else {
                    actor->_78 = 1;
                    actor->_74 = DEG2SHORT_ANGLE(-10);
                    actor->_6E = (s16)RANDOM_F(6000.f) + 12000;
                }
            }
            if (actor->_78 == 1 && actor->_72 == actor->_74) {
                static const u8 semi_sound_data[4] = { 0x9b, 0x9a, 0x98, 0x97 };
                PLAYER_ACTOR* player = get_player_actor_withoutCheck((GAME_PLAY*)game);
                if (search_position_distance(&actor->_1C, &player->actor_class.world.position) < 200.f) {
                    sAdo_OngenPos((u32)actor, semi_sound_data[id], &actor->_1C);
                }
                if (actor->_70 <= 0) {
                    actor->_70 = 7;
                }
            }
        }
    }
}

void minsect_semi_dw(MUSEUM_INSECT_PRIVATE_DATA* actor, GAME* game) {
    _texture_z_light_fog_prim(game->graph);

    OPEN_DISP(game->graph);
    Matrix_translate(actor->_1C.x, actor->_1C.y, actor->_1C.z, FALSE);
    Matrix_rotateXYZ(actor->_72, 0, 0, TRUE);
    Matrix_scale(actor->_14, actor->_14, actor->_14, TRUE);
    Matrix_rotateXYZ(actor->_68.x, actor->_68.y, actor->_68.z, TRUE);
    gSPMatrix(NEXT_POLY_OPA_DISP, _Matrix_to_Mtx_new(game->graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    gDPSetEnvColor(NEXT_POLY_OPA_DISP, 0, 0xff, 0x9b, 0xff);
    gSPDisplayList(NEXT_POLY_OPA_DISP, minsect_mdl[actor->_00][0]);
    CLOSE_DISP(game->graph);

    _texture_z_light_fog_prim_xlu(game->graph);

    OPEN_POLY_XLU_DISP(game->graph);
    gDPSetEnvColor(POLY_XLU_DISP++, 0xff, 0xff, 0xff, 0xff);
    Matrix_scale(actor->_58 + (GETREG(NMREG, 1) * 0.01f), GETREG(NMREG, 2) * 0.01f + 1.0f,
                 GETREG(NMREG, 3) * 0.01f + 1.0f, TRUE);
    gSPMatrix(POLY_XLU_DISP++, _Matrix_to_Mtx_new(game->graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    gSPDisplayList(POLY_XLU_DISP++, minsect_mdl[actor->_00][1]);
    CLOSE_POLY_XLU_DISP(game->graph);
}
