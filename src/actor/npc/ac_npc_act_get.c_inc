enum {
    aNPC_ACT_GET_STEP_MOVE,
    aNPC_ACT_GET_STEP_GET,
    aNPC_ACT_GET_STEP_PULL,
    aNPC_ACT_GET_STEP_PULL_WAIT,
    aNPC_ACT_GET_STEP_PUTAWAY,
    aNPC_ACT_GET_STEP_EAT,
    aNPC_ACT_GET_STEP_CHG_CLOTH,
    aNPC_ACT_GET_STEP_CHG_UMB,
    aNPC_ACT_GET_STEP_CHG_CLOTH_AND_UMB,
    aNPC_ACT_GET_STEP_RETURN,
    aNPC_ACT_GET_STEP_RETURN_WAIT,
    aNPC_ACT_GET_STEP_ESTIMATE,

    aNPC_ACT_GET_STEP_NUM
};

enum {
    aNPC_CLOTH_CHG_STEP_START,
    aNPC_CLOTH_CHG_STEP_1,
    aNPC_CLOTH_CHG_STEP_2,
    aNPC_CLOTH_CHG_STEP_END,

    aNPC_CLOTH_CHG_STEP_NUM
};

static void aNPC_act_get_chg_step(NPC_ACTOR* nactorx, u8 step) {
    // clang-format off
    static u8 act_idx[] = {
        aNPC_ACTION_TYPE_WALK,
        aNPC_ACTION_TYPE_GET,
        aNPC_ACTION_TYPE_GET_PULL,
        aNPC_ACTION_TYPE_GET_PULL_WAIT,
        aNPC_ACTION_TYPE_GET_PUTAWAY,
        aNPC_ACTION_TYPE_GET_EAT,
        aNPC_ACTION_TYPE_GET_CHANGE,
        aNPC_ACTION_TYPE_GET_CHANGE,
        aNPC_ACTION_TYPE_GET_CHANGE,
        aNPC_ACTION_TYPE_GET_RETURN,
        aNPC_ACTION_TYPE_GET_RETURN,
        aNPC_ACTION_TYPE_ESTIMATE_F,
    };
    // clang-format on

    // clang-format off
    static u8 act_idx_f[] = {
        aNPC_ACTION_TYPE_WALK,
        aNPC_ACTION_TYPE_GET_F,
        aNPC_ACTION_TYPE_GET_PULL_F,
        aNPC_ACTION_TYPE_GET_PULL_WAIT_F,
        aNPC_ACTION_TYPE_GET_PUTAWAY_F,
        aNPC_ACTION_TYPE_GET_EAT,
        aNPC_ACTION_TYPE_GET_CHANGE,
        aNPC_ACTION_TYPE_GET_CHANGE,
        aNPC_ACTION_TYPE_GET_CHANGE,
        aNPC_ACTION_TYPE_GET_RETURN_F,
        aNPC_ACTION_TYPE_GET_RETURN_F,
        aNPC_ACTION_TYPE_ESTIMATE_F,
    };
    // clang-format on

    int check_for_fish = CLIP(handOverItem_clip)->master_actor == (ACTOR*)nactorx;
    u8 next_act_idx;

    switch (step) {
        case aNPC_ACT_GET_STEP_MOVE:
            nactorx->movement.demo_move_timer = 80;
            break;
        case aNPC_ACT_GET_STEP_GET:
            check_for_fish = TRUE;
            break;
        case aNPC_ACT_GET_STEP_PUTAWAY:
            aNPC_OngenTrgStart(nactorx, NA_SE_GASAGOSO);
            break;
        case aNPC_ACT_GET_STEP_CHG_CLOTH:
            aNPC_OngenTrgStart(nactorx, NA_SE_WEAR);
            nactorx->draw.cloth_change_step = aNPC_CLOTH_CHG_STEP_START;
            if (ITEM_IS_CLOTH(Common_Get(npc_chg_cloth)) == FALSE) {
                aNPC_setup_chg_cloth(nactorx, ITM_CLOTH_START, 0xFF);
            } else {
                aNPC_setup_chg_cloth(nactorx, Common_Get(npc_chg_cloth), 0xFF);
            }
            break;
        case aNPC_ACT_GET_STEP_CHG_UMB:
            aNPC_OngenTrgStart(nactorx, NA_SE_WEAR);
            nactorx->draw.umb_state = 0;
            break;
        case aNPC_ACT_GET_STEP_CHG_CLOTH_AND_UMB:
            aNPC_OngenTrgStart(nactorx, NA_SE_WEAR);
            nactorx->draw.cloth_change_step = aNPC_CLOTH_CHG_STEP_START;
            nactorx->draw.umb_state = 0;
            break;
    }

    nactorx->action.step = step;
    if (check_for_fish == TRUE && ITEM_IS_FISH(CLIP(handOverItem_clip)->item) == TRUE) {
        next_act_idx = act_idx_f[step];
    } else {
        next_act_idx = act_idx[step];
    }

    aNPC_setupAction(nactorx, next_act_idx);
}

static void aNPC_act_get_move(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    if (nactorx->movement.demo_move_timer != 0) {
        nactorx->movement.demo_move_timer--;
    }

    if (!aNPC_act_search_move(nactorx) ||
        (nactorx->collision.collision_flag & (mCoBG_HIT_WALL | mCoBG_HIT_WALL_FRONT)) != 0 ||
        nactorx->movement.demo_move_timer == 0) {
        aNPC_act_get_chg_step(nactorx, aNPC_ACT_GET_STEP_GET);
    }
}

static void aNPC_act_get(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    if (nactorx->draw.main_animation_state == cKF_STATE_STOPPED) {
        ACTOR* item_actor = CLIP(handOverItem_clip)->chg_master_proc((ACTOR*)nactorx);

        if (item_actor != NULL) {
            CLIP(handOverItem_clip)->chg_request_mode_proc((ACTOR*)nactorx, aHOI_REQUEST_GET_PULL);
            nactorx->left_hand.item_actor_p = item_actor;
            nactorx->left_hand.item = CLIP(handOverItem_clip)->item;
            aNPC_act_get_chg_step(nactorx, aNPC_ACT_GET_STEP_PULL);
        }
    }
}

static void aNPC_act_get_pull(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    static u8 next_step[] = {
        aNPC_ACT_GET_STEP_EAT, // aHOI_REQUEST_EAT
        aNPC_ACT_GET_STEP_CHG_CLOTH, // aHOI_REQUEST_CHANGE
        aNPC_ACT_GET_STEP_PUTAWAY, // aHOI_REQUEST_PUTAWAY
        aNPC_ACT_GET_STEP_PULL_WAIT, // aHOI_REQUEST_GET_PULL_WAIT
    };

    if (nactorx->draw.main_animation_state == cKF_STATE_STOPPED) {
        CLIP(handOverItem_clip)->chg_request_mode_proc((ACTOR*)nactorx, CLIP(handOverItem_clip)->player_after_mode);
        aNPC_act_get_chg_step(nactorx, next_step[CLIP(handOverItem_clip)->player_after_mode - aHOI_REQUEST_EAT]);
    }
}

static void aNPC_act_get_pull_wait(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    aNPC_check_manpu_demoCode((ACTOR*)nactorx);

    if (nactorx->draw.main_animation_state == cKF_STATE_STOPPED || nactorx->draw.main_animation_state == cKF_STATE_CONTINUE) {
        int order = mDemo_Get_OrderValue(mDemo_ORDER_NPC0, 1);

        if (order != 0) {
            u8 step = nactorx->action.step;
            int mode;

            switch (order) {
                case 10:
                    mode = aHOI_REQUEST_RETURN;
                    step = aNPC_ACT_GET_STEP_RETURN;
                    break;
                case 11:
                    mode = aHOI_REQUEST_ESTIMATE;
                    step = aNPC_ACT_GET_STEP_ESTIMATE;
                    break;
                case 12:
                    mode = aHOI_REQUEST_EAT;
                    step = aNPC_ACT_GET_STEP_EAT;
                    break;
                case 14:
                    mode = aHOI_REQUEST_PUTAWAY;
                    step = aNPC_ACT_GET_STEP_PUTAWAY;
                    break;
                case 1:
                    mode = aHOI_REQUEST_CHANGE;
                    step = aNPC_ACT_GET_STEP_CHG_CLOTH;
                    break;
                default:
                    mode = aHOI_REQUEST_RETURN;
                    break;
            }
            
            if (step != nactorx->action.step) {
                CLIP(handOverItem_clip)->chg_request_mode_proc((ACTOR*)nactorx, mode);
                mDemo_Set_OrderValue(mDemo_ORDER_NPC0, 1, 0);
                aNPC_act_get_chg_step(nactorx, step);
            }
        }
    }
}

static void aNPC_act_get_putaway(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    if (nactorx->draw.main_animation_state == cKF_STATE_STOPPED) {
        aNPC_clear_left_hand_info(nactorx);
        aNPC_act_return_trans_item(nactorx);
    }
}

static void aNPC_act_get_chg_cloth(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    if (nactorx->draw.cloth_change_step == aNPC_CLOTH_CHG_STEP_END) {
        aNPC_act_get_putaway(nactorx, play);
    }

    if (cKF_FrameControl_passCheck_now(&nactorx->draw.main_animation.keyframe.frame_control, 26.0f) == TRUE) {
        nactorx->draw.cloth_change_step = aNPC_CLOTH_CHG_STEP_1;
    }

    switch (nactorx->draw.cloth_change_step) {
        case aNPC_CLOTH_CHG_STEP_1:
            aNPC_cancel_cloth_data(nactorx);
            nactorx->draw.cloth_change_step = aNPC_CLOTH_CHG_STEP_2;
        // fallthrough 1 -> 2
        case aNPC_CLOTH_CHG_STEP_2:
            if (aNPC_change_cloth_data(nactorx) == TRUE) {
                mActor_name_t cloth = nactorx->draw.cloth_no;
                u8 org_idx = nactorx->draw.org_idx;

                aNPC_setup_next_cloth(nactorx, cloth, org_idx);
                aNPC_setup_cloth(nactorx, cloth, org_idx);
                nactorx->draw.cloth_change_step = aNPC_CLOTH_CHG_STEP_END;
            }
            break;
    }
}

static void aNPC_act_get_chg_umb(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    if (nactorx->draw.umb_state == aNPC_CLOTH_CHG_STEP_END) {
        aNPC_act_get_putaway(nactorx, play);
    }

    if (cKF_FrameControl_passCheck_now(&nactorx->draw.main_animation.keyframe.frame_control, 26.0f) == TRUE) {
        nactorx->draw.umb_state = aNPC_CLOTH_CHG_STEP_1;
    }

    switch (nactorx->draw.umb_state) {
        case aNPC_CLOTH_CHG_STEP_1:
            aNPC_change_umbrella(nactorx);
            nactorx->draw.umb_state = aNPC_CLOTH_CHG_STEP_2;
        // fallthrough 1 -> 2
        case aNPC_CLOTH_CHG_STEP_2:
            if (CLIP(tools_clip)->aTOL_chg_request_mode_proc((ACTOR*)nactorx, nactorx->right_hand.prev_item_actor_p, aTOL_ACTION_DESTRUCT) == TRUE) {
                nactorx->npc_info.animal->umbrella_id = nactorx->right_hand.umbrella_type;
                nactorx->draw.umb_state = aNPC_CLOTH_CHG_STEP_END;
            }
            break;
    }
}

static void aNPC_act_get_chg_cloth_and_umb(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    if (nactorx->draw.cloth_change_step == aNPC_CLOTH_CHG_STEP_END && nactorx->draw.umb_state == aNPC_CLOTH_CHG_STEP_END) {
        aNPC_act_get_putaway(nactorx, play);
    }

    if (cKF_FrameControl_passCheck_now(&nactorx->draw.main_animation.keyframe.frame_control, 26.0f) == TRUE) {
        nactorx->draw.cloth_change_step = aNPC_CLOTH_CHG_STEP_1;
        nactorx->draw.umb_state = aNPC_CLOTH_CHG_STEP_1;
    }

    switch (nactorx->draw.cloth_change_step) {
        case aNPC_CLOTH_CHG_STEP_1:
            aNPC_cancel_cloth_data(nactorx);
            nactorx->draw.cloth_change_step = aNPC_CLOTH_CHG_STEP_2;
        // fallthrough 1 -> 2
        case aNPC_CLOTH_CHG_STEP_2:
            if (aNPC_change_cloth_data(nactorx) == TRUE) {
                mActor_name_t cloth = nactorx->draw.cloth_no;
                u8 org_idx = nactorx->draw.org_idx;

                aNPC_setup_next_cloth(nactorx, cloth, org_idx);
                aNPC_setup_cloth(nactorx, cloth, org_idx);
                nactorx->draw.cloth_change_step = aNPC_CLOTH_CHG_STEP_END;
            }
            break;
    }

    switch (nactorx->draw.umb_state) {
        case aNPC_CLOTH_CHG_STEP_1:
            aNPC_change_umbrella(nactorx);
            nactorx->draw.umb_state = aNPC_CLOTH_CHG_STEP_2;
        // fallthrough 1 -> 2
        case aNPC_CLOTH_CHG_STEP_2:
            if (CLIP(tools_clip)->aTOL_chg_request_mode_proc((ACTOR*)nactorx, nactorx->right_hand.prev_item_actor_p, aTOL_ACTION_DESTRUCT) == TRUE) {
                nactorx->npc_info.animal->umbrella_id = nactorx->right_hand.umbrella_type;
                nactorx->draw.umb_state = aNPC_CLOTH_CHG_STEP_END;
            }
            break;
    }
}

static void aNPC_act_get_return(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    if (nactorx->draw.main_animation_state == cKF_STATE_STOPPED) {
        CLIP(handOverItem_clip)->chg_request_mode_proc((ACTOR*)nactorx, aHOI_REQUEST_TRANS_WAIT);
        CLIP(handOverItem_clip)->player_after_mode = aHOI_REQUEST_PUTAWAY;
        aNPC_act_get_chg_step(nactorx, aNPC_ACT_GET_STEP_RETURN_WAIT);
    }
}

static void aNPC_act_estimate(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    if (nactorx->draw.main_animation_state == cKF_STATE_STOPPED) {
        CLIP(handOverItem_clip)->chg_request_mode_proc((ACTOR*)nactorx, aHOI_REQUEST_GET_PULL_WAIT);
        aNPC_act_get_chg_step(nactorx, aNPC_ACT_GET_STEP_PULL_WAIT);
    }
}

static void aNPC_act_get_main_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    // clang-format off
    static aNPC_SUB_PROC act_proc[] = {
        &aNPC_act_get_move,
        &aNPC_act_get,
        &aNPC_act_get_pull,
        &aNPC_act_get_pull_wait,
        &aNPC_act_get_putaway,
        &aNPC_act_get_putaway,
        &aNPC_act_get_chg_cloth,
        &aNPC_act_get_chg_umb,
        &aNPC_act_get_chg_cloth_and_umb,
        &aNPC_act_get_return,
        &aNPC_act_trans_wait,
        &aNPC_act_estimate
    };
    // clang-format on

    if ((*nactorx->talk_info.talk_end_check_proc)((ACTOR*)nactorx, (GAME*)play) == TRUE) {
        aNPC_setup_talk_end(nactorx);
        nactorx->action.step = aNPC_ACTION_END_STEP;
    } else {
        aNPC_check_feel_demoCode((ACTOR*)nactorx);
        (*act_proc[nactorx->action.step])(nactorx, play);
    }
}

static void aNPC_act_get_chg_data_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    nactorx->action.act_obj = aNPC_ACT_OBJ_PLAYER;
}

static void aNPC_act_get_init_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    u16* arg_data = nactorx->request.act_args;
    u8 step = aNPC_ACT_GET_STEP_MOVE;
    
    nactorx->condition_info.trans_demo_flg_save = nactorx->condition_info.demo_flg;
    nactorx->condition_info.demo_flg =
        aNPC_COND_DEMO_SKIP_UZAI_CHECK | aNPC_COND_DEMO_SKIP_ENTRANCE_CHECK | aNPC_COND_DEMO_SKIP_HEAD_LOOKAT |
        aNPC_COND_DEMO_SKIP_TALK_CHECK | aNPC_COND_DEMO_SKIP_ITEM | aNPC_COND_DEMO_SKIP_FORWARD_CHECK |
        aNPC_COND_DEMO_SKIP_OBJ_COL_CHECK | aNPC_COND_DEMO_SKIP_MOVE_CIRCLE_REV | aNPC_COND_DEMO_SKIP_MOVE_RANGE_CHECK;
    
    if (nactorx->action.idx == aNPC_ACT_GET) {
        if (nactorx->actor_class.player_distance_xz < 50.0f || arg_data[0] != 0) {
            step = aNPC_ACT_GET_STEP_GET;
        } else {
            nactorx->movement.arrival_area_radius = SQ(50.0f);
        }
    } else {
        step = aNPC_ACT_GET_STEP_CHG_CLOTH;
    }

    aNPC_act_get_chg_step(nactorx, step);
}

static void aNPC_act_get_proc(NPC_ACTOR* nactorx, GAME_PLAY* play, int type) {
    static aNPC_SUB_PROC act_proc[] = {
        &aNPC_act_get_init_proc,
        &aNPC_act_get_chg_data_proc,
        &aNPC_act_get_main_proc,
    };

    (*act_proc[type])(nactorx, play);
}
