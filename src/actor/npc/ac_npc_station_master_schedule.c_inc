static void aSTM_Change_sound(NPC_STATION_MASTER_ACTOR* actor, u8 sound) {
    if (actor->sound != sound) {
        mBGMPsComp_make_ps_demo(sound, 0x168);
        if (actor->sound == BGM_FIELD_00) {
            mBGMPsComp_delete_ps_quiet();
        }

        actor->sound = sound;
    }
}

typedef struct npc_p_sel2_door_data_s {
    int scene_no;
    u8 drt;
    u8 type;
    u16 arg;
    s16 pos_x;
    s16 pos_z;
} aNPS2_door_data_c;

static void aNPS2_make_door_data(Door_data_c* door_data) {
    static aNPS2_door_data_c demo2_data = { SCENE_START_DEMO3, mSc_DIRECT_NORTH, 0, 0, 120, 340 };

    door_data->next_scene_id = demo2_data.scene_no;
    door_data->exit_orientation = demo2_data.drt;
    door_data->exit_type = demo2_data.type;
    door_data->extra_data = demo2_data.arg;
    door_data->exit_position.x = demo2_data.pos_x;
    door_data->exit_position.y = 0;
    door_data->exit_position.z = demo2_data.pos_z;
    door_data->door_actor_name = EMPTY_NO;
    door_data->wipe_type = WIPE_TYPE_CIRCLE_RIGHT;
    Common_Get(transition).wipe_type = WIPE_TYPE_FADE_BLACK;
}

static int aNPS2_setup_game_start(GAME_PLAY* play) {
    Door_data_c door_data;

    aNPS2_make_door_data(&door_data);

    if (goto_other_scene(play, &door_data, TRUE) != TRUE) {
        return FALSE;
    }

    mBGMPsComp_make_ps_wipe(0x328A);
    return TRUE;
}

static void aSTM_look_player(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    if (actor->npc_class.action.step == aNPC_ACTION_END_STEP) {
        s16 diff_angle = DIFF_SHORT_ANGLE(actor->npc_class.actor_class.player_angle_y, actor->npc_class.actor_class.shape_info.rotation.y);
        u8 action = aNPC_ACT_TURN2;

        if (ABS(diff_angle) < DEG2SHORT_ANGLE2(67.5f)) {
            action = aNPC_ACT_WAIT;
        } else {
            actor->npc_class.condition_info.demo_flg |= aNPC_COND_DEMO_SKIP_FOOTSTEPS;
        }

        aSTM_set_request_act(actor, 4, action, aNPC_ACT_TYPE_SEARCH, aNPC_ACT_OBJ_PLAYER, 0, 0);
    }
}

static void aSTM_talk_wait(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    ACTOR* playerx = GET_PLAYER_ACTOR_ACTOR(play);

    aSTM_look_player(actor, play);

    if (actor->happening_sound == BGM_INTRO_ARRIVE || actor->happening_sound == BGM_INTRO_NEW_TOWN) {
        if (playerx != NULL && playerx->world.position.z >= 970.0f) {
            if (actor->happening_sound == BGM_INTRO_ARRIVE) {
                mBGMPsComp_delete_ps_happening(BGM_INTRO_ARRIVE, 0x384);
            } else {
                mBGMPsComp_delete_ps_happening(BGM_INTRO_NEW_TOWN, 0x528A);
            }

            mBGMPsComp_make_ps_co_quiet(0x384, 0x12C);
            actor->happening_sound = BGM_SILENCE;
        }
    }
}

static f32 player_x_drt(NPC_STATION_MASTER_ACTOR* actor) {
    if (actor->npc_class.actor_class.player_angle_y < 0) {
        return 1.0f;
    } else {
        return -1.0f;
    }
}

static void aSTM_get_off_wait(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    aSTM_look_player(actor, play);

    if (CLIP(demo_clip) != NULL) {
        ACTOR* demox = (ACTOR*)CLIP(demo_clip)->demo_class;

        if (demox != NULL) {
            switch (CLIP(demo_clip)->type) {
                case mDemo_CLIP_TYPE_INTRO_DEMO: {
                    INTRO_DEMO_ACTOR* demo_actor = (INTRO_DEMO_ACTOR*)demox;

                    // train1 arg0 is passenger flag
                    if (mEv_CheckFirstIntro() && demo_actor->train1_actor_p != NULL && !demo_actor->train1_actor_p->arg0) {
                        if (mPlib_get_player_actor_main_index((GAME*)play) != mPlayer_INDEX_DEMO_GETOFF_TRAIN) {
                            aSTM_setup_think_proc(actor, play, aSTM_THINK_TURN);
                        }
                    }

                    break;
                }

                case mDemo_CLIP_TYPE_RIDE_OFF_DEMO: {
                    RIDE_OFF_DEMO_ACTOR* demo_actor = (RIDE_OFF_DEMO_ACTOR*)demox;

                    actor->happening_sound = mBGMPsComp_execute_bgm_num_get();
                    // train1 arg0 is passenger flag
                    if (demo_actor->train_actor != NULL && !demo_actor->train_actor->arg0) {
                        if (mPlib_get_player_actor_main_index((GAME*)play) != mPlayer_INDEX_DEMO_GETOFF_TRAIN) {
                            aSTM_setup_think_proc(actor, play, aSTM_THINK_TURN);
                            mBGMPsComp_scene_mode(1);

                            if (Common_Get(player_no) != mPr_FOREIGNER) {
                                actor->next_think_idx = aSTM_THINK_3;
                            }
                        }
                    }

                    break;
                }
            }
        }
    }
}

static void aSTM_turn(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    aSTM_setup_think_proc(actor, play, actor->next_think_idx);
}

static void aSTM_interrupt_turn(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    aSTM_setup_think_proc(actor, play, actor->think_idx + 1);
}

static void aSTM_interrupt_move(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    u8 think_idx = aSTM_THINK_9;

    mEv_UnSetGateway();
    if (mEv_CheckFirstIntro() == TRUE) {
        think_idx = aSTM_THINK_4;
    } else if (Common_Get(player_no) < mPr_FOREIGNER) {
        think_idx = aSTM_THINK_8;
    }

    actor->npc_class.condition_info.demo_flg = 0;
    play->submenu.start_refuse = FALSE;
    aSTM_setup_think_proc(actor, play, think_idx);
}

static void aSTM_make_train_bf(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    STRUCTURE_ACTOR* train1 = (STRUCTURE_ACTOR*)Actor_info_fgName_search(&play->actor_info, TRAIN1, ACTOR_PART_ITEM);

    if (actor->timer != 0) {
        actor->timer--;
    } else if (train1 == NULL || train1->action > 5) { // TODO: train1 needs action enum
        actor->train_actor_p = NULL;
        aSTM_setup_think_proc(actor, play, aSTM_THINK_MAKE_TRAIN);
    } else {
        actor->train_actor_p = (ACTOR*)train1;
        Common_Set(train_coming_flag, 2);
        aSTM_setup_think_proc(actor, play, aSTM_THINK_TRAIN_ARRIVE_WAIT);
        aSTM_Change_sound(actor, BGM_TRAIN_PULL_INTO_TOWN);
    }
}

static void aSTM_make_train(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    STRUCTURE_ACTOR* train1 = (STRUCTURE_ACTOR*)Actor_info_fgName_search(&play->actor_info, TRAIN1, ACTOR_PART_ITEM);

    if (train1 != NULL && train1->action <= 5) {
        actor->train_actor_p = (ACTOR*)train1;
        aSTM_setup_think_proc(actor, play, aSTM_THINK_TRAIN_ARRIVE_WAIT);
    }

    if (Common_Get(train_approaching_flag) == TRUE) {
        aSTM_Change_sound(actor, BGM_TRAIN_PULL_INTO_TOWN);
    }
}

static void aSTM_train_arrive_wait(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    STRUCTURE_ACTOR* train1 = (STRUCTURE_ACTOR*)actor->train_actor_p;

    if (train1 != NULL && train1->action == 5) {
        aSTM_setup_think_proc(actor, play, aSTM_THINK_14);
    }

    if (Common_Get(train_approaching_flag) == TRUE) {
        aSTM_Change_sound(actor, BGM_TRAIN_PULL_INTO_TOWN);
    }
}

static void aSTM_move_turn_bf(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    aSTM_setup_think_proc(actor, play, aSTM_THINK_14);
}

static void aSTM_move(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    if (mPlib_get_player_actor_main_index((GAME*)play) != mPlayer_INDEX_DEMO_WALK) {
        mPlib_request_main_demo_walk_type1((GAME*)play, actor->npc_class.actor_class.home.position.x + mFI_UT_WORLDSIZE_X_F, actor->train_actor_p->world.position.z + 2 * mFI_UT_WORLDSIZE_Z_F, 2.0f, FALSE);
    } else {
        aSTM_setup_think_proc(actor, play, aSTM_THINK_16);
    }
}

static void aSTM_in_train(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    xyz_t pos;

    aSTM_look_player(actor, play);
    if (mPlib_get_player_actor_main_index((GAME*)play) != mPlayer_INDEX_DEMO_GETON_TRAIN) {
        pos.x = actor->npc_class.actor_class.home.position.x + mFI_UT_WORLDSIZE_X_F;
        pos.y = actor->train_actor_p->world.position.y + 20.0f;
        pos.z = actor->train_actor_p->world.position.z + 2 * mFI_UT_WORLDSIZE_Z_F;
        mPlib_request_main_demo_geton_train_type1((GAME*)play, &pos);
    } else {
        aSTM_setup_think_proc(actor, play, aSTM_THINK_IN_TRAIN2);
    }
}

static void aSTM_in_train2(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    aSTM_look_player(actor, play);
    if (mPlib_get_player_actor_main_index((GAME*)play) != mPlayer_INDEX_DEMO_GETON_TRAIN) {
        aSTM_setup_think_proc(actor, play, aSTM_THINK_SEE_OFF);
    }
}

static void aSTM_see_off(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    f32 dist = 315.5f - (actor->npc_class.actor_class.world.position.x - actor->npc_class.actor_class.home.position.x);

    aSTM_look_player(actor, play);
    if (actor->npc_class.actor_class.player_distance_xz > dist) {
        aSTM_setup_think_proc(actor, play, aSTM_THINK_GAME_END);
    }
}

typedef void (*aSTM_THINK_PROC)(NPC_STATION_MASTER_ACTOR*, GAME_PLAY*);

// clang-format off
static aSTM_THINK_PROC proc_table[] = {
    (aSTM_THINK_PROC)none_proc1,
    aSTM_get_off_wait,
    aSTM_turn,
    aSTM_look_player,
    aSTM_interrupt_turn,
    aSTM_interrupt_move,
    aSTM_make_train_bf,
    aSTM_make_train,
    aSTM_train_arrive_wait,
    aSTM_move_turn_bf,
    aSTM_move,
    aSTM_in_train,
    aSTM_in_train2,
    aSTM_see_off,
    aSTM_talk_wait,
};
// clang-format on

static void aSTM_think_main_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    NPC_STATION_MASTER_ACTOR* actor = (NPC_STATION_MASTER_ACTOR*)nactorx;

    if (nactorx->action.step == aNPC_ACTION_END_STEP || actor->think_idx == aSTM_THINK_SEE_OFF) {
        (*proc_table[actor->think_proc_idx])(actor, play);
    }
}

static void aSTM_think_init_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    NPC_STATION_MASTER_ACTOR* actor = (NPC_STATION_MASTER_ACTOR*)nactorx;
    u8 think_idx;
    ACTOR* actorx = (ACTOR*)actor;

    if (mEv_CheckFirstIntro() == TRUE || Actor_info_name_search(&play->actor_info, mAc_PROFILE_RIDE_OFF_DEMO, ACTOR_PART_CONTROL) != NULL) {
        think_idx = aSTM_THINK_GET_OFF_WAIT;
        actorx->shape_info.rotation.y += DEG2SHORT_ANGLE2(-90.0f);
        actorx->world.angle.y += DEG2SHORT_ANGLE2(-90.0f);
    } else if (mEv_CheckFirstJob() == TRUE) {
        think_idx = aSTM_THINK_5;
    } else {
        if (mEv_CheckTitleDemo() <= 0) {
            actorx->world.position.x += mFI_UT_WORLDSIZE_X_F;
        }

        if (Common_Get(player_no) < mPr_FOREIGNER) {
            think_idx = aSTM_THINK_8;
        } else {
            think_idx = aSTM_THINK_9;
        }
    }

    actorx->status_data.weight = MASSTYPE_IMMOVABLE;
    nactorx->condition_info.hide_request = FALSE;
    aSTM_setup_think_proc(actor, play, think_idx);
}

static void aSTM_get_off_wait_init(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    actor->npc_class.condition_info.demo_flg |= aNPC_COND_DEMO_SKIP_FOOTSTEPS;
    aSTM_set_request_act(actor, 4, aNPC_ACT_TURN2, aNPC_ACT_TYPE_SEARCH, aNPC_ACT_OBJ_PLAYER, 0, 0);
}

static void aSTM_intro_demo_wait_init(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    static xyz_t enter_pos = { 54.5f * mFI_UT_WORLDSIZE_X_F, 0.0f, 20.5f * mFI_UT_WORLDSIZE_Z_F };

    aSTM_get_off_wait_init(actor, play);
    mCoBG_SetAttribute(enter_pos, mCoBG_ATTRIBUTE_32);
}

static void aSTM_interrupt_turn_init(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    actor->npc_class.condition_info.demo_flg |= aNPC_COND_DEMO_SKIP_FOOTSTEPS;
    aSTM_set_request_act(actor, 4, aNPC_ACT_TURN2, aNPC_ACT_TYPE_TO_POINT, aNPC_ACT_OBJ_DEFAULT, actor->npc_class.actor_class.world.position.x + mFI_UT_WORLDSIZE_X_F, actor->npc_class.actor_class.world.position.z);
}

static void aSTM_interrupt_move_init(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    actor->npc_class.condition_info.demo_flg = aNPC_COND_DEMO_SKIP_FORWARD_CHECK | aNPC_COND_DEMO_SKIP_OBJ_COL_CHECK;
    aSTM_set_request_act(actor, 4, aNPC_ACT_WALK, aNPC_ACT_TYPE_TO_POINT, aNPC_ACT_OBJ_DEFAULT, actor->npc_class.actor_class.world.position.x + mFI_UT_WORLDSIZE_X_F, actor->npc_class.actor_class.world.position.z);
    actor->npc_class.condition_info.demo_flg &= ~aNPC_COND_DEMO_SKIP_FOOTSTEPS; // @unnecessary
}

static void aSTM_make_train_bf_init(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    actor->timer = 60;
    play->submenu.start_refuse = TRUE;
}

static void aSTM_make_train_init(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    play->submenu.start_refuse = TRUE;
    Common_Set(train_coming_flag, 2);
}

static void aSTM_move_turn_init(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    play->submenu.start_refuse = TRUE;
    actor->move_ofs_x = player_x_drt(actor) * mFI_UNIT_BASE_SIZE_F;
    actor->npc_class.movement.avoid_pos_x = actor->npc_class.actor_class.home.position.x + mFI_UT_WORLDSIZE_X_F + actor->move_ofs_x;
    actor->npc_class.movement.avoid_pos_z = actor->train_actor_p->world.position.z + 2 * mFI_UT_WORLDSIZE_Z_F;

    aSTM_set_request_act(actor, 4, aNPC_ACT_TURN2, aNPC_ACT_TYPE_TO_POINT, aNPC_ACT_OBJ_DEFAULT, actor->npc_class.movement.avoid_pos_x, actor->npc_class.movement.avoid_pos_z);
}

static void aSTM_move_init(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    aSTM_set_request_act(actor, 4, aNPC_ACT_WALK, aNPC_ACT_TYPE_TO_POINT, aNPC_ACT_OBJ_DEFAULT, actor->npc_class.movement.avoid_pos_x, actor->npc_class.movement.avoid_pos_z);
    actor->npc_class.condition_info.demo_flg &= ~aNPC_COND_DEMO_SKIP_FOOTSTEPS;
}

static void aSTM_see_off_init(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    STRUCTURE_ACTOR* train1 = (STRUCTURE_ACTOR*)actor->train_actor_p;

    // TODO: train1 arg1 = 'player boarding' flag
    train1->arg1 = TRUE;
    Common_Set(train_control_state, 0);
    aSTM_get_off_wait_init(actor, play);
    actor->npc_class.actor_class.state_bitfield |= ACTOR_STATE_NO_MOVE_WHILE_CULLED;
}

static void aSTM_game_end_init(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play) {
    if (actor->station_check_res == TRUE) {
        aNPS2_setup_game_start(play);
    } else {
        mBGMPsComp_make_ps_wipe(0x328A);
        play->fb_fade_type = FADE_TYPE_OUT_GAME_END_TRAIN;
        play->fb_wipe_type = WIPE_TYPE_CIRCLE_RIGHT;
        mPlib_request_main_invade_type1((GAME*)play);
    }

    mBGMPsComp_scene_mode(11);
}

typedef struct {
    u8 think_proc_idx;
    u8 think_init_idx;
    u8 talk_request_idx;
    u8 talk_idx;
    u8 think_idx_after_talk;
} aSTM_think_data_c;

// clang-format off
static aSTM_think_data_c dt_tbl[] = {
    {aSTM_THINK_PROC_GET_OFF_WAIT, aSTM_THINK_INIT_GET_OFF_WAIT, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_GET_OFF_WAIT},
    {aSTM_THINK_PROC_TURN, aSTM_THINK_INIT_NONE, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_2},
    {aSTM_THINK_PROC_NONE, aSTM_THINK_INIT_NONE, aSTM_TALK_REQUEST_FORCE, 0x00, aSTM_THINK_INTERRUPT_TURN},
    {aSTM_THINK_PROC_NONE, aSTM_THINK_INIT_NONE, aSTM_TALK_REQUEST_FORCE, 0x01, aSTM_THINK_INTERRUPT_TURN},
    {aSTM_THINK_PROC_TALK_WAIT, aSTM_THINK_INIT_INTRO_DEMO_WAIT, aSTM_TALK_REQUEST_NORM, 0x00, aSTM_THINK_4},
    {aSTM_THINK_PROC_TALK_WAIT, aSTM_THINK_INIT_GET_OFF_WAIT, aSTM_TALK_REQUEST_NORM, 0x01, aSTM_THINK_5},
    {aSTM_THINK_PROC_INTERRUPT_TURN, aSTM_THINK_INIT_INTERRUPT_TURN, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_INTERRUPT_TURN},
    {aSTM_THINK_PROC_INTERRUPT_MOVE, aSTM_THINK_INIT_INTERRUPT_MOVE, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_INTERRUPT_MOVE},
    {aSTM_THINK_PROC_TALK_WAIT, aSTM_THINK_INIT_GET_OFF_WAIT, aSTM_TALK_REQUEST_NORM, 0x02, aSTM_THINK_8},
    {aSTM_THINK_PROC_TALK_WAIT, aSTM_THINK_INIT_GET_OFF_WAIT, aSTM_TALK_REQUEST_NORM, 0x03, aSTM_THINK_9},
    {aSTM_THINK_PROC_MAKE_TRAIN_BF, aSTM_THINK_INIT_MAKE_TRAIN_BF, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_MAKE_TRAIN_BF},
    {aSTM_THINK_PROC_MAKE_TRAIN, aSTM_THINK_INIT_MAKE_TRAIN, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_MAKE_TRAIN},
    {aSTM_THINK_PROC_TRAIN_ARRIVE_WAIT, aSTM_THINK_INIT_NONE, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_TRAIN_ARRIVE_WAIT},
    {aSTM_THINK_PROC_MOVE_TURN_BF, aSTM_THINK_INIT_MAKE_TRAIN, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_14},
    {aSTM_THINK_PROC_INTERRUPT_TURN, aSTM_THINK_INIT_MOVE_TURN, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_14},
    {aSTM_THINK_PROC_MOVE, aSTM_THINK_INIT_MOVE, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_MOVE},
    {aSTM_THINK_PROC_INTERRUPT_TURN, aSTM_THINK_INIT_LOOK_P, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_16},
    {aSTM_THINK_PROC_NONE, aSTM_THINK_INIT_NONE, aSTM_TALK_REQUEST_FORCE, 0x02, aSTM_THINK_IN_TRAIN},
    {aSTM_THINK_PROC_IN_TRAIN, aSTM_THINK_INIT_NONE, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_IN_TRAIN},
    {aSTM_THINK_PROC_IN_TRAIN2, aSTM_THINK_INIT_NONE, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_IN_TRAIN2},
    {aSTM_THINK_PROC_SEE_OFF, aSTM_THINK_INIT_SEE_OFF, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_SEE_OFF},
    {aSTM_THINK_PROC_LOOK_PLAYER, aSTM_THINK_INIT_GAME_END, aSTM_TALK_REQUEST_NONE, 0x00, aSTM_THINK_GAME_END},
};
// clang-format on

typedef void (*aSTM_THINK_INIT_PROC)(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play);

// clang-format off
static aSTM_THINK_INIT_PROC init_table[] = {
    (aSTM_THINK_INIT_PROC)none_proc1,
      aSTM_get_off_wait_init,
      aSTM_intro_demo_wait_init,
      aSTM_interrupt_turn_init,
      aSTM_interrupt_move_init,
      aSTM_make_train_init,
      aSTM_make_train_bf_init,
      aSTM_move_turn_init,
      aSTM_move_init,
      aSTM_look_player,
      aSTM_see_off_init,
      aSTM_game_end_init,
};
// clang-format on

static void aSTM_setup_think_proc(NPC_STATION_MASTER_ACTOR* actor, GAME_PLAY* play, u8 think_idx) {
    aSTM_think_data_c* data_p = &dt_tbl[think_idx];
    // clang-format off
    static aNPC_TALK_REQUEST_PROC talk_request_table[] = {
        (aNPC_TALK_REQUEST_PROC)none_proc1,
        aSTM_norm_talk_request,
        aSTM_force_talk_request,
    };
    // clang-format on

    actor->think_idx = think_idx;
    actor->think_proc_idx = data_p->think_proc_idx;
    actor->talk_proc_idx = data_p->talk_request_idx;
    actor->npc_class.talk_info.talk_request_proc = talk_request_table[data_p->talk_request_idx];
    actor->talk_idx = data_p->talk_idx;
    actor->next_think_idx = data_p->think_idx_after_talk;
    (*init_table[data_p->think_init_idx])(actor, play);
}

static void aSTM_think_proc(NPC_ACTOR* nactorx, GAME_PLAY* play, int type) {
    static aNPC_SUB_PROC think_proc[] = { aSTM_think_init_proc, aSTM_think_main_proc };

    (*think_proc[type])(nactorx, play);
}

static void aSTM_schedule_init_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    nactorx->think.think_proc = aSTM_think_proc;
    NPC_CLIP->think_proc(nactorx, play, aNPC_THINK_SPECIAL, aNPC_THINK_TYPE_INIT);
}

static void aSTM_schedule_main_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    if (!NPC_CLIP->think_proc(nactorx, play, -1, aNPC_THINK_TYPE_CHK_INTERRUPT)) {
        NPC_CLIP->think_proc(nactorx, play, -1, aNPC_THINK_TYPE_MAIN);
    }
}

static void aSTM_schedule_proc(NPC_ACTOR* nactorx, GAME_PLAY* play, int type) {
    static aNPC_SUB_PROC sche_proc[] = { aSTM_schedule_init_proc, aSTM_schedule_main_proc };

    (*sche_proc[type])(nactorx, play);
}
