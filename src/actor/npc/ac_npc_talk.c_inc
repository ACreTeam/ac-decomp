static int aNPC_force_call_req_proc(NPC_ACTOR* nactorx, int msg_no) {
    int ret = FALSE;

    if (nactorx->think.force_call_flag == aNPC_FORCE_CALL_NONE &&
        nactorx->condition_info.talk_condition == aNPC_TALK_TYPE_NONE && mDemo_CAN_ACTOR_TALK((ACTOR*)nactorx)) {
        nactorx->think.force_call_flag = aNPC_FORCE_CALL_REQUEST;
        nactorx->think.force_call_msg_no = msg_no;
        ret = TRUE;
    }

    return ret;
}

static void aNPC_check_manpu_demoCode(ACTOR* actorx) {
    // clang-format off
    static s16 eff_idx[43] = {
        -1,
        aNPC_ANIM_MUKA1,
        aNPC_ANIM_GAAAN1,
        aNPC_ANIM_SMILE1,
        aNPC_ANIM_HA1,
        aNPC_ANIM_PUNPUN1,
        aNPC_ANIM_A1,
        aNPC_ANIM_ASERU1,
        aNPC_ANIM_BURUBURU1,
        aNPC_ANIM_GOUKYU1,
        aNPC_ANIM_HAPPY1,
        aNPC_ANIM_HATE1,
        aNPC_ANIM_HIRAMEKI1,
        aNPC_ANIM_HYUUU1,
        aNPC_ANIM_LOVELOVE1,
        aNPC_ANIM_MUUUUU1,
        aNPC_ANIM_OTIKOMU1,
        aNPC_ANIM_SHITUREN1,
        aNPC_ANIM_WARUDAKUMI1,
        aNPC_ANIM_NEBOKE1,
        aNPC_ANIM_LOVE1,
        aNPC_ANIM_NIKO1,
        aNPC_ANIM_MUSU1,
        aNPC_ANIM_KOMARI1,
        aNPC_ANIM_SMILE_D1,
        aNPC_ANIM_GAAAN_D1,
        aNPC_ANIM_HIRAMEKI_D1,
        aNPC_ANIM_HA_D1,
        aNPC_ANIM_MUSU_D1,
        aNPC_ANIM_NIKO_D1,
        aNPC_ANIM_KOMARI_D1,
        aNPC_ANIM_HATE_D1,
        aNPC_ANIM_KEIREI1,
        aNPC_ANIM_PUNPUN_R1,
        aNPC_ANIM_MUSU_R1,
        aNPC_ANIM_HYUUU_R1,
        aNPC_ANIM_A_R1,
        aNPC_ANIM_AKIRERU_R1,
        aNPC_ANIM_MATAROU_R1,
        aNPC_ANIM_GEKIDO_R1,
        aNPC_ANIM_HA_E1,
        aNPC_ANIM_KIEEEEI1,
        aNPC_ANIM_A2_R1,
    };
    // clang-format on

    // clang-format off
    static s16 eff_idx2[43] = {
        -1,
        aNPC_ANIM_MUKA2,
        aNPC_ANIM_GAAAN2,
        aNPC_ANIM_SMILE2,
        aNPC_ANIM_HA2,
        aNPC_ANIM_PUNPUN2,
        aNPC_ANIM_A2,
        aNPC_ANIM_ASERU2,
        aNPC_ANIM_BURUBURU2,
        aNPC_ANIM_GOUKYU2,
        aNPC_ANIM_HAPPY2,
        aNPC_ANIM_HATE2,
        aNPC_ANIM_HIRAMEKI2,
        aNPC_ANIM_HYUUU2,
        aNPC_ANIM_LOVELOVE2,
        aNPC_ANIM_MUUUUU2,
        aNPC_ANIM_OTIKOMU2,
        aNPC_ANIM_SHITUREN2,
        aNPC_ANIM_WARUDAKUMI2,
        aNPC_ANIM_NEBOKE2,
        aNPC_ANIM_LOVE2,
        aNPC_ANIM_NIKO1,
        aNPC_ANIM_MUSU1,
        aNPC_ANIM_KOMARI1,
        aNPC_ANIM_SMILE_D2,
        aNPC_ANIM_GAAAN_D2,
        aNPC_ANIM_HIRAMEKI_D2,
        aNPC_ANIM_HA_D2,
        aNPC_ANIM_MUSU_D1,
        aNPC_ANIM_NIKO_D1,
        aNPC_ANIM_KOMARI_D1,
        aNPC_ANIM_HATE_D2,
        aNPC_ANIM_KEIREI1,
        aNPC_ANIM_PUNPUN_R2,
        aNPC_ANIM_MUSU_R1,
        aNPC_ANIM_HYUUU_R2,
        aNPC_ANIM_A_R2,
        aNPC_ANIM_AKIRERU_R2,
        aNPC_ANIM_MATAROU_R2,
        aNPC_ANIM_GEKIDO_R2,
        aNPC_ANIM_HA_E2,
        aNPC_ANIM_KIEEEEI2,
        aNPC_ANIM_A_R2,
    };
    // clang-format on

    // clang-format off
    static s16 eff_idx_f[43] = {
        -1,
        aNPC_ANIM_MUKA1,
        aNPC_ANIM_GAAAN1,
        aNPC_ANIM_SMILE_F1,
        aNPC_ANIM_HA_F1,
        aNPC_ANIM_PUNPUN1,
        aNPC_ANIM_A_F1,
        aNPC_ANIM_ASERU_F1,
        aNPC_ANIM_BURUBURU1,
        aNPC_ANIM_GOUKYU1,
        aNPC_ANIM_HAPPY_F1,
        aNPC_ANIM_HATE_F1,
        aNPC_ANIM_HIRAMEKI1,
        aNPC_ANIM_HYUUU1,
        aNPC_ANIM_LOVELOVE_F1,
        aNPC_ANIM_MUUUUU_F1,
        aNPC_ANIM_OTIKOMU1,
        aNPC_ANIM_SHITUREN1,
        aNPC_ANIM_WARUDAKUMI1,
        aNPC_ANIM_NEBOKE1,
        aNPC_ANIM_LOVE1,
        aNPC_ANIM_NIKO_F1,
        aNPC_ANIM_MUSU_F1,
        aNPC_ANIM_KOMARI_F1,
        aNPC_ANIM_SMILE_D1,
        aNPC_ANIM_GAAAN_D1,
        aNPC_ANIM_HIRAMEKI_D1,
        aNPC_ANIM_HA_D1,
        aNPC_ANIM_MUSU_D1,
        aNPC_ANIM_NIKO_D1,
        aNPC_ANIM_KOMARI_D1,
        aNPC_ANIM_HATE_D1,
        aNPC_ANIM_KEIREI1,
        aNPC_ANIM_PUNPUN_R1,
        aNPC_ANIM_MUSU_R1,
        aNPC_ANIM_HYUUU_R1,
        aNPC_ANIM_A_R1,
        aNPC_ANIM_AKIRERU_R1,
        aNPC_ANIM_MATAROU_R1,
        aNPC_ANIM_GEKIDO_R1,
        aNPC_ANIM_HA_E1,
        aNPC_ANIM_KIEEEEI1,
        aNPC_ANIM_A2_R1,
    };
    // clang-format on

    // clang-format off
    static s16 eff_idx_f2[43] = {
        -1,
        aNPC_ANIM_MUKA2,
        aNPC_ANIM_GAAAN2,
        aNPC_ANIM_SMILE_F2,
        aNPC_ANIM_HA_F2,
        aNPC_ANIM_PUNPUN2,
        aNPC_ANIM_A_F2,
        aNPC_ANIM_ASERU_F2,
        aNPC_ANIM_BURUBURU2,
        aNPC_ANIM_GOUKYU2,
        aNPC_ANIM_HAPPY_F2,
        aNPC_ANIM_HATE_F2,
        aNPC_ANIM_HIRAMEKI2,
        aNPC_ANIM_HYUUU2,
        aNPC_ANIM_LOVELOVE_F2,
        aNPC_ANIM_MUUUUU_F2,
        aNPC_ANIM_OTIKOMU2,
        aNPC_ANIM_SHITUREN2,
        aNPC_ANIM_WARUDAKUMI2,
        aNPC_ANIM_NEBOKE2,
        aNPC_ANIM_LOVE2,
        aNPC_ANIM_NIKO_F1,
        aNPC_ANIM_MUSU_F1,
        aNPC_ANIM_KOMARI_F1,
        aNPC_ANIM_SMILE_D2,
        aNPC_ANIM_GAAAN_D2,
        aNPC_ANIM_HIRAMEKI_D2,
        aNPC_ANIM_HA_D2,
        aNPC_ANIM_MUSU_D1,
        aNPC_ANIM_NIKO_D1,
        aNPC_ANIM_KOMARI_D1,
        aNPC_ANIM_HATE_D2,
        aNPC_ANIM_KEIREI1,
        aNPC_ANIM_PUNPUN_R2,
        aNPC_ANIM_MUSU_R1,
        aNPC_ANIM_HYUUU_R2,
        aNPC_ANIM_A_R2,
        aNPC_ANIM_AKIRERU_R2,
        aNPC_ANIM_MATAROU_R2,
        aNPC_ANIM_GEKIDO_R2,
        aNPC_ANIM_HA_E2,
        aNPC_ANIM_KIEEEEI2,
        aNPC_ANIM_A_R2,
    };
    // clang-format on

    // clang-format off
    static s16 eff_idx_i[43] = {
        -1,
        aNPC_ANIM_MUKA1,
        aNPC_ANIM_GAAAN1,
        aNPC_ANIM_SMILE1,
        aNPC_ANIM_HA_I1,
        aNPC_ANIM_PUNPUN1,
        aNPC_ANIM_A1,
        aNPC_ANIM_ASERU_I1,
        aNPC_ANIM_BURUBURU1,
        aNPC_ANIM_GOUKYU1,
        aNPC_ANIM_HAPPY_I1,
        aNPC_ANIM_HATE_I1,
        aNPC_ANIM_HIRAMEKI1,
        aNPC_ANIM_HYUUU1,
        aNPC_ANIM_LOVELOVE1,
        aNPC_ANIM_MUUUUU_I1,
        aNPC_ANIM_OTIKOMU1,
        aNPC_ANIM_SHITUREN_I1,
        aNPC_ANIM_WARUDAKUMI1,
        aNPC_ANIM_NEBOKE1,
        aNPC_ANIM_LOVE_I1,
        aNPC_ANIM_NIKO_I1,
        aNPC_ANIM_MUSU_I1,
        aNPC_ANIM_KOMARI_I1,
        aNPC_ANIM_SMILE_D1,
        aNPC_ANIM_GAAAN_D1,
        aNPC_ANIM_HIRAMEKI_D1,
        aNPC_ANIM_HA_D1,
        aNPC_ANIM_MUSU_D1,
        aNPC_ANIM_NIKO_D1,
        aNPC_ANIM_KOMARI_D1,
        aNPC_ANIM_HATE_D1,
        aNPC_ANIM_KEIREI1,
        aNPC_ANIM_PUNPUN_R1,
        aNPC_ANIM_MUSU_R1,
        aNPC_ANIM_HYUUU_R1,
        aNPC_ANIM_A_R1,
        aNPC_ANIM_AKIRERU_R1,
        aNPC_ANIM_MATAROU_R1,
        aNPC_ANIM_GEKIDO_R1,
        aNPC_ANIM_HA_E1,
        aNPC_ANIM_KIEEEEI1,
        aNPC_ANIM_A2_R1,
    };
    // clang-format on

    // clang-format off
    static s16 eff_idx_i2[43] = {
        -1,
        aNPC_ANIM_MUKA2,
        aNPC_ANIM_GAAAN2,
        aNPC_ANIM_SMILE2,
        aNPC_ANIM_HA_I2,
        aNPC_ANIM_PUNPUN2,
        aNPC_ANIM_A2,
        aNPC_ANIM_ASERU_I2,
        aNPC_ANIM_BURUBURU2,
        aNPC_ANIM_GOUKYU2,
        aNPC_ANIM_HAPPY_I2,
        aNPC_ANIM_HATE_I2,
        aNPC_ANIM_HIRAMEKI2,
        aNPC_ANIM_HYUUU2,
        aNPC_ANIM_LOVELOVE2,
        aNPC_ANIM_MUUUUU_I2,
        aNPC_ANIM_OTIKOMU2,
        aNPC_ANIM_SHITUREN_I2,
        aNPC_ANIM_WARUDAKUMI2,
        aNPC_ANIM_NEBOKE2,
        aNPC_ANIM_LOVE_I2,
        aNPC_ANIM_NIKO_I1,
        aNPC_ANIM_MUSU_I1,
        aNPC_ANIM_KOMARI_I1,
        aNPC_ANIM_SMILE_D2,
        aNPC_ANIM_GAAAN_D2,
        aNPC_ANIM_HIRAMEKI_D2,
        aNPC_ANIM_HA_D2,
        aNPC_ANIM_MUSU_D1,
        aNPC_ANIM_NIKO_D1,
        aNPC_ANIM_KOMARI_D1,
        aNPC_ANIM_HATE_D2,
        aNPC_ANIM_KEIREI1,
        aNPC_ANIM_PUNPUN_R2,
        aNPC_ANIM_MUSU_R1,
        aNPC_ANIM_HYUUU_R2,
        aNPC_ANIM_A_R2,
        aNPC_ANIM_AKIRERU_R2,
        aNPC_ANIM_MATAROU_R2,
        aNPC_ANIM_GEKIDO_R2,
        aNPC_ANIM_HA_E2,
        aNPC_ANIM_KIEEEEI2,
        aNPC_ANIM_A_R2,
    };
    // clang-format on

    NPC_ACTOR* nactorx = (NPC_ACTOR*)actorx;
    int order = mDemo_Get_OrderValue(mDemo_ORDER_NPC0, 0);
    int last_order = nactorx->talk_info.demo_code;
    s16* eff_idx_p;
    s16* eff_idx2_p;

    if (nactorx->left_hand.item == EMPTY_NO) {
        eff_idx_p = eff_idx;
        eff_idx2_p = eff_idx2;
    } else if (ITEM_IS_FISH(nactorx->left_hand.item) == TRUE) {
        eff_idx_p = eff_idx_f;
        eff_idx2_p = eff_idx_f2;
    } else {
        eff_idx_p = eff_idx_i;
        eff_idx2_p = eff_idx_i2;
    }

    if (order != 0) {
        int seqNo;
        int talk = TRUE;

        if (order == aNPC_MANPU_CODE_RESET) {
            seqNo = aNPC_ANIM_TALK1;
        } else if (order == aNPC_MANPU_CODE_RESET_SIT) {
            seqNo = aNPC_ANIM_SITDOWN_WAIT_D1;
        } else if (order == aNPC_MANPU_CODE_RESET_KEKE) {
            seqNo = aNPC_ANIM_WAIT_E1;
        } else {
            seqNo = eff_idx_p[order];
            talk = FALSE;
        }

        aNPC_Animation_init(actorx, seqNo, talk);
        nactorx->talk_info.demo_code = order;
    } else if (last_order != aNPC_MANPU_CODE_NONE && nactorx->draw.animation_id == eff_idx_p[last_order] &&
               nactorx->draw.main_animation_state == cKF_STATE_STOPPED) {
        aNPC_Animation_init(actorx, eff_idx2_p[last_order], FALSE);
    }

    mDemo_Set_OrderValue(mDemo_ORDER_NPC0, 0, 0);
}

static void aNPC_clear_timing_demoCode(int type) {
    if (type == 0) {
        mDemo_Set_OrderValue(mDemo_ORDER_NPC0, 1, 0);
    } else {
        mDemo_Set_OrderValue(mDemo_ORDER_NPC0, 3, 0);
    }

    mDemo_Set_OrderValue(mDemo_ORDER_NPC1, 0, 0);
    mDemo_Set_OrderValue(mDemo_ORDER_NPC1, 1, 0);
    mDemo_Set_OrderValue(mDemo_ORDER_NPC1, 2, 0);
}

static int aNPC_check_timing_demoCode(ACTOR* actorx) {
    NPC_ACTOR* nactorx = (NPC_ACTOR*)actorx;
    int order = mDemo_Get_OrderValue(mDemo_ORDER_NPC0, 3);
    int type = 1;
    int ret = TRUE;

    switch (order) {
        default:
            order = mDemo_Get_OrderValue(mDemo_ORDER_NPC0, 1);
            type = 0;
            break;
        case 2:
        case 3:
            break;
    }

    switch (order) {
        case 3:
        case 5: {
            u16 args[aNPC_REQUEST_ARG_NUM];

            bzero(args, sizeof(args));
            args[0] = mDemo_Get_OrderValue(mDemo_ORDER_NPC1, 0);
            if (aNPC_set_request_act(nactorx, 4, aNPC_ACT_GET, aNPC_ACT_TYPE_DEFAULT, args) == TRUE) {
                aNPC_clear_timing_demoCode(type);
                ret = FALSE;
            }
            break;
        }
        case 2:
        case 4: {
            u16 args[aNPC_REQUEST_ARG_NUM];

            bzero(args, sizeof(args));
            args[0] = mDemo_Get_OrderValue(mDemo_ORDER_NPC1, 0);
            args[1] = mDemo_Get_OrderValue(mDemo_ORDER_NPC1, 1);
            args[2] = mDemo_Get_OrderValue(mDemo_ORDER_NPC1, 2);
            if (aNPC_set_request_act(nactorx, 4, aNPC_ACT_TRANS, aNPC_ACT_TYPE_DEFAULT, args) == TRUE) {
                aNPC_clear_timing_demoCode(type);
                ret = FALSE;
            }
            break;
        }
        case 15: {
            if (aNPC_set_request_act(nactorx, 4, aNPC_ACT_CHANGE_CLOTH, aNPC_ACT_TYPE_DEFAULT, aNPC_req_default_data) == TRUE) {
                Common_Set(npc_chg_cloth, Now_Private->cloth.item);
                aNPC_clear_timing_demoCode(type);
                ret = FALSE;
            }
            break;
        }
    }

    return ret;
}

static void aNPC_check_feel_demoCode(ACTOR* actorx) {
    int order = mDemo_Get_OrderValue(mDemo_ORDER_NPC0, 2);
    NPC_ACTOR* nactorx = (NPC_ACTOR*)actorx;

    if (order != 0) {
        int timer = mDemo_Get_OrderValue(mDemo_ORDER_NPC0, 8);

        if (order >= mNpc_FEEL_ALL_NUM) {
            mDemo_Set_OrderValue(mDemo_ORDER_NPC0, 2, 0);
            mDemo_Set_OrderValue(mDemo_ORDER_NPC0, 8, 0);
            return;
        }

        switch (order) {
            case mNpc_FEEL_6:
                break;
            case mNpc_FEEL_PITFALL:
                order = mNpc_FEEL_NORMAL;
                break;
            case mNpc_FEEL_UZAI_0:
                order = aNPC_uzai_feel[mNpc_GetNpcLooks(actorx)];
                break;
        }

        aNPC_set_feel_info(nactorx, order, timer);
        mDemo_Set_OrderValue(mDemo_ORDER_NPC0, 2, 0);
        mDemo_Set_OrderValue(mDemo_ORDER_NPC0, 8, 0);
    }
}

static void aNPC_setup_talk_start(NPC_ACTOR* nactorx, GAME* game) {
    ACTOR* playerx = GET_PLAYER_ACTOR_GAME_ACTOR(game);

    nactorx->palActor = playerx;
    if (nactorx->talk_info.turn == aNPC_TALK_TURN_NORMAL) {
        aNPC_set_dst_pos(nactorx, playerx->world.position.x, playerx->world.position.z);
        nactorx->movement.mv_angl -= nactorx->_174.y;
    }

    nactorx->request.umb_flag = FALSE;
    nactorx->condition_info.greeting_flag = FALSE;
    nactorx->condition_info.talk_condition = aNPC_TALK_TYPE_START;
    nactorx->condition_info.talk_demo_flg_save = nactorx->condition_info.demo_flg;
}

static void aNPC_setup_talk_end(NPC_ACTOR* nactorx) {
    nactorx->palActor = NULL;
    if (nactorx->palActorIgnoreTimer >= 0) {
        nactorx->palActorIgnoreTimer = 600;
    }
    nactorx->condition_info.talk_condition = aNPC_TALK_TYPE_NONE;
    if (nactorx->think.force_call_flag != aNPC_FORCE_CALL_NONE) {
        nactorx->think.force_call_timer = 300;
        nactorx->think.force_call_flag = aNPC_FORCE_CALL_NONE;
    }
    nactorx->talk_info.feel = 0xFF;
    nactorx->condition_info.demo_flg = nactorx->condition_info.talk_demo_flg_save;
}

static void aNPC_set_talk_info_talk_request_check(ACTOR* actorx) {
    NPC_ACTOR* nactorx = (NPC_ACTOR*)actorx;
    int msg_no;

    if (mNpc_CheckIslandAnimal(nactorx->npc_info.animal) == TRUE) {
        msg_no = 0x34AC + nactorx->npc_info.animal->id.looks * 3 + RANDOM(3);
    } else {
        msg_no = 0x075F + nactorx->npc_info.animal->id.looks * 3 + RANDOM(3);
    }

    mDemo_Set_msg_num(msg_no);
    nactorx->think.force_call_flag = aNPC_FORCE_CALL_SET;
}

static void aNPC_talk_request_event_npc(ACTOR* actorx, GAME* game) {
    NPC_ACTOR* nactorx = (NPC_ACTOR*)actorx;

    if ((mDemo_Check(mDemo_TYPE_SPEAK, actorx) == TRUE || mDemo_Check(mDemo_TYPE_SPEECH, actorx) == TRUE ||
         mDemo_Check(mDemo_TYPE_TALK, actorx) == TRUE) &&
        !mDemo_Check_ListenAble()) {
        aNPC_setup_talk_start(nactorx, game);
    } else {
        GAME_PLAY* play = (GAME_PLAY*)game;

        if (play->submenu.process_status == mSM_PROCESS_WAIT && play->submenu.wait_timer == 0) {
            if (nactorx->talk_info.talk_request_proc != NULL) {
                (*nactorx->talk_info.talk_request_proc)(actorx, game);
            } else {
                mDemo_Request(mDemo_TYPE_TALK, actorx, NULL);
            }
        }
    }
}

static int aNPC_normal_talk_request(ACTOR* actorx, GAME* game) {
    NPC_ACTOR* nactorx = (NPC_ACTOR*)actorx;
    int ret = FALSE;

    if (CLIP(quest_manager_clip)->talk_request_proc != NULL &&
        CLIP(quest_manager_clip)->talk_request_proc(actorx) == TRUE) {
        nactorx->think.force_call_flag = aNPC_FORCE_CALL_NONE;
        aNPC_setup_talk_start(nactorx, game);
        ret = TRUE;
    }

    return ret;
}

static void aNPC_set_talk_info_force_call(ACTOR* actorx) {
    NPC_ACTOR* nactorx = (NPC_ACTOR*)actorx;

    mDemo_Set_msg_num(nactorx->think.force_call_msg_no);
    mDemo_Set_camera(nactorx->think.force_call_camera_type);
    nactorx->think.force_call_msg_no = -1;
    nactorx->think.force_call_camera_type = CAMERA2_PROCESS_NORMAL;
    nactorx->think.force_call_flag = aNPC_FORCE_CALL_SET;
}

static int aNPC_force_talk_request(ACTOR* actorx) {
    NPC_ACTOR* nactorx = (NPC_ACTOR*)actorx;
    s8* friendship_p = nactorx->condition_info.friendship;
    int ret = FALSE;

    if (nactorx->think.force_call_msg_no != -1) {
        mDemo_Request(mDemo_TYPE_SPEAK, actorx, &aNPC_set_talk_info_force_call);
        ret = TRUE;
    } else if (friendship_p != NULL) {
        int friendship = *friendship_p + nactorx->condition_info.over_friendship;

        if (friendship > 0x80 && nactorx->action.type == aNPC_ACT_TYPE_SEARCH &&
            nactorx->action.act_obj == aNPC_ACT_OBJ_PLAYER && nactorx->think.force_call_timer == 0 &&
            actorx->player_distance_xz < 80.0f && ABS(actorx->player_distance_y) < 60.0f) {
            mDemo_Request(mDemo_TYPE_SPEAK, actorx, &aNPC_set_talk_info_talk_request_check);
            ret = TRUE;
        }
    }

    return ret;
}

static void aNPC_talk_request_normal_npc(ACTOR* actorx, GAME* game) {
    NPC_ACTOR* nactorx = (NPC_ACTOR*)actorx;

    if (mDemo_Check(mDemo_TYPE_TALK, actorx) == TRUE) {
        nactorx->think.force_call_flag = aNPC_FORCE_CALL_NONE;
    }

    switch (nactorx->think.force_call_flag) {
        case aNPC_FORCE_CALL_NONE:
            aNPC_normal_talk_request(actorx, game);
            break;
        case aNPC_FORCE_CALL_REQUEST:
            if (!aNPC_force_talk_request(actorx) && aNPC_normal_talk_request(actorx, game) == TRUE) {
                nactorx->think.force_call_flag = aNPC_FORCE_CALL_NONE;
            }
            break;
        case aNPC_FORCE_CALL_SET:
            if (mDemo_Check(mDemo_TYPE_SPEAK, actorx) == TRUE) {
                aNPC_setup_talk_start(nactorx, game);
                nactorx->think.force_call_flag = aNPC_FORCE_CALL_START;
            }
            break;
    }
}

static void aNPC_talk_request_check(ACTOR* actorx, GAME* game) {
    NPC_ACTOR* nactorx = (NPC_ACTOR*)actorx;

    if ((nactorx->condition_info.demo_flg & aNPC_COND_DEMO_SKIP_TALK_CHECK) == 0 &&
        nactorx->condition_info.talk_condition == aNPC_TALK_TYPE_NONE && !nactorx->condition_info.hide_flg) {
        if (mEv_CheckTitleDemo() == 0 || mEv_CheckTitleDemo() == -9) {
            if (nactorx->action.idx != aNPC_ACT_TALK) {
                if (ITEM_NAME_GET_TYPE(actorx->npc_id) == NAME_TYPE_SPNPC &&
                    (nactorx->npc_info.animal == NULL || nactorx->npc_info.animal->mood != mNpc_FEEL_PITFALL)) {
                    aNPC_talk_request_event_npc(actorx, game);
                } else {
                    aNPC_talk_request_normal_npc(actorx, game);
                }
            }
        }
    }
}
