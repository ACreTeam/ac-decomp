static u8 aNCM_get_zone_sub(u8 zone, f32 pos_z, int type) {
    static f32 chk[][2] = { { 140.0f, 220.0f }, { 120.0f, 200.0f } };
    int i;

    for (i = 0; i < 2; i++) {
        if (pos_z < chk[type][i]) {
            break;
        }
    }

    return zone + i;
}

static u8 aNCM_get_zone(xyz_t wpos) {
    u8 zone;
    int type = 0;

    if (wpos.x < 240.0f) {
        if (wpos.x < 80.0f) {
            zone = 0;
        } else {
            zone = 3;
        }
    } else {
        if (wpos.x < 360.0f) {
            zone = 6;
        } else {
            zone = 9;
            type = 1;
        }
    }

    return aNCM_get_zone_sub(zone, wpos.z, type);
}

static u8 aNCM_get_next_zone(u8 p1, u8 p2) {
    static u8 next_zone[12][12] = {
        { 0x00, 0x01, 0x01, 0x03, 0x01, 0x01, 0x03, 0x01, 0x01, 0x03, 0x01, 0x01 },
        { 0x00, 0x01, 0x02, 0x00, 0x04, 0x02, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 },
        { 0x01, 0x01, 0x02, 0x01, 0x01, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05 },
        { 0x00, 0x00, 0x00, 0x03, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06 },
        { 0x01, 0x01, 0x01, 0x07, 0x04, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07 },
        { 0x02, 0x02, 0x02, 0x08, 0x08, 0x05, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 },
        { 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x06, 0x07, 0x07, 0x09, 0x07, 0x07 },
        { 0x04, 0x04, 0x04, 0x06, 0x04, 0x08, 0x06, 0x07, 0x08, 0x06, 0x0A, 0x0A },
        { 0x05, 0x05, 0x05, 0x07, 0x07, 0x05, 0x07, 0x07, 0x08, 0x07, 0x07, 0x07 },
        { 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06 },
        { 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0B },
        { 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },
    };

    return next_zone[p2][p1];
}

static void aNCM_search_player(NPC_CONV_MASTER_ACTOR* conv_master, GAME_PLAY* play) {
    ACTOR* actorx = (ACTOR*)conv_master;
    ACTOR* player = GET_PLAYER_ACTOR_ACTOR(play);

    if (player != NULL) {
        s16 angle = actorx->shape_info.rotation.y - conv_master->player_angle;
        if (ABS(angle) > DEG2SHORT_ANGLE(90.0f)) {
            aNSC_setupAction(conv_master, play, 66);
        } else {
            chase_angle(&actorx->shape_info.rotation.y, conv_master->player_angle, DEG2SHORT_ANGLE(11.25f));
            actorx->world.angle.y = actorx->shape_info.rotation.y;
        }
    }
}

static void aNCM_search_player2(NPC_CONV_MASTER_ACTOR* conv_master, GAME_PLAY* play) {
    static float posX[12] = {
        60.0f, 60.0f, 60.0f, 160.0f, 160.0f, 160.0f, 300.0f, 300.0f, 300.0f, 420.0f, 420.0f, 420.0f,
    };

    static float posZ[12] = {
        100.0f, 180.0f, 260.0f, 100.0f, 180.0f, 260.0f, 100.0f, 180.0f, 260.0f, 100.0f, 180.0f, 240.0f,
    };

    PLAYER_ACTOR* player = GET_PLAYER_ACTOR(play);
    if (player != NULL) {
        f32 dx = posX[conv_master->next_zone] - conv_master->npc_class.actor_class.world.position.x;
        f32 dz = posZ[conv_master->next_zone] - conv_master->npc_class.actor_class.world.position.z;

        s16 angle = atans_table(dz, dx);
        chase_angle(&conv_master->npc_class.actor_class.shape_info.rotation.y, angle, DEG2SHORT_ANGLE(11.25f));

        conv_master->npc_class.actor_class.world.angle.y = conv_master->npc_class.actor_class.shape_info.rotation.y;

        if (SQ(dx) + SQ(dz) < 200.0f) {
            conv_master->next_zone = aNCM_get_next_zone(conv_master->player_zone, conv_master->zone);
        }
    }
}

static int aNCM_check_safe_zone(NPC_CONV_MASTER_ACTOR* conv_master, ACTOR* player) {
    int res = FALSE;
    if (player->world.position.z > 280.0f && conv_master->zone == 8) {
        res = TRUE;
    }
    return res;
}

#define aNSC_get_zone aNCM_get_zone
#define aNSC_get_next_zone aNCM_get_next_zone
#define aNSC_check_safe_zone aNCM_check_safe_zone
#define aNSC_search_player aNCM_search_player
#define aNSC_search_player2 aNCM_search_player2
#define aNSC_ANIME_FILE "../src/actor/npc/ac_npc_conv_master_anime.c"
#define aNSC_POS_Z_MAX 260.0f

#include "../src/actor/npc/ac_npc_shop_common.c"

#undef aNSC_get_zone
#undef aNSC_get_next_zone
#undef aNSC_check_safe_zone
#undef aNSC_search_player
#undef aNSC_search_player2
#undef aNSC_ANIME_FILE
#undef aNSC_POS_Z_MAX

void aNCM_actor_move(ACTOR* actorx, GAME* game) {
    NPC_CONV_MASTER_ACTOR* conv_master = (NPC_CONV_MASTER_ACTOR*)actorx;
    GAME_PLAY* play = (GAME_PLAY*)game;
    PLAYER_ACTOR* player = GET_PLAYER_ACTOR(play);
    CLIP(npc_clip)->move_before_proc(actorx, game);
    aNSC_BGcheck(actorx);
    aNSC_set_zone_data(conv_master, (ACTOR*)player);
    aNSC_set_player_angl(conv_master);
    (*conv_master->proc)(conv_master, play);
    aNSC_talk_demo_proc(actorx);
    CLIP(npc_clip)->move_after_proc(actorx, game);
    aNSC_sell_camera(conv_master, play);
}
