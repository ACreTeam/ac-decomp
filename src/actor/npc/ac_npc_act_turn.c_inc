enum {
    aNPC_ACT_TURN_STEP_MAIN,

    aNPC_ACT_TURN_STEP_NUM
};

typedef int (*aNPC_ACT_TURN_PROC)(NPC_ACTOR* nactorx);

static void aNPC_act_turn_main_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    static aNPC_ACT_TURN_PROC act_proc[] = {
        &aNPC_act_turn,
        &aNPC_act_turn,
        &aNPC_act_search_turn,
        &aNPC_act_to_point_turn,
    };

    if (!(*act_proc[nactorx->action.type])(nactorx)) {
        nactorx->action.step = aNPC_ACTION_END_STEP;
    }
}

static void aNPC_act_turn_chg_data_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    u16* arg_p = nactorx->request.act_args;
    s16 prev_move_x = nactorx->action.move_x;
    s16 prev_move_z = nactorx->action.move_z;

    nactorx->action.act_obj = arg_p[0];
    nactorx->action.act_obj_id = arg_p[1];
    nactorx->action.move_x = arg_p[2];
    nactorx->action.move_z = arg_p[3];

    if (nactorx->action.step == aNPC_ACTION_END_STEP &&
        (nactorx->action.move_x != prev_move_x || nactorx->action.move_z != prev_move_z ||
         nactorx->action.type == aNPC_ACT_TYPE_SEARCH)) {
        nactorx->action.step = aNPC_ACT_TURN_STEP_MAIN;
    }
}

static void aNPC_act_turn_init_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    u8 action;

    nactorx->action.step = aNPC_ACT_TURN_STEP_MAIN;
    if (nactorx->action.type == aNPC_ACT_TYPE_AVOID) {
        aNPC_set_avoid_pos(nactorx, nactorx->action.move_x, nactorx->action.move_z, nactorx->request.act_args[4]);
    } else {
        aNPC_set_dst_pos(nactorx, nactorx->action.move_x, nactorx->action.move_z);
    }

    if (nactorx->action.idx == aNPC_ACT_TURN) {
        action = 13;
    } else {
        action = 14;
    }

    aNPC_setupAction(nactorx, action);
}

static void aNPC_act_turn_proc(NPC_ACTOR* nactorx, GAME_PLAY* play, int type) {
    static aNPC_SUB_PROC act_proc[] = {
        &aNPC_act_turn_init_proc,
        &aNPC_act_turn_chg_data_proc,
        &aNPC_act_turn_main_proc,
    };

    (*act_proc[type])(nactorx, play);
}
