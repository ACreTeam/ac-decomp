enum {
    aNPC_SCHEDULE_FIELD_STEP_LEAVE_HOUSE,
    aNPC_SCHEDULE_FIELD_STEP_WANDER,
    aNPC_SCHEDULE_FIELD_STEP_IN_BLOCK,
    aNPC_SCHEDULE_FIELD_STEP_PITFALL,

    aNPC_SCHEDULE_FIELD_STEP_NUM
};

static void aNPC_field_schedule_think_init(NPC_ACTOR* nactorx, GAME_PLAY* play, u8 step) {
    static int think_idx[] = { aNPC_THINK_LEAVE_HOUSE, aNPC_THINK_WANDER, aNPC_THINK_IN_BLOCK, aNPC_THINK_PITFALL };
    static u8 hide_flg[] = { TRUE, FALSE, FALSE, FALSE };
    
    nactorx->schedule.step = step;
    aNPC_think_init_proc(nactorx, play, think_idx[step]);
    aNPC_set_hide_flg(nactorx, hide_flg[step]);
}

static void aNPC_field_schedule_main_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    aNPC_think_main_proc(nactorx, play);
    if (nactorx->think.end_flag == TRUE) {
        u8 step;

        switch (nactorx->schedule.step) {
            case aNPC_SCHEDULE_FIELD_STEP_WANDER:
                step = aNPC_SCHEDULE_FIELD_STEP_PITFALL;
                break;
            default:
                step = aNPC_SCHEDULE_FIELD_STEP_WANDER;
                break;
        }

        aNPC_field_schedule_think_init(nactorx, play, step);
    } else {
        switch (nactorx->npc_info.schedule->current_type) {
            case mNPS_SCHED_IN_HOUSE:
                if (aNPC_check_home_block(nactorx) == TRUE && aNPC_check_chg_schedule(nactorx, aNPC_SCHEDULE_FIELD_STEP_WANDER) == TRUE) {
                    aNPC_set_schedule(nactorx, play);
                }
                break;
            default:
                if (aNPC_check_chg_schedule(nactorx, aNPC_SCHEDULE_FIELD_STEP_WANDER) == TRUE) {
                    aNPC_set_schedule(nactorx, play);
                }
        }
    }
}

static void aNPC_field_schedule_init_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    u8 step = aNPC_SCHEDULE_FIELD_STEP_LEAVE_HOUSE;

    if (nactorx->condition_info.appear_flag == 1) {
        nactorx->condition_info.appear_flag = 0;
        step = aNPC_SCHEDULE_FIELD_STEP_IN_BLOCK;
    } else {
        if (aNPC_GET_ANM(nactorx) != NULL) {
            if (aNPC_GET_ANM(nactorx)->is_home == FALSE) {
                step = aNPC_SCHEDULE_FIELD_STEP_WANDER;
            }
        } else {
            step = aNPC_SCHEDULE_FIELD_STEP_WANDER;
        }
    }

    nactorx->schedule.step = step;
    aNPC_field_schedule_think_init(nactorx, play, step);
}

static void aNPC_field_schedule_proc(NPC_ACTOR* nactorx, GAME_PLAY* play, int proc_type) {
    static aNPC_SUB_PROC sche_proc[] = {
        &aNPC_field_schedule_init_proc,
        &aNPC_field_schedule_main_proc,
    };

    (*sche_proc[proc_type])(nactorx, play);
}
