// clang-format off
static u8 aNPC_wait_action[] = {
    aNPC_ACTION_TYPE_WAIT,
    aNPC_ACTION_TYPE_WAIT_KI,
    aNPC_ACTION_TYPE_WAIT_DO,
    aNPC_ACTION_TYPE_WAIT_AI,
    aNPC_ACTION_TYPE_WAIT_NEMU,
    aNPC_ACTION_TYPE_WAIT,
    aNPC_ACTION_TYPE_WAIT_DO,
    aNPC_ACTION_TYPE_WAIT_AI,
    aNPC_ACTION_TYPE_WAIT_DO,
};
// clang-format on

static void aNPC_set_be_out_home(NPC_ACTOR* nactorx) {
    mNpc_NpcList_c* list_p;

    aNPC_GET_ANM(nactorx)->is_home = FALSE;
    list_p = nactorx->npc_info.list;
    list_p->position.x = list_p->house_position.x + mFI_UT_WORLDSIZE_HALF_X_F;
    list_p->position.y = list_p->house_position.y;
    list_p->position.z = list_p->house_position.z + mFI_UT_WORLDSIZE_HALF_Z_F;
}

static int aNPC_check_arrive_destination(NPC_ACTOR* nactorx) {
    f32 range = nactorx->movement.arrival_area_radius;
    f32 dist;
    f32 distX = nactorx->movement.avoid_pos_x - nactorx->actor_class.world.position.x;
    f32 distZ = nactorx->movement.avoid_pos_z - nactorx->actor_class.world.position.z;
    int ret = FALSE;

    dist = SQ(distX) + SQ(distZ);
    if (dist < range) {
        ret = TRUE;
    }

    return ret;
}

static int aNPC_trace_route(NPC_ACTOR* nactorx) {
    int ret = TRUE;

    if (aNPC_check_arrive_destination(nactorx) == TRUE) {
        switch (nactorx->schedule.type) {
            case aNPC_SCHEDULE_TYPE_FIELD:
            case aNPC_SCHEDULE_TYPE_IN_HOUSE:
            case aNPC_SCHEDULE_TYPE_WANDER: {
                NPC_CONTROL_ACTOR* ctrl = (NPC_CONTROL_ACTOR*)aNPC_ctrlActor;
                aNPC_unit_info_c* route = ctrl->route + nactorx->movement.avoid_direction;

                aNPC_set_avoid_pos(nactorx, (route->x + 1.5f) * mFI_UT_WORLDSIZE_X_F, (route->z + 1.5f) * mFI_UT_WORLDSIZE_Z_F);
                if (ctrl->route_node_count == nactorx->movement.avoid_direction) {
                    aNPC_set_dst_pos(nactorx, nactorx->movement.avoid_pos_x, nactorx->movement.avoid_pos_z);
                    ret = FALSE;
                } else {
                    nactorx->movement.avoid_direction++;
                }
            }
            break;

            default:
                ret = FALSE;
                break;
        }
    }
    return ret;
}

static void aNPC_set_feel_info(NPC_ACTOR* nactorx, int feel, int timer) {
    Animal_c* animal = nactorx->npc_info.animal;

    if (animal != NULL) {
        int feel_timer = nactorx->condition_info.feel_tim;

        if (feel != animal->mood) {
            animal->mood = feel;
            if (feel == mNpc_FEEL_NORMAL) {
                feel_timer = 0;
            } else {
                feel_timer = timer * FRAMES_PER_MINUTE;
            }
        } else {
            feel_timer += timer * FRAMES_PER_MINUTE;
            if (feel_timer > (10 * FRAMES_PER_MINUTE)) {
                feel_timer = 10 * FRAMES_PER_MINUTE;
            }
        }

        nactorx->condition_info.feel_tim = feel_timer;
    }
}

static void aNPC_set_act_obj(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    switch (nactorx->action.act_obj) {
        case aNPC_ACT_OBJ_PLAYER:
            nactorx->movement.target = GET_PLAYER_ACTOR_ACTOR(play);
            break;
        case aNPC_ACT_OBJ_TARGET_NPC:
            nactorx->movement.target =
                Actor_info_fgName_search(&play->actor_info, nactorx->action.act_obj_id, ACTOR_PART_NPC);
            break;
        default:
            nactorx->movement.target = NULL;
            break;
    }
}

static int aNPC_check_live_target(ACTOR* actorx) {
    int ret = TRUE;

    if (actorx == NULL || (actorx->mv_proc == NULL && actorx->dw_proc == NULL)) {
        ret = FALSE;
    }

    return ret;
}

static int aNPC_act_wait(NPC_ACTOR* nactorx) {
    int ret = TRUE;

    if (nactorx->draw.main_animation_state == cKF_STATE_CONTINUE) {
        if (nactorx->draw.loop_flag == FALSE) {
            if (nactorx->condition_info.fatigue < 200) {
                ret = FALSE;
            }
        } else {
            nactorx->draw.loop_flag--;
        }
    }

    return ret;
}

static int aNPC_act_move(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    int ret = TRUE;

    aNPC_set_mv_angl(nactorx);
    if (aNPC_trace_route(nactorx) == FALSE) {
        ret = FALSE;
    }

    return ret;
}

static int aNPC_act_search_move(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    ACTOR* target = nactorx->movement.target;
    int ret = TRUE;

    if (!aNPC_check_live_target(target)) {
        ret = FALSE;
    } else {
        xyz_t dst_pos;
        int ux;
        int uz;

        xyz_t_move(&dst_pos, &target->world.position);
        mFI_Wpos2UtNum(&ux, &uz, dst_pos);

        aNPC_route_check(nactorx, play, ux, uz, FALSE);
        aNPC_set_mv_angl(nactorx);
        if (aNPC_trace_route(nactorx) == FALSE) {
            ret = FALSE;
        }
    }

    return ret;
}

static int aNPC_act_avoid_move(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    ACTOR* target = nactorx->movement.target;
    int ret = TRUE;

    if (!aNPC_check_live_target(target)) {
        ret = FALSE;
    } else {
        aNPC_set_mv_angl(nactorx);
        if (aNPC_trace_route(nactorx) == FALSE) {
            ret = FALSE;
        }
    }

    return ret;
}

static int aNPC_act_demo_move(NPC_ACTOR* nactorx) {
    ACTOR* target = nactorx->movement.target;
    int ret = TRUE;

    if (!aNPC_check_live_target(target)) {
        ret = FALSE;
    } else {
        xyz_t pos;

        xyz_t_move(&pos, &target->world.position);
        aNPC_set_dst_pos(nactorx, pos.x, pos.z);
        aNPC_set_mv_angl(nactorx);
        if (aNPC_check_arrive_destination(nactorx) == TRUE) {
            ret = FALSE;
        }
    }

    return ret;
}

static int aNPC_act_to_point_move(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    int ret = TRUE;

    if (nactorx->movement.dst_pos_x == nactorx->movement.avoid_pos_x && nactorx->movement.dst_pos_z == nactorx->movement.avoid_pos_z) {
        aNPC_set_dst_pos(nactorx, nactorx->action.move_x, nactorx->action.move_z);
    } else {
        nactorx->movement.dst_pos_x = nactorx->action.move_x;
        nactorx->movement.dst_pos_z = nactorx->action.move_z;
    }

    aNPC_set_mv_angl(nactorx);
    if (aNPC_check_arrive_destination(nactorx) == TRUE) {
        ret = FALSE;
    }
    return ret;
}

static int aNPC_act_turn(NPC_ACTOR* nactorx) {
    int ret = TRUE;

    if (nactorx->actor_class.shape_info.rotation.y == nactorx->movement.mv_angl) {
        ret = FALSE;
    }

    return ret;
}

static int aNPC_act_search_turn(NPC_ACTOR* nactorx) {
    ACTOR* target = nactorx->movement.target;
    int ret = TRUE;

    if (!aNPC_check_live_target(target)) {
        ret = FALSE;
    } else {
        aNPC_set_dst_pos(nactorx, target->world.position.x, target->world.position.z);
        if (nactorx->actor_class.shape_info.rotation.y == nactorx->movement.mv_angl) {
            ret = FALSE;
        }
    }

    return ret;
}

static int aNPC_act_to_point_turn(NPC_ACTOR* nactorx) {
    int ret = TRUE;

    aNPC_set_dst_pos(nactorx, nactorx->action.move_x, nactorx->action.move_z);
    if (nactorx->actor_class.shape_info.rotation.y == nactorx->movement.mv_angl) {
        ret = FALSE;
    }

    return ret;
}

static int aNPC_act_anm_seq(NPC_ACTOR* nactorx) {
    int ret = TRUE;

    if (nactorx->draw.main_animation_state == cKF_STATE_STOPPED) {
        ret = FALSE;
    }

    return ret;
}

static void aNPC_act_anm_seq_allways_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    if (!aNPC_act_anm_seq(nactorx)) {
        nactorx->action.step = aNPC_ACTION_END_STEP;
    }
}

static void aNPC_act_return_trans_item(NPC_ACTOR* nactorx) {
    if (nactorx->condition_info.talk_condition != aNPC_TALK_TYPE_NONE) {
        if (aNPC_set_request_act(nactorx, 4, aNPC_ACT_TALK, aNPC_ACT_OBJ_DEFAULT, aNPC_req_default_data) == TRUE) {
            nactorx->condition_info.demo_flg = nactorx->condition_info.trans_demo_flg_save;
            nactorx->action.step = aNPC_ACTION_END_STEP;
        }
    } else {
        nactorx->condition_info.demo_flg = 0;
        nactorx->action.step = aNPC_ACTION_END_STEP;
    }
}

static void aNPC_act_special_proc(NPC_ACTOR* nactorx, GAME_PLAY* play, int type) {
    (*nactorx->action.act_proc)(nactorx, play, type);
}

// included act files

#include "../src/actor/npc/ac_npc_act_wait.c_inc"
#include "../src/actor/npc/ac_npc2_act_walk.c_inc"
#include "../src/actor/npc/ac_npc_act_turn.c_inc"
#include "../src/actor/npc/ac_npc_act_talk.c_inc"
#include "../src/actor/npc/ac_npc2_act_takeout.c_inc"
#include "../src/actor/npc/ac_npc2_act_putaway.c_inc"
#include "../src/actor/npc/ac_npc_act_trans.c_inc"
#include "../src/actor/npc/ac_npc_act_get.c_inc"
#include "../src/actor/npc/ac_npc2_act_contract.c_inc"
#include "../src/actor/npc/ac_npc2_act_not_contract.c_inc"
#include "../src/actor/npc/ac_npc_act_ensou.c_inc"

typedef void (*aNPC_ACT_PROC)(NPC_ACTOR* nactorx, GAME_PLAY* play, int type);

static aNPC_ACT_PROC aNPC_act_proc[] = {
    &aNPC_act_wait_proc,
    &aNPC_act_walk_proc,
    &aNPC_act_walk_proc,
    &aNPC_act_turn_proc,
    &aNPC_act_turn_proc,
    &aNPC_act_talk_proc,
    &aNPC_act_takeout_proc,
    &aNPC_act_putaway_proc,
    &aNPC_act_ensou_proc,
    &aNPC_act_talk_proc,
    &aNPC_act_trans_proc,
    &aNPC_act_get_proc,
    &aNPC_act_contract_proc,
    &aNPC_act_contract_proc,
    &aNPC_act_not_contract_proc,
    &aNPC_act_get_proc,
    &aNPC_act_special_proc,
};

static void aNPC_chk_request_act(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    if (nactorx->request.act_priority >= nactorx->action.priority && nactorx->request.act_priority != 0) {
        u8 prev_idx = nactorx->action.idx;
        u8 prev_obj = nactorx->action.act_obj;
        mActor_name_t prev_obj_name = nactorx->action.act_obj_id;

        nactorx->action.prev_idx = nactorx->action.idx;
        nactorx->action.prev_step = nactorx->action.step;
        nactorx->action.priority = nactorx->request.act_priority;
        nactorx->action.idx = nactorx->request.act_idx;
        nactorx->action.type = nactorx->request.act_type;

        (*aNPC_act_proc[nactorx->action.idx])(nactorx, play, aNPC_ACTION_PROC_TYPE_CHG_DATA);
        if (nactorx->action.act_obj != prev_obj || nactorx->action.act_obj_id != prev_obj_name) {
            aNPC_set_act_obj(nactorx, play);
        }

        if (nactorx->request.act_idx != prev_idx) {
            (*aNPC_act_proc[nactorx->action.idx])(nactorx, play, aNPC_ACTION_PROC_TYPE_INIT);
        }
    }

    nactorx->request.act_priority = 0;
}

static int aNPC_set_request_act(NPC_ACTOR* nactorx, u8 prio, u8 act_idx, u8 act_type, u16* args) {
    int ret = FALSE;

    if (prio >= nactorx->request.act_priority) {
        nactorx->request.act_priority = prio;
        nactorx->request.act_idx = act_idx;
        nactorx->request.act_type = act_type;

        if (args != NULL) {
            mem_copy((u8*)nactorx->request.act_args, (u8*)args, sizeof(nactorx->request.act_args));
        }

        ret = TRUE;
    }

    return ret;
}

static void aNPC_action_proc(NPC_ACTOR* nactorx, GAME_PLAY* play) {
    aNPC_chk_request_act(nactorx, play);

    if (nactorx->action.step != aNPC_ACTION_END_STEP && nactorx->action.idx != aNPC_ACT_NONE) {
        (*aNPC_act_proc[nactorx->action.idx])(nactorx, play, aNPC_ACTION_PROC_TYPE_MAIN);
    }

    if (nactorx->action.step == aNPC_ACTION_END_STEP) {
        nactorx->action.priority = 0;
    }
}
